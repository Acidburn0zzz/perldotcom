<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Networking on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/categories/networking/</link>
    <description>Recent content in Networking on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Feb 2018 10:40:29 +0000</lastBuildDate>
    <atom:link href="/categories/networking/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How does traceroute work?</title>
      <link>http://localhost:1313/article/how-does-traceroute-work-/</link>
      <pubDate>Wed, 28 Feb 2018 10:40:29 +0000</pubDate>
      
      <guid>http://localhost:1313/article/how-does-traceroute-work-/</guid>
      <description>

&lt;p&gt;Lately I&amp;rsquo;ve been reading &lt;a href=&#34;https://www.amazon.com/Interconnections-Bridges-Switches-Internetworking-Protocols/dp/0201634481/&#34;&gt;Interconnections&lt;/a&gt; by Radia Perlman (great lastname!). It&amp;rsquo;s an old, but still relevant book which describes how low-level networking technologies work, such as ethernet. The book contains many insights and anecdotes. On page 236 I came across this gem:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The traceroute utility is a clever hack designed to force each router along the path, in turn, to return an error report. It works by setting the TTL first to 1 (causing the first router to send an error report back to the source) and then setting it to 2 (causing the next router to send an error report) and so forth until the packet reaches the destination.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had never considered how &lt;code&gt;traceroute&lt;/code&gt; worked before, and by reading that paragraph, I instantly understood. The &lt;a href=&#34;https://en.wikipedia.org/wiki/Time_to_live&#34;&gt;Time To Live (TTL)&lt;/a&gt; field in an IP header was intended to hold the number of seconds for which the IP packet is valid, after which it can be dropped. In practice, it is used as a decrementing hop count, whereby every router that forwards the packet reduces the TTL value by one. IPv6 packets have the &amp;ldquo;hop limit&amp;rdquo; header field which is better named and serves the same purpose.&lt;/p&gt;

&lt;p&gt;When a router decrements a packet&amp;rsquo;s hop count value to zero, it sends an ICMP &lt;a href=&#34;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Time_exceeded&#34;&gt;time exceeded error message&lt;/a&gt; back to the source IP address in the packet, otherwise it forwards the packet onward.&lt;/p&gt;

&lt;p&gt;Modern versions of the &lt;code&gt;traceroute&lt;/code&gt; program don&amp;rsquo;t just send one packet at a time though. To speed things up it sends several packets with varying hop counts at once, so the program doesn&amp;rsquo;t have to wait for each router to respond before issuing the next packet.&lt;/p&gt;

&lt;h3 id=&#34;do-protocols-matter&#34;&gt;Do protocols matter?&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;traceroute&lt;/code&gt; program installed on my computer sends UDP datagrams by default, but can also be configured to send TCP or ICMP messages instead. All of these rely on the same principle of setting the hop count to a small number, and awaiting an ICMP time exceeded error message.&lt;/p&gt;

&lt;p&gt;However some routers may block certain ports by firewall, hence using TCP on port 80, an ICMP echo request (ping) or UDP on port 53 (DNS) might be more likely to succeed than a UDP datagram on a random unused port.&lt;/p&gt;

&lt;h3 id=&#34;traceroute-with-perl&#34;&gt;Traceroute with Perl&lt;/h3&gt;

&lt;p&gt;The module &lt;a href=&#34;https://metacpan.org/pod/Net::Traceroute::PurePerl&#34;&gt;Net::Traceroute::PurePerl&lt;/a&gt; implements the traceroute functionality in Perl. I installed the module from CPAN and ran it on the Perl.com domain using this one liner:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo $(which perl) -MNet::Traceroute::PurePerl -wE \
  &#39;my $n=Net::Traceroute::PurePerl-&amp;gt;new(host=&amp;gt;&amp;quot;perl.com&amp;quot;);$n-&amp;gt;traceroute();$n-&amp;gt;pretty_print&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because the script opens a raw socket, it needed to be run with root privileges. I use a locally-managed perl, so the subcommand &lt;code&gt;$(which perl)&lt;/code&gt; ensured my local perl was run instead of the system one. This is the output I got:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;traceroute to perl.com (207.171.7.45), 30 hops max, 40 byte packets
 1 192.168.1.1        1.98 ms    2.02 ms    1.96 ms
 2 * * *
 3 68.173.200.108    14.25 ms   15.03 ms   15.43 ms
 4 68.173.198.32     21.36 ms   16.54 ms   16.77 ms
 5 107.14.19.24      21.44 ms
 5 66.109.6.78       21.68 ms   10.39 ms
 6 66.109.6.27       12.58 ms   15.19 ms   14.55 ms
 7 66.109.5.119      16.93 ms   13.88 ms   20.49 ms
 8 154.54.10.209     14.68 ms   18.87 ms   13.28 ms
 9 154.54.44.217     12.37 ms
 9 154.54.80.177     19.20 ms   18.18 ms
10 154.54.40.106     32.09 ms
10 154.54.40.110     14.15 ms
10 154.54.40.106     14.30 ms
11 154.54.24.222     30.80 ms
11 154.54.7.158      30.87 ms
11 154.54.24.222     33.32 ms
12 154.54.28.70      42.33 ms   44.74 ms
12 154.54.28.130     41.91 ms
13 154.54.29.222     62.53 ms
13 154.54.30.162     60.21 ms   60.57 ms
14 154.54.42.65      72.04 ms   71.75 ms
14 154.54.42.77      70.90 ms
15 154.54.45.162     81.26 ms   81.30 ms   90.29 ms
16 154.54.42.102     80.39 ms
16 154.54.25.150     82.34 ms   83.04 ms
17 38.88.197.82      83.23 ms   91.67 ms   82.39 ms
18 207.171.30.62     83.17 ms   72.52 ms   77.83 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first entry is my wifi router. I&amp;rsquo;m guessing the second is my modem, which did not respond (hence the asterisks). You can see the succession of IP addresses for each router (technically, interface) that responded to the packets. The 18th entry is the last hop because Perl.com (207.171.7.45) sits on the same network (207.171.0.0/18).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Traceroute::PurePerl&#34;&gt;Net::Traceroute::PurePerl&lt;/a&gt; currently lacks IPv6 support, and hasn&amp;rsquo;t been updated in a while. The documentation lists IPv6 as a todo item, so if you&amp;rsquo;re interested in traceroute programming, this might be a good opportunity to send a patch. If the author doesn&amp;rsquo;t respond, you can always fork the distribution!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Monitoring my phone&#39;s internet activity with DD-WRT and Perl</title>
      <link>http://localhost:1313/article/monitoring-my-phone-s-internet-activity-with-netflows-and-perl/</link>
      <pubDate>Thu, 26 Oct 2017 19:56:37 +0000</pubDate>
      
      <guid>http://localhost:1313/article/monitoring-my-phone-s-internet-activity-with-netflows-and-perl/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve had a cracked phone screen for years, but recently as the glass started falling out, I decided it was time to upgrade. I bought a Samsung &lt;a href=&#34;https://www.samsung.com/us/explore/galaxy-s8/&#34;&gt;Galaxy S8&lt;/a&gt;, and was surprised to see &amp;ldquo;Unusual traffic from your computer network&amp;rdquo; &lt;a href=&#34;https://support.google.com/websearch/answer/86640?hl=en&#34;&gt;messages&lt;/a&gt; when searching via Google. This peaked my curiosity, so I decided to monitor the phone&amp;rsquo;s Internet traffic to see &lt;em&gt;who&lt;/em&gt; it was communicating with.&lt;/p&gt;

&lt;h3 id=&#34;router-setup&#34;&gt;Router Setup&lt;/h3&gt;

&lt;p&gt;I run &lt;a href=&#34;http://www.dd-wrt.com/site/index&#34;&gt;DD-WRT&lt;/a&gt; Linux on my home WiFi router. DD-WRT can run an &lt;a href=&#34;https://www.dd-wrt.com/wiki/index.php/Network_traffic_analysis_with_netflow_and_ntop&#34;&gt;Rflow service&lt;/a&gt; where it posts &lt;a href=&#34;https://en.wikipedia.org/wiki/NetFlow&#34;&gt;NetFlow&lt;/a&gt; traffic data to another computer on the network via UDP. I enabled the service, and configured it to post to my laptop&amp;rsquo;s IP address and the default port, 2055.&lt;/p&gt;

&lt;h3 id=&#34;monitoring&#34;&gt;Monitoring&lt;/h3&gt;

&lt;p&gt;I installed &lt;a href=&#34;https://www.ntop.org/&#34;&gt;ntop&lt;/a&gt; and setup a virtual interface pointing at the UDP socket, and lo! it quickly started displaying the NetFlow data. The problem was I couldn&amp;rsquo;t figure out how to filter out data that wasn&amp;rsquo;t from my phone (the various pcap filter expressions I tried did not work). Also it irked me to rely on a software program to do something as simple as parsing data from a UDP socket.&lt;/p&gt;

&lt;p&gt;Luckily I speak &lt;a href=&#34;https://en.wikipedia.org/wiki/Perl&#34;&gt;chainsaw&lt;/a&gt;, and whipped up this script to do the job:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; IO::Socket::INET;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Netflow;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $sock &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; IO::Socket::INET&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(
  LocalPort &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2055&lt;/span&gt;,
  Proto     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;udp&amp;#39;&lt;/span&gt;
);

open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $logfile, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;galaxy-s8.log&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $!;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($sender, $datagram);
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ($sender &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $sock&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;recv($datagram, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFFF&lt;/span&gt;))
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($sender_port, $sender_addr) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unpack_sockaddr_in($sender);
  $sender_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inet_ntoa($sender_addr);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($headers, $records) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Data::Netflow::decode($datagram, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) ;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $r (@$records) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($r&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{SrcAddr} &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;192.168.1.139&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $r&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{DstAddr} &lt;span style=&#34;color:#f92672&#34;&gt;ne&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;192.168.1.1&amp;#39;&lt;/span&gt;) {
      printf $logfile &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s,%d,%d,%d,%d\n&amp;#34;&lt;/span&gt;, $r&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{DstAddr}, $r&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{DstPort}, $r&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{Packets}, $r&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{Octets}, time;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The script opens a UDP socket on port 2055 and reads datagrams from it. It uses &lt;a href=&#34;https://metacpan.org/pod/Data::Netflow&#34;&gt;Data::Netflow&lt;/a&gt; to parse the datagrams from the socket. The &lt;code&gt;decode&lt;/code&gt; function accepts a datagram and returns a hashref of header data, and an arrayref of NetFlow &lt;a href=&#34;https://en.wikipedia.org/wiki/NetFlow#NetFlow_Record&#34;&gt;records&lt;/a&gt;. Each record is a hashref and strangely by default its keys are stringified numbers (&amp;ldquo;1&amp;rdquo; through &amp;ldquo;20&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;However if the second argument passed to &lt;code&gt;decode&lt;/code&gt; is true, then the record hashrefs use field names instead of numbers. Each record contains data like the source and destination IP addresses and ports, the number of packets sent, total number of bytes in the packets and so on. If the record&amp;rsquo;s source IP address match my phone&amp;rsquo;s network address, the script prints the pertinent information to a logfile.&lt;/p&gt;

&lt;p&gt;I disabled mobile data on my phone, and ran this script for 24 hours.&lt;/p&gt;

&lt;h3 id=&#34;results&#34;&gt;Results&lt;/h3&gt;

&lt;p&gt;I used &lt;a href=&#34;https://metacpan.org/pod/Net::Whois::IP&#34;&gt;Net::Whois::IP&lt;/a&gt; to lookup the organization for each IP address. Here&amp;rsquo;s the top ten Organizations by the number of packets sent:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Fastly (SKYCA-3) =&amp;gt; 1243
OPENX TECHNOLOGIES, INC. (OPENX) =&amp;gt; 989
Saferoute Incorporated (SAFER-1) =&amp;gt; 553
Servers.com, Inc. (SERVE-105) =&amp;gt; 13
Integral Ad Science, Inc. (ASML-5) =&amp;gt; 36
Facebook =&amp;gt; 724
Google LLC (GOOGL-2) =&amp;gt; 794
Amazon.com, Inc. (AMAZO-4) =&amp;gt; 2000
Search Guide Inc (SG-63) =&amp;gt; 140
Chaos Computer Club e.V =&amp;gt; 224
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And by the number of bytes sent:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Amazon Technologies Inc. (AT-88-Z) =&amp;gt; 1218193
Amazon.com, Inc. (AMAZO-48) =&amp;gt; 9230
Google LLC (GOGL) =&amp;gt; 40239218
VLAN927 =&amp;gt; 2005
ADFORM-NET =&amp;gt; 3041
ANS Communications, Inc (ANS) =&amp;gt; 1880
Wal-Mart Stores, Inc. (WALMAR) =&amp;gt; 1573
INAP-NYM-QUANTCAST-26423 =&amp;gt; 4822
Web.com, Inc. (WEBCO-24) =&amp;gt; 4232
CERFnet (CERF) =&amp;gt; 361
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It seems to me to be mostly web browsing / marketing data. The &lt;a href=&#34;https://www.ccc.de/en/club&#34;&gt;Chaos Computer Club&lt;/a&gt; entry is from using &lt;a href=&#34;https://guardianproject.info/apps/orfox/&#34;&gt;Orfox&lt;/a&gt; (a Tor browser). Although honestly, if something malicious was using AWS, I&amp;rsquo;m not sure how I could tell. Perhaps looking at the distribution and frequency of packets sent and correlating it with a journal of my phone activity might be a way to identify suspicious traffic.&lt;/p&gt;

&lt;p&gt;In the meantime, Google has stopped warning me about unusual activity, and I haven&amp;rsquo;t cracked the screen yet, so I suppose I&amp;rsquo;ll keep using this phone for now.&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dd-wrt.com/site/index&#34;&gt;DD-WRT&lt;/a&gt; is a Linux distribution for routers&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Netflow&#34;&gt;Data::Netflow&lt;/a&gt; is a Perl module that can encode/decode Netflow data versions 5 and 9 (DD-WRT produces version 5).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Whois::IP&#34;&gt;Net::Whois::IP&lt;/a&gt; is a Perl module for running &lt;a href=&#34;https://en.wikipedia.org/wiki/WHOIS&#34;&gt;WHOIS&lt;/a&gt; queries, it parses the response into a Perl data structure although it doesn&amp;rsquo;t normalize the keys.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Telephony Applications with Perl and TwiML</title>
      <link>http://localhost:1313/pub/2011/12/building-telephony-applications-with-perl-and-twiml.html/</link>
      <pubDate>Mon, 12 Dec 2011 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2011/12/building-telephony-applications-with-perl-and-twiml.html/</guid>
      <description>

&lt;p&gt;Perl makes writing Twilio telephony applications simple and enjoyable. My previous article, &lt;a href=&#34;http://localhost:1313/pub/2011/09/automating-telephony-with-perl-and-twilio.html&#34;&gt;Automating Telephony with Perl and Twilio&lt;/a&gt; showed how to use &lt;a href=&#34;https://metacpan.org/pod/WWW::Twilio::API&#34;&gt;WWW::Twilio::API&lt;/a&gt; to make a phone survey using Twilio&amp;rsquo;s text-to-speech synthesizer as well as send an SMS message to a phone number of your choice.&lt;/p&gt;

&lt;p&gt;This article builds an easy phone menu application using Twilio&amp;rsquo;s &lt;a href=&#34;http://www.twilio.com/docs/api/twiml/&#34;&gt;TwiML&lt;/a&gt; application language, &lt;a href=&#34;https://metacpan.org/pod/WWW::Twilio::TwiML&#34;&gt;WWW::Twilio::TwiML&lt;/a&gt;, and &lt;a href=&#34;http://mojolicio.us/&#34;&gt;Mojolicious&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;installation-and-twilio-account-creation&#34;&gt;&lt;strong&gt;Installation and Twilio account creation&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;To begin, install WWW::Twilio::TwiML and Mojolicious using your &lt;a href=&#34;http://www.cpan.org/modules/INSTALL.html&#34;&gt;favorite method&lt;/a&gt; (see the previous article for more ideas). You&amp;rsquo;ll need a &lt;a href=&#34;http://www.twilio.com/&#34;&gt;Twilio&lt;/a&gt; account (it&amp;rsquo;s free to create an account, plus Twilio gives new users US $30 for calls&amp;ndash;plenty for several weeks of testing). The previous article covers installation and getting setup with a Twilio account in more detail. With WWW::Twilio::TwiML and Mojolicious installed and a Twilio account active, it&amp;rsquo;s a great time to get a little more familiar with Twilio&amp;rsquo;s Dashboard.&lt;/p&gt;

&lt;h2 id=&#34;twilio-dashboard&#34;&gt;&lt;strong&gt;Twilio Dashboard&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.twilio.com/user/account&#34;&gt;Twilio Dashboard&lt;/a&gt; is where to find your Twilio sandbox information. The sandbox section of the dashboard is located below the fold of the dashboard page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2011_12_building-telephony-applications-with-perl-and-twiml/dashboard.png&#34; alt=&#34;Twilio Dashboard&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You should see the sandbox number and pin. You can set our inbound voice and inbound SMS handler URLs there (I&amp;rsquo;ll explain those soon.) First, a primer on how Twilio works.&lt;/p&gt;

&lt;h2 id=&#34;twiml-in-the-twilio-flow&#34;&gt;&lt;strong&gt;TwiML in the Twilio flow&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Twilio&amp;rsquo;s basic flow goes something like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2011_12_building-telephony-applications-with-perl-and-twiml/twilio-inbound-full.png&#34; alt=&#34;Handling an inbound call to Twilio&#34; /&gt;
(This diagram is not an official Twilio diagram; it merely describes the author&amp;rsquo;s mental model of how Twilio works and may differ wildly from Twilio&amp;rsquo;s actual implementation.)
1.  The caller dials (or sends an SMS to) &amp;ldquo;555-867-5309&amp;rdquo; on their phone&amp;ndash;this is your Twilio sandbox or purchased number. Twilio&amp;rsquo;s inbound call dispatcher receives the call or text.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Once the connection is made, the dispatcher makes an HTTP &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;POST&lt;/code&gt; to the Voice or SMS URL specified given for this number. Remember the Voice URL in the Sandbox App of the Twilio Dashboard shown above? That&amp;rsquo;s the one. For purchased Twilio numbers, you set the voice and SMS URLs under the &amp;ldquo;Numbers&amp;rdquo; tab in the Dashboard.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The Voice or SMS URL specified in the Sandbox App responds to the Twilio request with a &lt;em&gt;TwiML document&lt;/em&gt;. Twilio&amp;rsquo;s TwiML parser reads this document, then executes the &amp;ldquo;verbs&amp;rdquo; specified in the TwiML document. For example, if the TwiML document contained a &lt;code&gt;&amp;lt;Say&amp;gt;&lt;/code&gt; verb, Twilio&amp;rsquo;s text-to-speech synthesizer would &amp;ldquo;read&amp;rdquo; the text to the caller. If the document specified a &lt;code&gt;&amp;lt;Dial&amp;gt;&lt;/code&gt; verb and number, Twilio would dial the number and connect the caller to it. &lt;code&gt;&amp;lt;Redirect&amp;gt;&lt;/code&gt; verbs tell Twilio to fetch another TwiML document.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You may recall an example in the previous article which used Twilio&amp;rsquo;s &lt;a href=&#34;http://labs.twilio.com/twimlets/voicemail&#34;&gt;voicemail TwiML handler&lt;/a&gt; to conduct a brief phone survey. While you can sometimes manipulate third-party TwiML applications to do what you want, TwiML is so simple to use that you&amp;rsquo;ll find it&amp;rsquo;s often easier to write your own.&lt;/p&gt;

&lt;h2 id=&#34;twiml-basics&#34;&gt;&lt;strong&gt;TwiML basics&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;TwiML is a subset of XML. Here is a TwiML document that when read by Twilio&amp;rsquo;s parser, will say to the caller, &amp;ldquo;Foosball at 10 o&amp;rsquo;clock!&amp;rdquo; using the text-to-speech synthesizer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;Response&amp;gt;
  &amp;lt;Say voice=&amp;quot;man&amp;quot;&amp;gt;Foosball at 10 o&amp;amp;apos;clock!&amp;lt;/Say&amp;gt;
&amp;lt;/Response&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some TwiML verbs are nestable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;Response&amp;gt;
  &amp;lt;Gather action=&amp;quot;/menu.cgi&amp;quot; numDigits=&amp;quot;1&amp;quot; method=&amp;quot;GET&amp;quot;&amp;gt;
    &amp;lt;Say voice=&amp;quot;man&amp;quot;&amp;gt;
      Ping pong at high noon!
      Hit 1 if you&amp;amp;apos;re with me.
      Hit 2 if you&amp;amp;apos;re a loser.
    &amp;lt;/Say&amp;gt;
  &amp;lt;/Gather&amp;gt;

  &amp;lt;Say&amp;gt;You must make a choice!&amp;lt;/Say&amp;gt;
&amp;lt;/Response&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;Gather&amp;gt;&lt;/code&gt; verb tells Twilio to start gathering key presses. Meanwhile, Twilio will hand off the contents of the &lt;code&gt;&amp;lt;Say&amp;gt;&lt;/code&gt; verb to the text-to-speech handler. Nesting the &lt;code&gt;&amp;lt;Say&amp;gt;&lt;/code&gt; inside of the &lt;code&gt;&amp;lt;Gather&amp;gt;&lt;/code&gt; lets the caller push a key anytime during the &lt;code&gt;&amp;lt;Say&amp;gt;&lt;/code&gt; verb to interrupt it and process your choice. The final &lt;code&gt;&amp;lt;Say&amp;gt;&lt;/code&gt; element only executes if the &lt;code&gt;&amp;lt;Gather&amp;gt;&lt;/code&gt; fails (e.g., the caller doesn&amp;rsquo;t press a key).&lt;/p&gt;

&lt;p&gt;Twilio&amp;rsquo;s excellent documentation details &lt;a href=&#34;http://www.twilio.com/docs/api/twiml/&#34;&gt;all of the available TwiML verbs&lt;/a&gt;. Armed with a little knowledge, you&amp;rsquo;re dangerouly close to making something useful.&lt;/p&gt;

&lt;h2 id=&#34;simple-phone-menu&#34;&gt;&lt;strong&gt;Simple phone menu&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ve been asked to build a phone menu system for a young urban professional and his family. The application should accept an incoming call, prompt the caller with a numeric menu, and connect the caller with the number of their choice.&lt;/p&gt;

&lt;p&gt;No problem. Start with a simple static TwiML document called &lt;em&gt;menu.xml&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;Response&amp;gt;
  &amp;lt;Gather method=&amp;quot;GET&amp;quot; action=&amp;quot;/menu_handler&amp;quot; numDigits=&amp;quot;1&amp;quot;&amp;gt;
    &amp;lt;Say&amp;gt;Press 1 for Ryan&amp;lt;/Say&amp;gt;
    &amp;lt;Say&amp;gt;Press 2 for Liz&amp;lt;/Say&amp;gt;
    &amp;lt;Say&amp;gt;Press 3 for Jason&amp;lt;/Say&amp;gt;
    &amp;lt;Say&amp;gt;Press 4 for Erin&amp;lt;/Say&amp;gt;
    &amp;lt;Say&amp;gt;Press 5 for Rachel&amp;lt;/Say&amp;gt;
    &amp;lt;Say&amp;gt;Press 6 for Gilligan&amp;lt;/Say&amp;gt;
    &amp;lt;Say&amp;gt;Press 7 for Potsie&amp;lt;/Say&amp;gt;
  &amp;lt;/Gather&amp;gt;
&amp;lt;/Response&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can put this file on the web and update the URL in the &amp;ldquo;Voice URL&amp;rdquo; field of the Sandbox section of the Dashboard. Anyone who dials the sandbox number, will hear a Twilio&amp;rsquo;s text-to-speech voice reading the menu options. Anybody remember the &amp;ldquo;S.A.M.&amp;rdquo; speech synthesizer from the mid 80&amp;rsquo;s (Commodore 64 or Atari 800)? You&amp;rsquo;ve come a long way, baby!&lt;/p&gt;

&lt;p&gt;While this static TwiML file would work, it does mean you&amp;rsquo;ll have two files to update when a phone number changes. Fix that by consolidating the &lt;code&gt;/menu&lt;/code&gt; and &lt;code&gt;/menu_handler&lt;/code&gt; &amp;ldquo;routes&amp;rdquo; (the Mojolicious word for URL handlers) into a single program to generate TwiML dynamically.&lt;/p&gt;

&lt;h2 id=&#34;www-twilio-twiml-briefly&#34;&gt;&lt;strong&gt;WWW::Twilio::TwiML, briefly&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;WWW::Twilio::TwiML is a special-purpose XML generator and supports several programming styles. For example, the following two code snippets create this TwiML document:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;Response&amp;gt;
    &amp;lt;Say voice=&amp;quot;man&amp;quot;&amp;gt;Kilroy was here&amp;lt;/Say&amp;gt;
&amp;lt;/Response&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Snippet number 1:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $say = WWW::Twilio::TwiML-&amp;gt;new();
$say−&amp;gt;name(&#39;Say&#39;);
$say−&amp;gt;content(&amp;quot;Kilroy was here&amp;quot;);
$say−&amp;gt;attributes({voice =&amp;gt; &amp;quot;man&amp;quot;});

my $resp = WWW::Twilio::TwiML-&amp;gt;new();
$resp−&amp;gt;name(&#39;Response&#39;);
$resp−&amp;gt;content($say);

my $tw = WWW::Twilio::TwiML-&amp;gt;new();
$tw−&amp;gt;content($resp);
print $tw−&amp;gt;to_string;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And snippet number 2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $tw = WWW::Twilio::TwiML-&amp;gt;new();
$tw−&amp;gt;Response−&amp;gt;Say({voice =&amp;gt; &amp;quot;man&amp;quot;}, &amp;quot;Kilroy was here&amp;quot;);
print $tw−&amp;gt;to_string;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second snippet uses a technique called &amp;ldquo;method chaining&amp;rdquo;; if you&amp;rsquo;ve used the jQuery module for Javascript, you may already know how powerful chaining object methods can be in certain contexts. &lt;code&gt;WWW::Twilio::TwiML&lt;/code&gt; makes chaining possible because each TwiML verb method is a constructor of another &lt;code&gt;WWW::Twilio::TwiML&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;When you chain TwiML objects like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$tw-&amp;gt;Response-&amp;gt;Say(&amp;quot;Eat at Joe&amp;amp;apos;&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Response&lt;/code&gt; object is created as a child of the top &lt;code&gt;$tw&lt;/code&gt; object. The &lt;code&gt;Say&lt;/code&gt; object is created as the child of the &lt;code&gt;Response&lt;/code&gt; object. When the &lt;code&gt;$tw&lt;/code&gt; object&amp;rsquo;s &lt;code&gt;to_string&lt;/code&gt; method is invoked, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print $tw-&amp;gt;to_string;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;WWW:Twilio::TwiML&lt;/code&gt; crawls down &lt;code&gt;$tw&lt;/code&gt;&amp;rsquo;s list of children, recursively invoking &lt;code&gt;to_string&lt;/code&gt; until the last child. The whole process creates this output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;Response&amp;gt;
    &amp;lt;Say&amp;gt;Eat at Joe&amp;amp;apos;&amp;lt;/Say&amp;gt;
&amp;lt;/Response&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s may look a little foreign, but it makes for concise and readable TwiML.&lt;/p&gt;

&lt;h2 id=&#34;getting-your-mojo-on&#34;&gt;&lt;strong&gt;Getting your mojo on&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Now that you have a feel for creating TwiML documents, you need a way to serve them from the web.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mojolicio.us/&#34;&gt;Mojolicious&lt;/a&gt; is an easy-to-use web application framework. Just a few lines and you have a sweet little web app to serve TwiML. Feel free to read a little of the Mojolicious documentation. This author highly recommends going through the &lt;a href=&#34;http://mojolicio.us/perldoc/Mojolicious/Lite&#34;&gt;Mojolicious::Lite&lt;/a&gt; documentation first: almost everything you learn in Mojolicious::Lite also applies to the larger Mojolicious application framework.&lt;/p&gt;

&lt;p&gt;To write just enough Mojolicious to do what you&amp;rsquo;ve already done with the static TwiML document, you need only two modules for this entire application. (Neither has any dependencies&amp;ndash;you&amp;rsquo;re welcome.) Keep in mind that &lt;code&gt;Mojolicious::Lite&lt;/code&gt; enables &amp;lsquo;warnings&amp;rsquo; and &amp;lsquo;strict&amp;rsquo; by default: no sloppy programming allowed!&lt;/p&gt;

&lt;p&gt;This application implements a Mojolicious handler for the &lt;code&gt;/menu&lt;/code&gt; route which is only called when the application receives an HTTP &lt;code&gt;GET&lt;/code&gt; to the &lt;code&gt;/menu&lt;/code&gt; URI.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl

use Mojolicious::Lite;
use WWW::Twilio::TwiML;

get &#39;/menu&#39; =&amp;gt; sub {
    my $self = shift;

    $self-&amp;gt;render(format =&amp;gt; &#39;xml&#39;,
                  text   =&amp;gt; &amp;lt;&amp;lt;&#39;_TWIML_&#39;);
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;Response&amp;gt;
  &amp;lt;Gather method=&amp;quot;GET&amp;quot; action=&amp;quot;/menu_handler&amp;quot; numDigits=&amp;quot;1&amp;quot;&amp;gt;
    &amp;lt;Say&amp;gt;Press 1 for Ryan&amp;lt;/Say&amp;gt;
    &amp;lt;Say&amp;gt;Press 2 for Liz&amp;lt;/Say&amp;gt;
    &amp;lt;Say&amp;gt;Press 3 for Jason&amp;lt;/Say&amp;gt;
    &amp;lt;Say&amp;gt;Press 4 for Erin&amp;lt;/Say&amp;gt;
    &amp;lt;Say&amp;gt;Press 5 for Rachel&amp;lt;/Say&amp;gt;
    &amp;lt;Say&amp;gt;Press 6 for Gilligan&amp;lt;/Say&amp;gt;
    &amp;lt;Say&amp;gt;Press 7 for Potsie&amp;lt;/Say&amp;gt;
  &amp;lt;/Gather&amp;gt;
&amp;lt;/Response&amp;gt;
_TWIML_
};

app-&amp;gt;start;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s all it takes for a Mojolicious application (source &lt;a href=&#34;http://localhost:1313/media/_pub_2011_12_building-telephony-applications-with-perl-and-twiml/menu_static&#34;&gt;here&lt;/a&gt;). Mojolicious packs a full stack HTTP 1.1 web server, making tests easy. In one shell, start your Mojolicious program as a daemon (use Ctrl-c to stop when finished):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl menu_part daemon
[Mon Nov 14 21:41:34 2011] [info] Server listening (http://*:3000)
Server available at http://127.0.0.1:3000.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In another shell, pretend you&amp;rsquo;re Twilio&amp;rsquo;s application server and fetch the TwiML:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl http://localhost:3000/menu
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;Response&amp;gt;
  &amp;lt;Gather method=&amp;quot;GET&amp;quot; action=&amp;quot;/menu_handler&amp;quot; numDigits=&amp;quot;1&amp;quot;&amp;gt;
    &amp;lt;Say&amp;gt;Press 1 for Ryan&amp;lt;/Say&amp;gt;
    &amp;lt;Say&amp;gt;Press 2 for Liz&amp;lt;/Say&amp;gt;
    &amp;lt;Say&amp;gt;Press 3 for Jason&amp;lt;/Say&amp;gt;
    &amp;lt;Say&amp;gt;Press 4 for Erin&amp;lt;/Say&amp;gt;
    &amp;lt;Say&amp;gt;Press 5 for Rachel&amp;lt;/Say&amp;gt;
    &amp;lt;Say&amp;gt;Press 6 for Gilligan&amp;lt;/Say&amp;gt;
    &amp;lt;Say&amp;gt;Press 7 for Potsie&amp;lt;/Say&amp;gt;
  &amp;lt;/Gather&amp;gt;
&amp;lt;/Response&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Is this progress? This is same TwiML as in &lt;em&gt;menu.xml&lt;/em&gt;, but now it&amp;rsquo;s created with Mojolicious. At this point you can upload your app to a publicly accessible server, and, assuming Mojolicious is also installed there, you can start your application. Then go to the Twilio Dashboard and replace the existing Voice URL with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://your.server.org:3000/menu
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;important-note-about-mojolicious-and-http-get&#34;&gt;Important note about Mojolicious and HTTP GET&lt;/h3&gt;

&lt;p&gt;Mojolicious&amp;rsquo;s &lt;code&gt;get&lt;/code&gt; method only responds to HTTP &lt;code&gt;GET&lt;/code&gt; method requests. Make sure that when you set the Voice URL in the Twilio Dashboard, you also change the HTTP method to &lt;code&gt;GET&lt;/code&gt;. Alternatively, you could use Mojolicious&amp;rsquo;s &lt;code&gt;post&lt;/code&gt; method, which only responds to HTTP &lt;code&gt;POST&lt;/code&gt;, or the &lt;code&gt;any&lt;/code&gt; method, which accepts both &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; (as well as &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt;), but making Twilio use HTTP &lt;code&gt;GET&lt;/code&gt; seems more appropriate.&lt;/p&gt;

&lt;h2 id=&#34;putting-it-all-together&#34;&gt;&lt;strong&gt;Putting it all together&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Now it&amp;rsquo;s time to improve the program because it still serves static TwiML. It also needs a programmatic way tell Twilio what to do when the caller presses a key.&lt;/p&gt;

&lt;p&gt;Start over and make a hash for the phone menu. This could be put into a separate file&amp;ndash;and probably should be&amp;ndash;but it wouldn&amp;rsquo;t be a proper tutorial without &lt;em&gt;something&lt;/em&gt; left as an exercise.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl

use Mojolicious::Lite;
use WWW::Twilio::TwiML;

my %list = ( 1 =&amp;gt; { name =&amp;gt; &#39;Ryan&#39;,
                    number =&amp;gt; &#39;+19165557720&#39; },
             2 =&amp;gt; { name =&amp;gt; &#39;Liz&#39;,
                    number =&amp;gt; &#39;+19165551211&#39; },
             3 =&amp;gt; { name =&amp;gt; &#39;Jason&#39;,
                    number =&amp;gt; &#39;+19285550122&#39; },
             4 =&amp;gt; { name =&amp;gt; &#39;Erin&#39;,
                    number =&amp;gt; &#39;+19285551729&#39; },
             5 =&amp;gt; { name =&amp;gt; &#39;Rachel&#39;,
                    number =&amp;gt; &#39;+18015553992&#39; },
             6 =&amp;gt; { name =&amp;gt; &#39;Gilligan&#39;,
                    recording =&amp;gt; &#39;http://www.televisiontunes.com/&#39;
                              .     &#39;themesongs/Gilligans%20Island.mp3&#39; },
             7 =&amp;gt; { name =&amp;gt; &#39;Potsie&#39;,
                    recording =&amp;gt; &#39;http://www.televisiontunes.com/&#39;
                              .     &#39;themesongs/Happy%20Days%20-%20Season%202.mp3&#39; },
           );

get &#39;/menu&#39; =&amp;gt; sub {
    my $self = shift;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should looks mostly familiar so far. Now create &lt;code&gt;$msg&lt;/code&gt; which holds all of the text you want Twilio to &amp;ldquo;Say&amp;rdquo; to the caller:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $msg = join &#39;. &#39;,
      map { &amp;quot;Press $_ for $list{$_}-&amp;gt;{name}&amp;quot; }
        sort keys %list;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s time to build the TwiML document, and this could use some error handling in case the caller doesn&amp;rsquo;t press a key. Finally, print everything via Mojolicious&amp;rsquo;s &lt;code&gt;render()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $tw   = WWW::Twilio::TwiML-&amp;gt;new();
    my $resp = $tw-&amp;gt;Response;
    $resp-&amp;gt;Gather({action    =&amp;gt; $self-&amp;gt;url_for(&#39;/menu_handler&#39;),
                   method    =&amp;gt; &#39;GET&#39;,
                   numDigits =&amp;gt; 1})
         -&amp;gt;Say({voice =&amp;gt; &#39;woman&#39;}, $msg);

    $resp-&amp;gt;Say(&amp;quot;You need to make a choice or hang up.&amp;quot;);
    $resp-&amp;gt;Redirect(&amp;quot;/menu&amp;quot;);

    $self-&amp;gt;render(format =&amp;gt; &#39;xml&#39;,
                  text   =&amp;gt; $tw-&amp;gt;to_string);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember to start Mojolicious&amp;rsquo;s event loop; this code should always go at the end of your application, as it never returns:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app-&amp;gt;start;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Source &lt;a href=&#34;http://localhost:1313/media/_pub_2011_12_building-telephony-applications-with-perl-and-twiml/menu_part&#34;&gt;here&lt;/a&gt;). If declarative-style programming is new to you, don&amp;rsquo;t fret: under the hood, Mojolicious simply creates a map for itself that says &amp;ldquo;when I receive an HTTP &lt;code&gt;GET&lt;/code&gt; for &amp;lsquo;/menu&amp;rsquo;, I should execute this subroutine&amp;rdquo;. The &lt;code&gt;app-&amp;gt;start&lt;/code&gt; routine begins a loop that waits for said request, then handles it as you&amp;rsquo;ve defined (declared) it.&lt;/p&gt;

&lt;h2 id=&#34;the-menu-handler-route&#34;&gt;&lt;strong&gt;The menu handler route&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Most of the hard work is done now. As specified in the &lt;code&gt;Gather&lt;/code&gt;&amp;rsquo;s &lt;code&gt;action&lt;/code&gt; attribute above, when the caller presses a key, Twilio will perform an HTTP &lt;code&gt;GET&lt;/code&gt; on &lt;code&gt;/menu_handler&lt;/code&gt;. Add one more Mojolicious route:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;get &#39;/menu_handler&#39; =&amp;gt; sub {
    my $self   = shift;
    my $choice = $self-&amp;gt;param(&#39;Digits&#39;) || 0;

    my $tw     = WWW::Twilio::TwiML-&amp;gt;new();
    my $resp   = $tw-&amp;gt;Response;

    unless( exists $list{$choice} ) {
        $resp-&amp;gt;Say({voice =&amp;gt; &#39;woman&#39;},
                   &amp;quot;Sorry, that&#39;s not a valid option.&amp;quot;);

        $resp-&amp;gt;Redirect({method =&amp;gt; &#39;GET&#39;}, &amp;quot;/menu&amp;quot;);

        $self-&amp;gt;render(format =&amp;gt; &#39;xml&#39;,
                      text   =&amp;gt; $tw-&amp;gt;to_string);
        return;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Twilio always passes a &lt;code&gt;Digits&lt;/code&gt; parameter to URLs it fetches as a result of a &lt;code&gt;Gather&lt;/code&gt; action (see &lt;a href=&#34;http://www.twilio.com/docs/api/twiml/gather&#34;&gt;Twilio&amp;rsquo;s Gather verb documentation&lt;/a&gt;); &lt;code&gt;Digits&lt;/code&gt; contains the digit or digits pressed by the caller. HTTP &lt;code&gt;GET&lt;/code&gt; (and &lt;code&gt;POST&lt;/code&gt;) parameters are available to Mojolicious through the &lt;code&gt;param()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The code then checks to see if the option the caller has selected exists. If it doesn&amp;rsquo;t, it generates a TwiML response to tell Twilio to &lt;code&gt;Say&lt;/code&gt; to the caller &amp;ldquo;Sorry, that&amp;rsquo;s not a valid option.&amp;rdquo; then sends a redirect back to the main menu.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s polite to let the caller know what&amp;rsquo;s going on, so add a status message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$resp-&amp;gt;Say({voice =&amp;gt; &#39;woman&#39;},
           &amp;quot;I&#39;ll try connecting you now.&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember that all this code does is &lt;em&gt;build&lt;/em&gt; the TwiML response object; only when the complete, stringified TwiML object is sent to Twilio&amp;rsquo;s application server does the document have any effect on the application flow.&lt;/p&gt;

&lt;p&gt;The next step is to look up the caller&amp;rsquo;s choice in the &lt;code&gt;%list&lt;/code&gt; hash. If the caller&amp;rsquo;s selection had a phone number associated with it, create a &lt;code&gt;Dial&lt;/code&gt;, &lt;code&gt;Play&lt;/code&gt;, or &lt;code&gt;Say&lt;/code&gt; TwiML object, depending on whether &lt;code&gt;%list&lt;/code&gt; specifies a number to call, a URL to an audio file to fetch and play, or neither (respectively):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    if( $list{$choice}-&amp;gt;{number} ) {
        $resp-&amp;gt;Dial($list{$choice}-&amp;gt;{number});
    }

    elsif( $list{$choice}-&amp;gt;{recording} ) {
        $resp-&amp;gt;Play($list{$choice}-&amp;gt;{recording});
    }

    else {
        $resp-&amp;gt;Say({voice =&amp;gt; &#39;woman&#39;},
                   &amp;quot;Sorry, that option isn&#39;t working.&amp;quot;);
        $resp-&amp;gt;Redirect({method =&amp;gt; &#39;GET&#39;}, &amp;quot;/menu&amp;quot;);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, invoke Mojolicious&amp;rsquo;s &lt;code&gt;render()&lt;/code&gt; method to create an XML &lt;em&gt;Content-type&lt;/em&gt; header and send the stringified TwiML object to &lt;code&gt;stdout&lt;/code&gt; (which Twilio&amp;rsquo;s application server will read):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $self-&amp;gt;render(format =&amp;gt; &#39;xml&#39;,
                  text   =&amp;gt; $tw-&amp;gt;to_string);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_2011_12_building-telephony-applications-with-perl-and-twiml/menu&#34;&gt;Here is the full source&lt;/a&gt; for your enjoyment. If you&amp;rsquo;ve already set Twilio&amp;rsquo;s Voice URL in uour Sandbox, nothing further needs to be done on Twilio&amp;rsquo;s side. Just upload the new application to the web server and start it (Mojolicious supports a variety of &lt;a href=&#34;http://mojolicio.us/perldoc/Mojolicious/Guides/Cookbook#DEPLOYMENT&#34;&gt;deployment options&lt;/a&gt; including Morbo, CGI, FastCGI, or Plack).&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ve made a simple phone menu here, but you&amp;rsquo;ve only learned a few of &lt;a href=&#34;http://www.twilio.com/docs/api/twiml/&#34;&gt;Twilio&amp;rsquo;s TwiML verbs&lt;/a&gt;. With &lt;a href=&#34;https://metacpan.org/pod/WWW::Twilio::API&#34;&gt;WWW::Twilio::API&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/WWW::Twilio::TwiML&#34;&gt;WWW::Twilio::TwiML&lt;/a&gt;, and &lt;a href=&#34;http://mojolicio.us&#34;&gt;Mojolicious&lt;/a&gt; you can also create conference rooms, make voice recordings, send and receive SMS messages, reject calls from unwanted numbers, and do other useful actions in just a few lines of code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automating Telephony with Perl and Twilio</title>
      <link>http://localhost:1313/pub/2011/09/automating-telephony-with-perl-and-twilio.html/</link>
      <pubDate>Wed, 21 Sep 2011 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2011/09/automating-telephony-with-perl-and-twilio.html/</guid>
      <description>

&lt;p&gt;Perl can make your phone ring.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.twilio.com/&#34;&gt;Twilio&lt;/a&gt; allows developers to write applications that can make and receive voice calls or SMS messages (though Twilio can do many other interesting telephony things). Twilio’s RESTful API, text-to-speech synthesizer, speech transcription services, and Javascript client make it easy to knock out a conference call application, an in-browser customer service voice application, a weather-by-SMS application, reminder by phone—anything, really—in minutes. This article shows how to make a couple of small applications, one to help you pronounce words correctly and the other to transcribe awkward condiment phone survey answers.&lt;/p&gt;

&lt;h2 id=&#34;twilio-setup&#34;&gt;&lt;strong&gt;Twilio Setup&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;First, head over to &lt;a href=&#34;http://www.twilio.com/&#34;&gt;Twilio.com&lt;/a&gt; and click the “Try Twilio Free” link. While inbound calls cost US $0.01 per minute and outbound calls cost US $0.02 per minute, Twilio has historically given new users a generous account balance to start with for free (currently US $30)—it’s plenty of credit to kick the tires and take it for a spin.&lt;/p&gt;

&lt;p&gt;Go ahead and register (I’ll wait here). When you’ve finished, you’ll have an account SID (beginning with “AC”) and an auth token, available from your Twilio Dashboard. These are your Twilio API username and password; you’ll need them for any API application you write.&lt;/p&gt;

&lt;h2 id=&#34;twilio-basics&#34;&gt;&lt;strong&gt;Twilio Basics&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The Twilio website is full of well-organized documentation and sample applications. I recommend starting with “How It Works” (one of the main navigation links on the home page). Browse the documentation under “Docs” as well.&lt;/p&gt;

&lt;p&gt;H. H. Munroe said, “A little inaccuracy sometimes saves tons of explanation.” Keeping that in mind, inbound calls (calls to a Twilio number) work like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2011_09_automating-telephony-with-perl-and-twilio/twilio-inbound.png&#34; alt=&#34;&#34; /&gt;
&lt;em&gt;Inbound calls to a Twilio number&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;1) the user calls “555-867-5309” on their phone&lt;/p&gt;

&lt;p&gt;2) Twilio accepts the call, then makes an HTTP POST to &lt;a href=&#34;http://example.com/jenny.xml&#34;&gt;http://example.com/jenny.xml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) example.com responds with a “TwiML” document (TwiML is a simple XML language that describes how Twilio will interact with callers):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;Response&amp;gt;
  &amp;lt;Say voice=&amp;quot;woman&amp;quot;&amp;gt;This is Jenny!&amp;lt;/Say&amp;gt;
&amp;lt;/Response&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4) Twilio’s TwiML parser and text-to-speech synthesizer read this document and then says to the user (in a voice from the uncanny valley), “This is Jenny!”&lt;/p&gt;

&lt;p&gt;When you setup a sandbox number, you tell Twilio to map a URL to that number. Twilio will GET/POST to that URL when receiving calls.&lt;/p&gt;

&lt;p&gt;Outbound calls (calls from a Twilio number) work like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2011_09_automating-telephony-with-perl-and-twilio/twilio-outbound.png&#34; alt=&#34;&#34; /&gt;
&lt;em&gt;Outbound calls from a Twilio number&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;1) An application makes an HTTP POST to Twilio’s “Calls” API with the parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;From=+15558675309
To=+19991234567
Url=http://example.com/jenny.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2) Twilio places the call and waits for an answer&lt;/p&gt;

&lt;p&gt;3) Once the user answers, Twilio retrieves the URL specified in the POST (which should return a TwiML document)&lt;/p&gt;

&lt;p&gt;4) Twilio parses the TwiML document and passes it to the text-to-speech synthesizer&lt;/p&gt;

&lt;p&gt;5) The synthesizer says to the user “This is Jenny!”&lt;/p&gt;

&lt;p&gt;Twilio can also record voice input, transcribe it, send and receive SMS messages, make conference calls, and a few other useful things, all using the same familiar RESTful API and TwiML.&lt;/p&gt;

&lt;h2 id=&#34;twilio-meet-perl&#34;&gt;&lt;strong&gt;Twilio, meet Perl&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;CPAN makes writing Twilio applications easy, thanks to &lt;a href=&#34;https://metacpan.org/pod/WWW::Twilio::API&#34;&gt;WWW::Twilio::API&lt;/a&gt;. My (current) favorite way to install CPAN modules comes from the Mojolicious project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -L cpanmin.us | perl - WWW::Twilio::API
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cpanmin.us returns a Perl program which handles all of the build dependencies for you. If you’re leery of running code from a website directly on the command line, install &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;App::cpanminus&lt;/a&gt; and use its &lt;code&gt;cpanm&lt;/code&gt; program instead.&lt;/p&gt;

&lt;p&gt;If you’re like me and don’t want to mess up your clean development environment, tell cpanmin.us or &lt;code&gt;cpanm&lt;/code&gt; to install things into a temporary location:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir ~/perl-test
$ export PERL5LIB=~/perl-test/lib/perl5
$ curl -L cpanmin.us | perl - --local-lib=~/perl-test WWW::Twilio::API
# or
$ cpanm --local-lib=~/perl-test WWW::Twilio::API
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;a href=&#34;http://www.cpan.org/modules/INSTALL.html&#34;&gt;How to install CPAN modules&lt;/a&gt; for more information and options.&lt;/p&gt;

&lt;h2 id=&#34;getting-all-the-necessary-twilio-information&#34;&gt;&lt;strong&gt;Getting all the necessary Twilio information&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;After you install &lt;a href=&#34;https://metacpan.org/pod/WWW::Twilio::API&#34;&gt;WWW::Twilio::API&lt;/a&gt;, but before you make your first call, you need several pieces of information from your Twilio Dashboard:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AccountSid: this is a long string begining with “AC”&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;AuthToken: another long hex string, next to the AccountSid; you may have to click a lock icon to reveal it&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sandbox number: found on the bottom half of the Dashboard page under “Sandbox App”&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s all! Now you’re ready to go.&lt;/p&gt;

&lt;h2 id=&#34;your-first-phone-call&#34;&gt;&lt;strong&gt;Your first phone call&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Fire up your favorite editor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl

use strict;
use warnings;
use WWW::Twilio::API;

my $twilio = WWW::Twilio::API-&amp;gt;( AccountSid  =&amp;gt; &#39;ACxxxxxxxxx&#39;,
                                 AuthToken   =&amp;gt; &#39;xxxxxxxxxxx&#39;,
                                 API_VERSION =&amp;gt; &#39;2010-04-01&#39; );

## A hollow voice says &#39;plugh&#39;
my $response = $twilio-&amp;gt;POST( &#39;Calls&#39;,
                              To   =&amp;gt; &#39;+15556667777&#39;, ## maybe your cell phone
                              From =&amp;gt; &#39;+12223334444&#39;, ## your Twilio sandbox
                              Url  =&amp;gt; &#39;http://twimlets.com/message?&#39;
                                    . &#39;Message%5B0%5D=plugh&#39; );

print STDERR $response-&amp;gt;{content};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s the entire application. Run it, and if all went well, you should see a long XML string returned which resembles:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;TwilioResponse&amp;gt;
  &amp;lt;Call&amp;gt;
    &amp;lt;To&amp;gt;+15556667777&amp;lt;/To&amp;gt;
    &amp;lt;From&amp;gt;+12223334444&amp;lt;/From&amp;gt;
    &amp;lt;Status&amp;gt;queued&amp;lt;/Status&amp;gt;
    &amp;lt;Direction&amp;gt;outbound-api&amp;lt;/Direction&amp;gt;
  &amp;lt;/Call&amp;gt;
&amp;lt;/TwilioResponse&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… and then your phone should ring. I’ve always wondered how to pronounce “plugh”—now I know.&lt;/p&gt;

&lt;h2 id=&#34;what-could-possibly-go-wrong&#34;&gt;&lt;strong&gt;What could possibly go wrong?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Early on in Twilio development, you’re likely to experience a few little gotchas. For example, you might get this message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LWP will support https URLs if the LWP::Protocol::https module
is installed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s LWP telling you to install &lt;a href=&#34;https://metacpan.org/pod/LWP::Protocol::https&#34;&gt;LWP::Protocol::https&lt;/a&gt;. (It will also install or update a few other modules, including &lt;a href=&#34;https://metacpan.org/pod/Net::SSLeay&#34;&gt;Net::SSLeay&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If you see XML after running the script, your development environment is probably fine. You might instead see:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;TwilioResponse&amp;gt;
  &amp;lt;RestException&amp;gt;
    &amp;lt;Status&amp;gt;401&amp;lt;/Status&amp;gt;
    &amp;lt;Message&amp;gt;Authenticate&amp;lt;/Message&amp;gt;
    &amp;lt;Code&amp;gt;20003&amp;lt;/Code&amp;gt;
    &amp;lt;MoreInfo&amp;gt;http://www.twilio.com/docs/errors/20003&amp;lt;/MoreInfo&amp;gt;
  &amp;lt;/RestException&amp;gt;
&amp;lt;/TwilioResponse&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the “401”? If you’re familiar with &lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&#34;&gt;HTTP status codes&lt;/a&gt;, you might remember that 401 means “Unauthorized”. You either didn’t present any authorization information, or it was incorrect. In this case, it usually means the AccountSid or AuthToken are incorrect. Log into Twilio.com, go to the Dashboard and make sure your AccountSid and AuthToken are correct.&lt;/p&gt;

&lt;h2 id=&#34;what-else-can-we-do&#34;&gt;&lt;strong&gt;What else can we do?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Everything depends on what you put in for the Url parameter. You can browse some of the free applications at &lt;a href=&#34;http://labs.twilio.com/twimlets/&#34;&gt;Twilio Labs&lt;/a&gt;, though most of those are for inbound calls.&lt;/p&gt;

&lt;p&gt;Here’s a silly example of using the voicemail Twimlet to conduct a brief phone survey and have the callee’s response transcribed and emailed. Start by changing the Url line in the POST:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $email    = &#39;you@example.com&#39;;  ## your email
my $msg      = &#39;Please+tell+us+what+you+think+of+Tabasco+sauce&#39;;
my $response = $twilio-&amp;gt;POST( &#39;Calls&#39;,
                              To   =&amp;gt; &#39;+15556667777&#39;,
                              From =&amp;gt; &#39;+12223334444&#39;,
                              Url  =&amp;gt; &amp;quot;http://twimlets.com/voicemail?&amp;quot;
                                    . &amp;quot;Email=$email&amp;amp;Message=$msg&amp;quot; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this Twimlet’s arguments are case-sensitive. ‘Email’ and ‘Message’ are not the same as ‘email’ and ‘message’. Make sure you use the correct case.&lt;/p&gt;

&lt;p&gt;Also, be sure to substitute your phone number for the To parameter and your Twilio Sandbox phone number (also found on your Twilio Dashboard) for the From parameter. Twilio phone numbers always use the international calling prefix (e.g., United States numbers use “+1” followed by the three digit area code followed by the seven digit phone number).&lt;/p&gt;

&lt;p&gt;When you run this, you’ll get a call from Twilio asking you to share your insights into Tabasco sauce. Please be honest. Once you’ve given your opinion, Twilio will then transcribe your message and email it to the email address you specified.&lt;/p&gt;

&lt;h2 id=&#34;i-m-sending-out-an-sms&#34;&gt;&lt;strong&gt;I’m sending out an SMS&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;SMS messages are even easier: no TwiML needed. Instead of the Calls API, use the &lt;em&gt;SMS/Messages&lt;/em&gt; API:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $response = $twilio-&amp;gt;POST( &#39;SMS/Messages&#39;,
                              To   =&amp;gt; &#39;+15556667777&#39;,
                              From =&amp;gt; &#39;+12223334444&#39;,
                              Body =&amp;gt; &#39;Rescue me before &#39;
                                   .  &#39;I fall into despair&#39; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s all you have to do to send an SMS message using Twilio (though the 160 character limit applies).&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Twilio and Perl make a potent pair: so much is possible with so little code. The next installment will cover writing larger applications with TwiML.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Build a Wireless Gateway with Perl</title>
      <link>http://localhost:1313/pub/2005/05/19/wireless_gw.html/</link>
      <pubDate>Thu, 19 May 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/05/19/wireless_gw.html/</guid>
      <description>

&lt;p&gt;You have set up and configured various wireless access devices, but could not find one that included all of the features you needed. You &lt;em&gt;could&lt;/em&gt; wait for a firmware upgrade from your manufacturer, hoping that they will include the features you want. However, your chances of finding all of your issues addressed by a new firmware package, if it ever comes out, are slim to none. Now is the time to roll up your sleeves and build your own wireless access gateway from scratch. Don&amp;rsquo;t let this idea scare you; this is all possible thanks to the open source world.&lt;/p&gt;

&lt;p&gt;This article introduces an open source project called &lt;a href=&#34;http://awlp.sourceforge.net/&#34;&gt;AWLP&lt;/a&gt; (Alptekin&amp;rsquo;s Wireless Linux Project), which turns a PC with an appropriate wireless LAN card (Prism2/2.&lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;) into a full-featured, web-managed wireless access gateway. That old Pentium 120 machine in your basement might march back up the stairs shortly.&lt;/p&gt;

&lt;p&gt;Building your own wireless access device is nothing new. Around three years ago, Jouni Malinen released &lt;a href=&#34;http://hostap.epitest.fi/&#34;&gt;HostAP&lt;/a&gt;, a Linux driver for wireless LAN cards with Intersil&amp;rsquo;s Prism2/2.&lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; chipset. When operated in a special mode called Managed, the host computer acts as a wireless access point. HostAP does its job and does it well, but it is command line only, and that&amp;rsquo;s not suitable for everyone. A complete solution that potentially competes with off-the-shelf devices needs more features, including DHCP, firewall, DNS, and NTP, along with a web interface for configuration. This is the &lt;em&gt;de facto&lt;/em&gt; standard nowadays.&lt;/p&gt;

&lt;p&gt;To use a car analogy, this is like building a custom car; you want to be able to put in a new clutch, change the suspension, or try a new braking system and see how it performs. In the case of the gateway, you might want to implement an outgoing port-based filter in addition to the incoming one in the firewall. You may want to try a different DNS server or develop a special module that will block MAC addresses through ACLs after exceeding a certain amount of bandwidth in a short period of time.&lt;/p&gt;

&lt;p&gt;For AWLP, the chassis is GNU/Linux Slackware, the engine is Host AP Driver, the transmission is Host AP Utilities, and so on. AWLP code, written in Perl, is the part that makes all these components work together in harmony as a wireless access gateway. After you set up AWLP, you will have a functioning, preconfigured, wireless access gateway to start with. Then you can start modifying the Perl code and configuration files to test and implement the extra capabilities.&lt;/p&gt;

&lt;h3 id=&#34;hardware-requirements&#34;&gt;Hardware Requirements&lt;/h3&gt;

&lt;p&gt;You need a dedicated machine for this task. Running with less than 32 MB of RAM will be painful; the system is more RAM-intensive than it is CPU-intensive so you can run it even on a 486 processor&amp;ndash;but be aware that most 486 machines have only ISA slots. You might have problems finding ISA &lt;sup&gt;10&lt;/sup&gt;&amp;frasl;&lt;sub&gt;100&lt;/sub&gt; Mbps Ethernet cards and ISA wireless LAN cards on the market. An old Pentium machine with at least 1GB HDD is ideal for this task.&lt;/p&gt;

&lt;p&gt;If you plan on running your wireless device on a &lt;sup&gt;24&lt;/sup&gt;&amp;frasl;&lt;sub&gt;7&lt;/sub&gt; basis, and if availability and portability are major concerns, you might consider dedicated hardware. Check out &lt;a href=&#34;http://www.openbrick.com/&#34;&gt;OpenBrick Community&lt;/a&gt; for compact hardware platforms with HDD support.&lt;/p&gt;

&lt;p&gt;In addition to the computer, you also need an Ethernet card compatible with Linux, a PCI or PCMCIA wireless LAN card that has a Prism2/2.&lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; chipset, and a PCI-to-PCMCIA converter, depending on your choice of wireless LAN card and the slots on your board. Refer to the &lt;a href=&#34;http://awlp.sourceforge.net/hardwarecompatibility.html&#34;&gt;AWLP Hardware Compatibility&lt;/a&gt; section for in-depth information on choosing these three components.&lt;/p&gt;

&lt;h3 id=&#34;installing-awlp&#34;&gt;Installing AWLP&lt;/h3&gt;

&lt;p&gt;There are three phases of installation:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Custom installing Slackware with tagfiles&lt;/li&gt;
&lt;li&gt;Upgrading packages in Slackware&lt;/li&gt;
&lt;li&gt;Installing AWLP codes and configuration files&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The third step is the easiest one. The first step, installing Slackware with tagfiles provided by the AWLP package, will take most of your time and effort. You must have Slackware installation discs on hand. Consult the &lt;a href=&#34;http://www.slackware.com/&#34;&gt;Slackware Linux Project&lt;/a&gt; site to obtain them. In order to keep this article readable, I again refer you to the related site, the step-by-step &lt;a href=&#34;http://awlp.sourceforge.net/docs/installation.html&#34;&gt;AWLP Installation Instructions&lt;/a&gt;. After completing the first and second phase of the installation instructions, you can install AWLP, the code, and the configuration files that will make everything work together.&lt;/p&gt;

&lt;p&gt;I highly recommend that you take a disk image after successfully installing AWLP and before you start to modify the code if you have installed it on a slow machine. Installing AWLP code and configuration files take no more than couple of minutes, but in order to reach this step, you must have custom-installed the Slackware with the tagfiles provided, and this might take a couple of hours on an old (&amp;lt;200MHz) Pentium machine. Taking a disk image and restoring from that image when needed will be a lot easier and quicker than starting afresh from Step 1.&lt;/p&gt;

&lt;h3 id=&#34;under-the-hood&#34;&gt;Under the Hood&lt;/h3&gt;

&lt;p&gt;AWLP uses several configuration files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DHCP, the Dynamic Host Configuration Protocol: &lt;em&gt;/etc/dhcpd.conf&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Apache Web Server: &lt;em&gt;/etc/apache/httpd.conf&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;DNS, the Domain Name System: &lt;em&gt;/etc/named.conf&lt;/em&gt;, &lt;em&gt;/var/named/caching-example/localhost.zone&lt;/em&gt;, &lt;em&gt;/var/named/caching-example/named.ca&lt;/em&gt;, and &lt;em&gt;/var/named/caching-example/named.local&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;NTP, the Network Time Protocol: &lt;em&gt;/etc/ntp.conf&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Firewalling: &lt;em&gt;/etc/rc.d/rc.firewall&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to these standard configuration files, there are some custom configuration files such as &lt;em&gt;/etc/awlp/oui_filtered.txt&lt;/em&gt;. This file contains the filtered version of &lt;em&gt;oui.txt&lt;/em&gt;, representing the &lt;a href=&#34;http://standards.ieee.org/regauth/oui/oui.txt&#34;&gt;IEEE Organizationally Unique Identifiers&lt;/a&gt;. It makes it possible to find the company manufacturing a specific Ethernet card, wired or wireless, using the first 24 bits of MAC address. In order to have an in-depth knowledge of all the configuration files and their layouts, I encourage you to examine &lt;em&gt;installer.sh&lt;/em&gt; from the AWLP package.&lt;/p&gt;

&lt;p&gt;AWLP code resides in &lt;em&gt;/var/www/cgi-bin/awlp&lt;/em&gt;. The core of the AWLP code is &lt;em&gt;index.pl&lt;/em&gt;. It does all of the error checking, manipulation, and modification. The web server, Apache 1.3.33, runs as the user and group &lt;code&gt;apache&lt;/code&gt;. In order to manipulate configuration files through the web browser, the related configuration files have suid and guid permissions set. This strategy is definitely more secure than running the web server as &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The part that interacts with HostAP command line tools and utilities, along with standard Linux tools and utilities, is &lt;em&gt;engines1.pl&lt;/em&gt;. It serves as an include file and contains various subroutines to do the work. &lt;em&gt;engines2.pl&lt;/em&gt; also contains various subroutines, but these usually do sorting, searching, and conversion. &lt;em&gt;radar.pl&lt;/em&gt; provides status checking and monitoring functionality. It&amp;rsquo;s not crucial to the operating of the wireless access gateway, but it definitely does add value because watching and monitoring how your device is performing is the key factor to the success of your implementation.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;extras.pl&lt;/em&gt; provides ASCII to HEX conversion, DHCP lease table display, and several other non-core functions. As the name implies, &lt;em&gt;error_messages.pl&lt;/em&gt; has all the error messages and their descriptions. &lt;em&gt;global_configuration.pl&lt;/em&gt; has pretty much all the configuration variables ranging from critical to non-critical. You must understand the inner workings of the system in order to change the configuration variables up to &lt;code&gt;$MAIN_TITLE&lt;/code&gt;. &lt;code&gt;$MAIN_TITLE&lt;/code&gt; and the following variables are also necessary, but for mostly cosmetic purposes, so you can customize them without worrying about accidentally disabling needed features.&lt;/p&gt;

&lt;h3 id=&#34;sample-modification&#34;&gt;Sample Modification&lt;/h3&gt;

&lt;p&gt;Now you know what AWLP is and what it can do. What about all these modifications and customizations? Now, it is time to show you a step-by-step instruction for adding a feature to AWLP. As of AWLP 1.0, you can configure the DHCP server only by manually changing &lt;em&gt;/etc/dhcpd.conf&lt;/em&gt;. The feature I want to demonstrate will simply show the contents of the file. Once you have familiarity with the code, you can improve it to modify the contents of &lt;em&gt;dhcpd.conf&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The Apache web server runs as the user and group &lt;code&gt;apache&lt;/code&gt;. The result of &lt;code&gt;ls -l&lt;/code&gt; on &lt;em&gt;/etc/dhcpd.conf&lt;/em&gt; shows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ls -l /etc/dhcpd.conf
-rwxrwx---  1 root apache 618 Mar 5 12:41 /etc/dhcpd.conf*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script will be able to read and modify the &lt;em&gt;/etc/dhcpd.conf&lt;/em&gt; file. Open the &lt;em&gt;index.pl&lt;/em&gt; file. At the top, there are two configuration variables; &lt;code&gt;@MainPageLinksAction&lt;/code&gt; and &lt;code&gt;@MainPageLinksName&lt;/code&gt;. These two control the links on the left side. To add an additional link for DHCP, add &lt;code&gt;DHCP&lt;/code&gt; to both arrays.&lt;/p&gt;

&lt;p&gt;Next, find the line that says:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;elsif ($FORM_Action1 eq &amp;quot;Administration&amp;quot;) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just before this line, add the following lines of code, then save and close the file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;elsif ($FORM_Action1 eq &amp;quot;DHCP&amp;quot;) {

    my $DHCPConfigFileContent;

    if (open(FILE, &amp;quot;/etc/dhcpd.conf&amp;quot;)) {
        local $/;
        $DHCPConfigFileContent = &amp;lt;FILE&amp;gt;;
        close(FILE);
    }

    unless ($DHCPConfigFileContent) {
        $DHCPConfigFileContent = &amp;quot;/etc/dhcpd.conf could not be read or it is empty!&amp;quot;;
        $DHCPLeaseRangeStart = &amp;quot;N/A&amp;quot;;
        $DHCPLeaseRangeEnd   = &amp;quot;N/A&amp;quot;;
    }

    my ($DHCPLeaseRangeStart, $DHCPLeaseRangeEnd);

    if ($DHCPConfigFileContent =~ m/Range\s+(\d+\.\d+\.\d+\.\d+)\s+(\d+\.\d+\.\d+\.\d+)/i) {
        $DHCPLeaseRangeStart = $1;
        $DHCPLeaseRangeEnd   = $2;
    }

    $Right_Plane_Output .=&amp;lt;&amp;lt;HTMLCODE
    &amp;lt;TABLE ALIGN=CENTER CELLSPACING=3 CELLPADDING=3 BGCOLOR=&amp;quot;#000000&amp;quot;&amp;gt;
    &amp;lt;TR BGCOLOR=&amp;quot;#FFFFFF&amp;quot;&amp;gt;
            &amp;lt;TD ALIGN=LEFT&amp;gt;
            &amp;lt;font face=&amp;quot;Helvetica, Arial, Sans-serif, Verdena&amp;quot; size=&amp;quot;2&amp;quot;&amp;gt;
            &amp;lt;TABLE CELLSPACING=0 CELLPADDING=0&amp;gt;
            &amp;lt;TR&amp;gt;
                    &amp;lt;TD&amp;gt;
                    &amp;lt;font face=&amp;quot;Helvetica, Arial, Sans-serif, Verdena&amp;quot; size=&amp;quot;2&amp;quot;&amp;gt;
                    &amp;lt;PRE&amp;gt;&amp;lt;CODE&amp;gt;
                    ${DHCPConfigFileContent}
                    &amp;lt;/CODE&amp;gt;&amp;lt;/PRE&amp;gt;

                    &amp;lt;BR&amp;gt;&amp;lt;BR&amp;gt;&amp;lt;BR&amp;gt;
                    &amp;lt;font color=&amp;quot;#FF0000&amp;quot;&amp;gt;Lease Range:&amp;lt;/font&amp;gt; 
                    &amp;lt;B&amp;gt;${DHCPLeaseRangeStart} to ${DHCPLeaseRangeEnd}&amp;lt;/B&amp;gt;
                    &amp;lt;BR&amp;gt;&amp;lt;BR&amp;gt;&amp;lt;BR&amp;gt;
                    &amp;lt;/TD&amp;gt;
            &amp;lt;/TR&amp;gt;
            &amp;lt;/TABLE&amp;gt;
            &amp;lt;/TD&amp;gt;
    &amp;lt;/TR&amp;gt;
    &amp;lt;/TABLE&amp;gt;
HTMLCODE

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you do this modification, there will be a new menu section on the left side with the name DHCP. Clicking the DHCP link on the left will show you the contents of &lt;em&gt;/etc/dhcpd.conf&lt;/em&gt; and Lease Range values, which come from the contents of the file through a simple regular expression construct.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;You will have a functioning wireless access gateway once you install AWLP. The above illustration proves how easy it is to add features to this software-based wireless access gateway, provided that you are familiar with Perl. However, to accomplish more useful modifications tailored to your needs, you should examine &lt;em&gt;index.pl&lt;/em&gt; and the other core, and include scripts and configuration files.&lt;/p&gt;

&lt;h3 id=&#34;related-links&#34;&gt;Related Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://awlp.sourceforge.net/&#34;&gt;AWLP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slackware.com/&#34;&gt;The Slackware Linux Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hostap.epitest.fi/&#34;&gt;HostAP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bridge.sourceforge.net/&#34;&gt;Linux Ethernet Bridging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.openbrick.com/&#34;&gt;OpenBrick Community&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cross-Language Remoting with mod_perlservice</title>
      <link>http://localhost:1313/pub/2004/11/18/mod_perlservice.html/</link>
      <pubDate>Thu, 18 Nov 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/11/18/mod_perlservice.html/</guid>
      <description>

&lt;h3 id=&#34;mod-perlservice-what-is-that&#34;&gt;Mod_perlservice? What is That?&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Mod_perlservice&lt;/code&gt; is a cool, new way to do remoting &amp;ndash; sharing data between server and client processes &amp;ndash; with Perl and Apache. Let&amp;rsquo;s start by breaking that crazy name apart: mod + perl + service.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Mod&lt;/em&gt; means that it&amp;rsquo;s a module for the popular and ubiquitous Apache HTTP Server. &lt;em&gt;Perl&lt;/em&gt; represents the popular and ubiquitous programming language. &lt;em&gt;Service&lt;/em&gt; is the unique part. It&amp;rsquo;s the new ingredient that unifies Apache, Perl, and XML into an easy-to-use web services system.&lt;/p&gt;

&lt;p&gt;With mod_perlservice, you can write Perl subs and packages on your server and call them over the internet from client code. Clients can pass scalars, arrays, and hashes to the server-side subroutines and obtain the return value (scalar, array, or hash) back from the remote code. Some folks refer to this functionality as &amp;ldquo;remoting&amp;rdquo; or &amp;ldquo;RPC,&amp;rdquo; so if you like you can say mod_perlservice is remoting with Perl and Apache. You can write client programs in a variety of languages; libraries for C, Perl, and Flash Action Script are all ready to go.&lt;/p&gt;

&lt;p&gt;Now that you know what mod_perlservice is, let&amp;rsquo;s look at why it is. I believe that mod_perlservice has a very clean, easy-to-use interface when compared with other RPC systems. Also, because it builds on the Apache platform it benefits from Apache&amp;rsquo;s ubiquity, security, and status as a standard. Mod_perlservice sports an embedded Perl interpreter to offer high performance for demanding applications.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2004_11_18_mod_perlservice/mod_perlservicelogo.jpg&#34; alt=&#34;mod_perlservice&#34; width=&#34;200&#34; height=&#34;120&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-can-i-use-mod-perlservice&#34;&gt;How Can I Use mod_perlservice?&lt;/h3&gt;

&lt;p&gt;Mod_perlservice helps create networked applications that require client-server communication, information processing, and sharing. Mod_perlservice is for applications, not for creating dynamic content for your HTML pages. However, you surely can use it for Flash remoting with Perl. Here are some usage examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A desktop application (written using your favorite C++ GUI library) that records the current local air temperature and sends it to an online database every 10 minutes. Any client can query the server to obtain the current and historical local air temperature of any other participating client.&lt;/li&gt;
&lt;li&gt;A Flash-based stock portfolio management system. You can create model stock portfolios and retrieve real-time stock quote information and news.&lt;/li&gt;
&lt;li&gt;A command-line utility in Perl that accepts English sentences on standard input and outputs the sentences in French. Translation occurs in server-side Perl code. If the sentence is idiomatic and the translation is incorrect, the user has the option of sending the server a correct translation to store in an online idiom database.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;how-do-i-start&#34;&gt;How Do I Start?&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s move on to the fun stuff and set up a working installation. Before we begin, make sure you have everything you need! You need &lt;a href=&#34;http://httpd.apache.org/&#34;&gt;Apache HTTPD&lt;/a&gt;, &lt;a href=&#34;http://www.perl.org/&#34;&gt;Perl&lt;/a&gt;, &lt;a href=&#34;https://libexpat.github.io/&#34;&gt;Expat&lt;/a&gt;, &lt;a href=&#34;http://www.ivorycity.com/mod_perlservice/&#34;&gt;mod_perlservice&lt;/a&gt;, and a mod_perlservice client library (&lt;a href=&#34;http://www.ivorycity.com/mod_perlservice/perl_client.html&#34;&gt;Perl Client&lt;/a&gt; | &lt;a href=&#34;http://www.ivorycity.com/mod_perlservice/c_client.html&#34;&gt;C Client&lt;/a&gt; | &lt;a href=&#34;http://www.ivorycity.com/mod_perlservice/flash_client.html&#34;&gt;Flash Client&lt;/a&gt;). You must download a client library separately, as the distribution does not include any clients! In your build directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myhost$ tar -xvzf mod_perlservice.tar.gz
myhost$ cd mod_perlservice
myhost$ ./configure
myhost$ make
myhost$ make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything goes to plan, you&amp;rsquo;ll end up with a fresh &lt;em&gt;mod_perlservice.so&lt;/em&gt; in your Apache modules directory, (usually &lt;em&gt;/etc/apache/modules&lt;/em&gt;). Now it&amp;rsquo;s time to configure Apache to use mod_perlservice. &lt;code&gt;cd&lt;/code&gt; into your Apache configuration directory (usually &lt;em&gt;/etc/apache/conf&lt;/em&gt;) Add the following lines to the file &lt;em&gt;apache.conf&lt;/em&gt; (or &lt;em&gt;httpd.conf&lt;/em&gt;, if you have only a single configuration file):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LoadModule perlservice_module modules/mod_perlservice.so
AddModule mod_perlservice.c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the following lines to &lt;em&gt;commonapache.conf&lt;/em&gt;, if you have it and &lt;em&gt;httpd.conf&lt;/em&gt; if you don&amp;rsquo;t:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;IfModule mod_perlservice.c&amp;gt;
&amp;lt;Location /perlservice&amp;gt;   SetHandler
mod_perlservice
   Allow From All PerlApp
   myappname /my/app/dir
   #Examples
   PerlApp stockmarket /home/services/stockmarket
   PerlApp temperature /home/services/temperature
&amp;lt;/Location&amp;gt;
&amp;lt;/IfModule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Pay close attention to the &lt;code&gt;PerlApp&lt;/code&gt; directive.&lt;/em&gt; For every mod_perlservice application you want to run, you need a &lt;code&gt;PerlApp&lt;/code&gt; directive. If I were creating a stock market application, I might create a directory: &lt;em&gt;/home/services/stockmarket&lt;/em&gt; and add the following &lt;code&gt;PerlApp&lt;/code&gt; directive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PerlApp stockmarket /home/services/stockmarket
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells mod_perlservice to host an application called &lt;code&gt;stockmarket&lt;/code&gt; with the Perl code files located in the &lt;em&gt;/home/services/stockmarket&lt;/em&gt; directory. You may run as many service applications as you wish and you may organize them however you wish.&lt;/p&gt;

&lt;p&gt;With the configuration files updated, the next step is to restart Apache:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myhost$ /etc/init.d/apache restart
or
myhost$ apachectl restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if everything went as planned, mod_perlservice should be installed. Congratulations!&lt;/p&gt;

&lt;h3 id=&#34;an-example&#34;&gt;An Example&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s create that stock portfolio example mentioned earlier. It won&amp;rsquo;t support real-time quotes, but will instead create a static database of common stock names and historical prices. The application will support stock information for General Electric (GE), Red Hat (RHAT), Coca-Cola (KO), and Caterpillar (CAT).&lt;/p&gt;

&lt;p&gt;The application will be &lt;em&gt;stockmarket&lt;/em&gt; and will keep all of the Perl files in the stock market application directory (&lt;em&gt;/home/services/stockmarket&lt;/em&gt;). The first file will be &lt;em&gt;quotes.pm&lt;/em&gt;, reading as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;our $lookups = {
    &amp;quot;General Electric&amp;quot; =&amp;gt; &amp;quot;GE&amp;quot;,
    &amp;quot;Red Hat&amp;quot;          =&amp;gt; &amp;quot;RHAT&amp;quot;,
    &amp;quot;Coca Cola&amp;quot;        =&amp;gt; &amp;quot;KO&amp;quot;,
    &amp;quot;Caterpillar Inc&amp;quot;  =&amp;gt; &amp;quot;CAT&amp;quot;
};
our $stocksymbols = {
    &amp;quot;GE&amp;quot; =&amp;gt; {
        &amp;quot;Price&amp;quot;            =&amp;gt; 33.91,
        &amp;quot;EarningsPerShare&amp;quot; =&amp;gt; 1.544
    },
    &amp;quot;RHAT&amp;quot; =&amp;gt; {
        &amp;quot;Price&amp;quot; =&amp;gt; 14.96,
        &amp;quot;EarningsPerShare&amp;quot; =&amp;gt; 0.129
    },
    &amp;quot;KO&amp;quot;   =&amp;gt; {
        &amp;quot;Price&amp;quot;            =&amp;gt; 42.84,
        &amp;quot;EarningsPerShare&amp;quot; =&amp;gt; 1.984
    },
    &amp;quot;CAT&amp;quot; =&amp;gt; {
        &amp;quot;Price&amp;quot;            =&amp;gt; 75.74,
        &amp;quot;EarningsPerShare&amp;quot; =&amp;gt; 4.306
    }
};

package quotes;

sub lookupSymbol {
    my $companyname = shift;
    return $lookups-&amp;gt;{$company_name};
}

sub getLookupTable {
    return $lookups;
}

sub getStockPrice {
    my $stocksymbol = shift;
    return $stocksymbols-&amp;gt;{$stocksymbol}-&amp;gt;{&amp;quot;Price&amp;quot;};
}
sub getAllStockInfo {
    my $stocksymbol = shift;
    return $stocksymbols{$stocksymbol};
}
1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s the example of the server-side program. Basically, two static &amp;ldquo;databases&amp;rdquo; (&lt;code&gt;$lookups&lt;/code&gt; and &lt;code&gt;$stocksymbols&lt;/code&gt;) provide information about a limited universe of stocks. The above methods query the static databases; the behavior should be fairly self-explanatory.&lt;/p&gt;

&lt;p&gt;You may have as many &lt;em&gt;.pm&lt;/em&gt; files in your application as you wish and you may also define as many packages within a &lt;em&gt;.pm&lt;/em&gt; file as you wish. An extension to this application might be a file called &lt;em&gt;news.pm&lt;/em&gt; that enables you to fetch current and historical news about your favorite stocks.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s talk some security. As it stands, this code won&amp;rsquo;t work; mod_perlservice will restrict access to any file and method you don&amp;rsquo;t explicitly export for public use. Use the &lt;em&gt;.serviceaccess&lt;/em&gt; file to export things. Create this file in each application directory you declare with mod_perlservice or you&amp;rsquo;ll have no access. An example file might read:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ServiceAccess&amp;gt;
  &amp;lt;AllowFile name=&amp;quot;quotes.pm&amp;quot;&amp;gt;
    Allow quotes::*
  &amp;lt;/AllowFile&amp;gt;
&amp;lt;/ServiceAccess&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the stock market example, this file should be &lt;em&gt;/home/services/stockmarket/.serviceaccess&lt;/em&gt;. Be sure that the &lt;code&gt;apache&lt;/code&gt; user does not own this file; that could be bad for security. This file allows access to the file &lt;em&gt;quotes.pm&lt;/em&gt; and allows public access to all (&lt;code&gt;*&lt;/code&gt;) the methods in package &lt;em&gt;quotes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If I want to restrict access only to &lt;code&gt;getStockPrice&lt;/code&gt;, I would have written &lt;code&gt;Allow quotes::getStockPrice&lt;/code&gt;. After that, I could add access to &lt;code&gt;lookupSymbol&lt;/code&gt; with &lt;code&gt;Allow quotes::lookupSymbol&lt;/code&gt;. To make &lt;em&gt;quotes.pm&lt;/em&gt; public carte blanche, use &lt;em&gt;Allow *&lt;/em&gt;. You won&amp;rsquo;t need to restart Apache when you make changes to this file as it reloads automatically.&lt;/p&gt;

&lt;h3 id=&#34;client-code&#34;&gt;Client Code&lt;/h3&gt;

&lt;p&gt;Well, so far I&amp;rsquo;ve only shown you half the story. It&amp;rsquo;s time to create some client-side code. This client example uses the Flash &amp;ldquo;PerlService&amp;rdquo; library, just one of the client-side interfaces to mod_perlservice. The Flash client works well for browser interfaces while the Perl and C clients can create command-line or GUI (ie, GTK or Qt) applications. This article is on the web, so we&amp;rsquo;ll give the Flash interface a spin and then go through an example in Perl.&lt;/p&gt;

&lt;p&gt;The first code smidgen should go in the first root frame of your Flash application. It instantiates the global &lt;code&gt;PerlService&lt;/code&gt; object and creates event handlers for when remote method calls return from the server. The event handlers output the requested stock information to the display box.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;quot;PerlService-0.0.2.as&amp;quot;
// Create a global PerlService object
// Tell the PerlService object about the remote code we want to use:
// arg1) host: www.ivorycity.com
// arg2) application: stockmarket
// arg3) file: quotes.pm
// arg4) package: quotes
_global.ps = new PerlService(&amp;quot;www.ivorycity.com&amp;quot;,&amp;quot;stockmarket&amp;quot;,&amp;quot;quotes.pm&amp;quot;,&amp;quot;quotes&amp;quot;);
// First declare three callback functions to handle return values
function onStockPrice(val) {
    output.text = &amp;quot;StockPrice: &amp;quot; + symbolInput.text + &amp;quot; &amp;quot; + val + &amp;quot;\n&amp;quot; + output.text;
}

function onAllStockInfo(val) {
    output.text = &amp;quot;Stock Info: &amp;quot; + allInfoInput.text + &amp;quot;\n&amp;quot; + &amp;quot;\tPrice: &amp;quot;
                  + val.Price + &amp;quot;\n&amp;quot; + &amp;quot;\tEarnings Per Share: &amp;quot;
                  + val.EarningsPerShare + &amp;quot;\n&amp;quot; + output.text;
}

function onLookupSymbol(val) {
    output.text = &amp;quot;Lookup Result: &amp;quot; + symbolInput.text + &amp;quot; &amp;quot; + val + &amp;quot;\n&amp;quot;
                  + output.text;
}

// Register callback handlers for managing return values from remote  methods
// ie, onStockPrice receives the return value from remote method getStockPrice

ps.registerReplyHandler( &amp;quot;getStockPrice&amp;quot;, onStockPrice );
ps.registerReplyHandler( &amp;quot;getAllStockInfo&amp;quot;, onAllStockInfo );
ps.registerReplyHandler( &amp;quot;lookupSymbol&amp;quot;, onLookupSymbol );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now for the code that makes things happen. The following code attaches to three separate buttons. When clicked, the buttons call the remote Perl methods using the global &lt;code&gt;PerlService&lt;/code&gt; object. Flash Action Script is an event-driven system, so click event-handlers will call the remote code and return event-handlers will do something with those values.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2004_11_18_mod_perlservice/flashclientdgm.jpg&#34; alt=&#34;buttons and code associations&#34; width=&#34;400&#34; height=&#34;206&#34; /&gt;
&lt;em&gt;Figure 1. Button and code associations.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When a user presses Button 1, call the remote method &lt;code&gt;getStockPrice&lt;/code&gt; and pass the text in the first input box as an argument.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;on (release) {
    ps.getStockPrice(box1.text);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the user presses Button 2, call the remote method &lt;code&gt;getAllStockInfo&lt;/code&gt; and pass the text in the second input box as an argument.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;on (release) {
    ps.getAllStockInfo(box2.text);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the user presses Button 3, call the remote method &lt;code&gt;lookupSymbol&lt;/code&gt; and pass the text in the third input box as an argument.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;on (release) {
    ps.lookupSymbol(box3.text);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s the entire Flash example. Here is the finished product.&lt;/p&gt;

&lt;h4 id=&#34;perl-client&#34;&gt;Perl Client&lt;/h4&gt;

&lt;p&gt;Not everyone uses Flash, especially in the Free Software community. The great thing about mod_perlservice is that everyone can join the party. Here&amp;rsquo;s a Perl Client that uses the same server-side stock market API.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use PService;

my $hostname = &amp;quot;www.ivorycity.com&amp;quot;;
my $appname  = &amp;quot;stockmarket&amp;quot;;
my $filename = &amp;quot;quotes.pm&amp;quot;;
my $package  = &amp;quot;quotes&amp;quot;;

#Create the client object with following arguments:
#1) The host you want to use
#2) The application on the host
#3) The perl module file name
#4) The package you want to use

my $ps = PSClient-&amp;gt;new( $hostname, $appname, $filename, $package );

# Just call those remote methods and get the return value
my $price  = $ps-&amp;gt;getStockPrice(&amp;quot;GE&amp;quot;);
my $info   = $ps-&amp;gt;getAllStockInfo(&amp;quot;RHAT&amp;quot;);
my $lookup = $ps-&amp;gt;lookupSymbol(&amp;quot;Coca Cola&amp;quot;);

#Share your exciting new information with standard output
print &amp;quot;GE Price: &amp;quot; . $price . &amp;quot;\n&amp;quot;;
print &amp;quot;Red Hat Price: &amp;quot; . $info-&amp;gt;{Price} . &amp;quot;\n&amp;quot;;
print &amp;quot;Red Hat EPS: &amp;quot; . $info-&amp;gt;{EarningsPerShare} . &amp;quot;\n&amp;quot;;
print &amp;quot;Coca-Cola&#39;s ticker symbol is &amp;quot; . $lookup . &amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the &lt;em&gt;PSClient&lt;/em&gt; object to call remote methods might feel a little awkward if you expect to call them via &lt;code&gt;quotes::getStockPrice()&lt;/code&gt;, but think of the &lt;code&gt;$ps&lt;/code&gt; instance as a proxy class to your remote methods, if you like.&lt;/p&gt;

&lt;p&gt;If things don&amp;rsquo;t work, use &lt;code&gt;print $ps-&amp;gt;get_errmsg();&lt;/code&gt; to print an error message. $ps-&amp;gt;get_errmsg(); That&amp;rsquo;s a local reserved function, so it doesn&amp;rsquo;t call the server. It&amp;rsquo;s one of a few reserved functions detailed in the &lt;a href=&#34;http://www.ivorycity.com/mod_perlservice/perl_client.html&#34;&gt;Perl client reference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you can see, it requires much less work to create an example with the Perl client. You simply instantiate the PSClient object, call the remote methods, and do something with the return values. That&amp;rsquo;s it. There is no protocol decoding, dealing with HTTP, CGI arguments, or any of the old annoyances. Your remote code may as well be local code.&lt;/p&gt;

&lt;h3 id=&#34;thanks-for-taking-the-tour&#34;&gt;Thanks for Taking the Tour&lt;/h3&gt;

&lt;p&gt;That&amp;rsquo;s mod_perlservice. I&amp;rsquo;m sure many of you who are developing client-server applications can see the advantages of this system. Personally, I&amp;rsquo;ve always found the existing technologies to be inflexible and/or too cumbersome. The mod_perlservice system offers a clean, simple, and scalable interface that unites client-side and server-side code in the most sensible way yet.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s next? mod_parrotservice!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Managing Bulk DNS Zones with Perl</title>
      <link>http://localhost:1313/pub/2002/11/20/dns.html/</link>
      <pubDate>Wed, 20 Nov 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/11/20/dns.html/</guid>
      <description>

&lt;h3 id=&#34;a-history-of-forward-and-reverse-dns&#34;&gt;A History of Forward and Reverse DNS&lt;/h3&gt;

&lt;p&gt;When an Internet server receives an incoming connection from a client, it may take a precaution of verifying the identity of the client. Some protocols simply trust the client to provide proper credentials to their identification (like SMTP). More complex protocols use a key exchange or a shared secret to communicate. Other protocols rely on the process of verifying the hostname of the client.&lt;/p&gt;

&lt;p&gt;To do this, a server would take the IP address of the client, and perform a reverse DNS lookup to get the PTR records. Then, it would request the A record of the hostname returned from the PTR query. If the hostname matched the IP address in both queries, then the host was considered to be trusted.&lt;/p&gt;

&lt;p&gt;As a means of host authentication, it was a half-hearted process at best. It relied heavily on external DNS servers, and it could easily be circumvented if false records were returned to the DNS resolvers that sent the queries. As such, it was only suitable for public Internet services like anonymous FTP or Web servers.&lt;/p&gt;

&lt;p&gt;Another problem with this process was that it meant you would need to have matching forward and reverse DNS entries for all of your client hosts. Without the records, your logon could be delayed, or it could be refused altogether.&lt;/p&gt;

&lt;p&gt;This became a burdeon for ISPs with large dial-up pools, or organizations with large LANs. Dozens, if not hundreds of IP addresses suddenly needed to have two DNS entries. DNS zones that originally contained 20 host records grew to hundreds of host records.&lt;/p&gt;

&lt;p&gt;For example, let&amp;rsquo;s say we work in a large university environment. We have been given the 192.168.76.0/22 and 10.10.0.0/16 network blocks. Before any of these IP addresses are useful, we need to create forward and reverse DNS entries for them.&lt;/p&gt;

&lt;p&gt;The network engineer writes a simple Perl script that will populate the zonefile with entries. The output from the script is then put in the domain &amp;ldquo;ips.university.edu&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$fmt=&amp;quot;%s\tIN\tA%s\n&amp;quot;;
foreach $block (&amp;quot;192.168.76.&amp;quot;,&amp;quot;192.168.77.&amp;quot;,&amp;quot;192.168.78.&amp;quot;,&amp;quot;192.168.79.&amp;quot;)
{
    $host=$block;
    $host=~s/\./-/g;
    for ($n=0;$n&amp;lt;=255;$n++)
    {
        printf($fmt,$host.$n,$block.$n);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a result of a script such as this, you&amp;rsquo;d find out that you have a host record for your IP that looks like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;192-168-76-93.ips.university.edu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It sure isn&amp;rsquo;t pretty, but it gets the job done.&lt;/p&gt;

&lt;p&gt;As far as the DNS server is concerned, there is nothing wrong with this record. Some experienced network engineers will probably point out a couple of causes for concern.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The record size is big. For each A record, we&amp;rsquo;re using anywhere from eight to 15 characters to represent a 32-bit integer.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The repeated &amp;ldquo;192-168-&amp;rdquo; pattern is wasteful. We could remove it from the entry, so 76-54.ips.university.edu points to 192.168.76.54, but that leads to a conflict when we create a DNS entry for 10.10.76.54?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can correct that by creating seperate subdomains for both networks.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;76-54.n1.ips.university.edu.    IN  A   192.168.76.54
76-54.n2.ips.university.edu.    IN  A   10.10.76.54
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using separate subdomains, we&amp;rsquo;ve reduced the size of the record. The XXX-XXX.nX portion can be anywhere from six to 10 characters. But we can still do a little more work to make it smaller.&lt;/p&gt;

&lt;p&gt;The solution is to create a script that more accurately looks at the network block, and creates DNS entries based only on the host portion of the IP address in a block.&lt;/p&gt;

&lt;h3 id=&#34;ip-addresses-and-net-netmask&#34;&gt;IP addresses and Net::Netmask&lt;/h3&gt;

&lt;p&gt;IPv4 addresses are 32-bit integers. The IP address 192.168.76.55 can be represented in several ways:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Dottted Quad Notation&lt;/td&gt;
&lt;td&gt;192.168.76.55&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Base 10 integer&lt;/td&gt;
&lt;td&gt;3232255031&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Hexadecimal&lt;/td&gt;
&lt;td&gt;c0a84c37&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Binary&lt;/td&gt;
&lt;td&gt;11000000101010000100110000110111&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For future mathematicians out there, dotted quad notation is really base-256 notation.&lt;/p&gt;

&lt;p&gt;Network masks are also 32-bit integers. The 192.168.76.0/22 network number represents the following netmask:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;11111111111111111111110000000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For any IP address within this block, the first 22 bits represent the network, the remaining 10 bits represent the host within the network. If we were to split the network and host values of the IP address 192.168.76.55, then we find:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;br /&gt;
&lt;/th&gt;
&lt;th&gt;Network&lt;/th&gt;
&lt;th&gt;Host&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Host IP&lt;/td&gt;
&lt;td&gt;1100000010101000010011&lt;/td&gt;
&lt;td&gt;0000110111&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Netmask&lt;/td&gt;
&lt;td&gt;1111111111111111111111&lt;/td&gt;
&lt;td&gt;0000000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Base 10&lt;/td&gt;
&lt;td&gt;3156499&lt;/td&gt;
&lt;td&gt;55&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Base 16&lt;/td&gt;
&lt;td&gt;302a13&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For the IP address 192.168.76.5, the host portion of the IP address is five.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;br /&gt;
&lt;/th&gt;
&lt;th&gt;Network&lt;/th&gt;
&lt;th&gt;Host&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Host IP&lt;/td&gt;
&lt;td&gt;1100000010101000010011&lt;/td&gt;
&lt;td&gt;1100000010101000010011&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Netmask&lt;/td&gt;
&lt;td&gt;1111111111111111111111&lt;/td&gt;
&lt;td&gt;0000000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Base 10&lt;/td&gt;
&lt;td&gt;3156499&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Base 16&lt;/td&gt;
&lt;td&gt;c0a84c37&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For the IP address 192.168.77.87, the host portion of the IP address is 343.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;br /&gt;
&lt;/th&gt;
&lt;th&gt;Network&lt;/th&gt;
&lt;th&gt;Host&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Host IP&lt;/td&gt;
&lt;td&gt;1100000010101000010011&lt;/td&gt;
&lt;td&gt;0101010111&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Netmask&lt;/td&gt;
&lt;td&gt;1111111111111111111111&lt;/td&gt;
&lt;td&gt;0000000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Base 10&lt;/td&gt;
&lt;td&gt;3156499&lt;/td&gt;
&lt;td&gt;343&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Base 16&lt;/td&gt;
&lt;td&gt;c0a84c37&lt;/td&gt;
&lt;td&gt;157&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In order to get the host information about our address block, we will be using the Net::Netmask Perl module.&lt;/p&gt;

&lt;p&gt;The Net::Netmask module was written to disseminate information about network blocks. By giving it an IP address and a netmask, it can tell you the network address, the broadcast address, of a given network. It can also tell us which IP address corresponds to which host number.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Net::Netmask;

$block=Net::Netmask-&amp;gt;new(&amp;quot;192.168.76.0/22&amp;quot;);

print(&amp;quot;Network can hold &amp;quot;,$block-&amp;gt;size(),&amp;quot; IP addresses\n&amp;quot;);
print(&amp;quot;Host 5   is IP &amp;quot;,$block-&amp;gt;nth(5),&amp;quot;\n&amp;quot;);
print(&amp;quot;Host 343 is IP &amp;quot;,$block-&amp;gt;nth(343),&amp;quot;\n&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of the program is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Network can hold 1024 IP addresses
Host 5   is IP 192.168.76.5
Host 343 is IP 192.168.77.87
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The nth() method returns the IP address corresponding to the host number.&lt;/p&gt;

&lt;h3 id=&#34;the-updated-script&#34;&gt;The Updated Script&lt;/h3&gt;

&lt;p&gt;This new script accomplishes the same thing as the old script, but this time we use Net::Netmask to keep track of IPs in the block.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Net::Netmask;

$network=&amp;quot;192.168.76.0/22&amp;quot;;
$fmt=&amp;quot;%s\tIN\tA\t%s\n&amp;quot;;

$block=Net::Netmask-&amp;gt;new($network);
$size=$block-&amp;gt;size()-2;
$index=1;
while ($index &amp;lt;= $size)
{
    $host=sprintf(&amp;quot;h%x&amp;quot;,$index);
    printf($fmt,$host,$block-&amp;gt;nth($index));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which produces the following zonefile.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;h1      IN      A       192.168.76.1
h2      IN      A       192.168.76.2
h3      IN      A       192.168.76.3
h4      IN      A       192.168.76.4
....
h35     IN      A       192.168.76.53
h36     IN      A       192.168.76.54
h37     IN      A       192.168.76.55
h38     IN      A       192.168.76.56
h39     IN      A       192.168.76.57
h3a     IN      A       192.168.76.58
....
h3fb    IN      A       192.168.79.251
h3fc    IN      A       192.168.79.252
h3fd    IN      A       192.168.79.253
h3fe    IN      A       192.168.79.254
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A couple of points to make.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the host record itself, we choose to represent $index in hexadecimal. This gives us a little more use out of the ASCII character set. We save one character on integers between 99 and 255.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A prefix of &amp;ldquo;h&amp;rdquo; (for host) is used on every record, so we don&amp;rsquo;t have records that are just an integer. For example, a record like &amp;ldquo;1.n1.ips.university.edu&amp;rdquo; can be a problem depending on your resolver search settings. If you try to run &amp;ldquo;ping 1&amp;rdquo; from a command prompt, then it&amp;rsquo;s unclear whether you meant the host record &amp;ldquo;1,&amp;rdquo; or the actual IP address &amp;ldquo;0.0.0.1&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The above script doesn&amp;rsquo;t produce records for the network address or the broadcast address. It is left for the DNS administrator to create them or just ignore them.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using the example 192.168.76.0/22 network, the zonefile created by the second script is roughly 70 percent of the size of the zonefile created by the first script.&lt;/p&gt;

&lt;h3 id=&#34;creating-the-reverse-dns&#34;&gt;Creating the Reverse DNS&lt;/h3&gt;

&lt;p&gt;We can use Net::Netmask to create the reverse DNS as well, but the process is a little tricker.&lt;/p&gt;

&lt;p&gt;Reverse DNS zones are delegated on the octet boundaries of the IP address, so it usually means that a zonefile will cover a full /24 network. If your network is larger than a /24, then you&amp;rsquo;ll need to create multiple zonefiles. If your network is smaller, then your data will probably be inserted to a zonefile that already exists for the other hosts in the network.&lt;/p&gt;

&lt;p&gt;Note: While it is possible for DNS reverse zones to be delegated for networks smaller than a /24, the discussion of setting up the CNAME or NS records for those situations is outside the scope of this article.&lt;/p&gt;

&lt;p&gt;This makes the creation of reverse DNS a little tricky. When you created the forward DNS, all of your data ended up in one zonefile. For the reverse DNS, the data could be in one or more zonefiles depending on the size of the network.&lt;/p&gt;

&lt;p&gt;The Net::Netmask module has a feature that makes it a little easier to work this out. The inaddr() function returns data on the reverse DNS zones that the current netblock would occupy. For each /24 block your network covers, it returns the reverse DNS zone name, the starting IP address, and the ending IP address of the block.&lt;/p&gt;

&lt;p&gt;So if we were looking at the 192.178.76.0/22 network, the inaddr() function would return:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;76.168.192.in-addr.arpa
0
255
77.168.192.in-addr.arpa.
0
255
78.178.192.in-addr.arpa
0
255
79.178.192.in-addr.arpa
0
255
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, if we were looking at the 192.168.76.0/26 network, the inaddr() function would return:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;76.178.192.in-addr.arpa
0
63
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this function, we can create a baseline program that at least tells us which zones we would need to create reverse DNS for.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$block=Net::Netmask-&amp;gt;new(&amp;quot;192.168.76.0/22&amp;quot;);

(@data)=$block-&amp;gt;inaddr();
while (($zone,$start,$end)=splice(@data,0,3))
{
    print(&amp;quot;; Reverse zone: $zone\n&amp;quot;);
    for ($loop=$start;$loop&amp;lt;=$end;$loop++)
    {
        # Create the individual entries
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The outside loop runs once for every possible /24 network we will be filling with PTR records. The inner loop begins an iteration from the starting IP address and the ending IP address.&lt;/p&gt;

&lt;p&gt;If you remember, the nth() method of Net::Netmask returns an IP address based on a host number. The match() method is the exact opposite; it returns a host number based on an IP address.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Net::Netmask;

$block=Net::Netmask-&amp;gt;new(&amp;quot;192.168.76.0/22&amp;quot;);

print(&amp;quot;IP 192.168.76.5  is Host &amp;quot;,$block-&amp;gt;match(&amp;quot;192.168.76.5&amp;quot;),&amp;quot;\n&amp;quot;);
print(&amp;quot;IP 192.168.77.87 is Host &amp;quot;,$block-&amp;gt;match(&amp;quot;192.168.77.87&amp;quot;),&amp;quot;\n&amp;quot;);

IP 192.168.76.5  is Host 5
IP 192.168.77.87 is Host 343
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to get the host number, we would need to provide the match() function with a full IP address. This is the part where we have to do a little string cheating.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$block=Net::Netmask-&amp;gt;new(&amp;quot;192.168.76.0/22&amp;quot;);

sub flip
{
my ($zone)=shift;
my ($network,@rz,@ipc);
(@rz)=split(/\./,$zone);
(@ipc)=reverse(splice(@rz,0,3));
$network=join(&amp;quot;.&amp;quot;,@ipc);
return $network;
}

$domain=&amp;quot;.n1.ips.university.edu.&amp;quot;;
$fmt=&amp;quot;%s\tIN\tPTR\t%s\n&amp;quot;;
(@data)=$block-&amp;gt;inaddr();

while (($zone,$start,$end)=splice(@data,0,3))
{
        print(&amp;quot;; Reverse zone: $zone\n&amp;quot;);
    $network=flip($zone);
        for ($loop=$start;$loop&amp;lt;=$end;$loop++)
        {
        # Create the invidivual entries
        $ip=&amp;quot;$network.$loop&amp;quot;;
        $order=$block-&amp;gt;match($ip);
        $host=sprintf(&amp;quot;h%x%s&amp;quot;,$order,$domain);
        printf($fmt,$loop,$host);
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The confusing part is probably the flip() subroutine. All that does is take a reverse DNS zone name (like 76.168.192.in-addr.arpa), and returns the quads in forward form (192.168.76). We use this string as a prefix to combine with $loop so we have a valid IP address for the match() method.&lt;/p&gt;

&lt;p&gt;The program run gives us:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;;Reverse Zone: 76.168.192.in-addr.arpa

1       IN      PTR     h1.n1.ips.university.edu.
2       IN      PTR     h2.n1.ips.university.edu.
3       IN      PTR     h3.n1.ips.university.edu.
4       IN      PTR     h4.n1.ips.university.edu.
5       IN      PTR     h5.n1.ips.university.edu.
6       IN      PTR     h6.n1.ips.university.edu
....
53      IN      PTR     h35.n1.ips.university.edu.
54      IN      PTR     h36.n1.ips.university.edu.
55      IN      PTR     h37.n1.ips.university.edu.
56      IN      PTR     h38.n1.ips.university.edu.
57      IN      PTR     h39.n1.ips.university.edu.
58      IN      PTR     h3a.n1.ips.university.edu.
;Reverse Zone: 79.168.192.in-addr.arpa

0       IN      PTR     h300.n1.ips.university.edu.
1       IN      PTR     h301.n1.ips.university.edu.
2       IN      PTR     h302.n1.ips.university.edu.
3       IN      PTR     h303.n1.ips.university.edu.
4       IN      PTR     h304.n1.ips.university.edu.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;other-tricks&#34;&gt;Other Tricks&lt;/h3&gt;

&lt;p&gt;We used hexadecimal numbers in the host records to save space in the zonefile, and to make the record a little more obscure to the casual observer. To make it a even more obscure, try using a subroutine that will create base32 numbers (0-9,a-v), or base36 (0-9,a-z) numbers.&lt;/p&gt;

&lt;p&gt;To make it easier to identify the size of the network, create two A records for the zone itself, and populate it with the starting IP address, and the ending IP address.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;;
; Forward DNS for 192.168.96.0/21 network
$ORIGIN n3.ips.university.edu.

    IN  NS  ns1.university.edu.
    IN  NS  ns2.university.edu.

    IN  A   192.168.96.0
    IN  A   192.168.103.255

h1  IN  A   192.168.96.1
h2  IN  A   192.168.96.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Net::Netmask has two functions, base() and broadcast(), which can be used to obtain these values.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Your DNS records need to match in order to satisfy forward/reverse host authentication. It doesn&amp;rsquo;t matter what the values are, just as long as they agree. It seems like a large hassel, especially when you consider that the practice of forward/reverse host authentication is considered highly untrustworthy by security administrators. Some hostmasters would say that the process is a waste of time. Keep in mind that there will always be one or two users that will demand that their desktop system be given forward and reverse DNS entries.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s easy to automate the process of creating the zonefiles. Once the data is put in place, it almost never needs to be updated. I&amp;rsquo;ve seen a lot of DNS entries out there that simply replicate the IP address. Check the logs of a popular Web server and see for yourself.&lt;/p&gt;

&lt;p&gt;Unfortunately, it&amp;rsquo;s unlikely that these records will change in the future, unless the network allocation actually changes to another entity. In the meantime, the code examples above can be used to easily create new zones for future network allocations.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

