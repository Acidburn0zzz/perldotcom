<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/categories/windows/</link>
    <description>Recent content in Windows on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Aug 2011 06:00:01 -0800</lastBuildDate>
    <atom:link href="/categories/windows/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using CPAN on Win32 ActivePerl</title>
      <link>http://localhost:1313/pub/2011/08/using-cpan-on-win32-activeperl.html/</link>
      <pubDate>Wed, 03 Aug 2011 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2011/08/using-cpan-on-win32-activeperl.html/</guid>
      <description>&lt;p&gt;or &lt;em&gt;easier than tying your shoelaces&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Most of you know &lt;a href=&#34;http://www.activestate.com/activeperl&#34;&gt;ActivePerl&lt;/a&gt;, the commercial Perl distribution provided to the community for free by &lt;a href=&#34;http://www.activestate.com/&#34;&gt;ActiveState&lt;/a&gt;. In the beginning, ActivePerl did not bundle a C compiler. As Windows does not include a compiler, much of the CPAN was inaccessible to Windows usersâ€”any dependency on an XS module would fail. ActiveState instead provided a repository of binary PPM packages so that users could avoid the need to install and configure a C compiler.&lt;/p&gt;

&lt;p&gt;So began a rumor, and so the rumor became lore, that &amp;ldquo;ActivePerl Does Not Do CPAN.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;As wrong as that preconception had been (and a clever hacker could use MSVC or MinGW with ActivePerl), that rumor became even more wrong on 26 August 2009, when ActiveState delivered Perl 5.10.1 with a bundled C compiler. Even though Windows does not support &lt;em&gt;all&lt;/em&gt; POSIX features, using CPAN with ActivePerl on Windows is almost as nice as using CPAN on a Unix-like system:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download and install &lt;a href=&#34;http://www.activestate.com/activeperl/downloads&#34;&gt;ActivePerl&lt;/a&gt; (5.12.4 and 5.14.1 are available at the time of this writing) with the default options&lt;/li&gt;
&lt;li&gt;Open a command line window ( Start &amp;gt; Run &amp;gt; cmd )&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;cpan&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s it. That&amp;rsquo;s only one extra step over running on Linux. For proof, here&amp;rsquo;s the output of my first run of the &lt;code&gt;cpan&lt;/code&gt; command (edited for brevity) and an installation of &lt;a href=&#34;https://metacpan.org/pod/local::lib&#34;&gt;local::lib&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanminus&lt;/a&gt; (yes, they work too):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;D:\&amp;gt;cpan

It looks like you don&#39;t have a C compiler and make utility installed.  Trying
to install dmake and the MinGW gcc compiler using the Perl Package Manager.
This may take a a few minutes...

Downloading MinGW-5.1.4.1...done
Downloading dmake-4.11.20080107...done
Unpacking MinGW-5.1.4.1...done
Unpacking dmake-4.11.20080107...done
Generating HTML for MinGW-5.1.4.1...done
Generating HTML for dmake-4.11.20080107...done
Updating files in site area...done
1070 files installed

Please use the `dmake` program to run commands from a Makefile!


cpan shell -- CPAN exploration and modules installation (v1.9600)
Enter &#39;h&#39; for help.

cpan&amp;gt; install local::lib
Fetching with LWP:
...
Running install for module &#39;local::lib&#39;
Running make for A/AP/APEIRON/local-lib-1.008004.tar.gz
Fetching with LWP:
http://ppm.activestate.com/CPAN/authors/id/A/AP/APEIRON/local-lib-1.008004.tar.gz
Fetching with LWP:
http://ppm.activestate.com/CPAN/authors/id/A/AP/APEIRON/CHECKSUMS
Checksum for C:\Perl14\cpan\sources\authors\id\A\AP\APEIRON\local-lib-1.008004.tar.gz ok
...

  CPAN.pm: Going to build A/AP/APEIRON/local-lib-1.008004.tar.gz


*** Module::AutoInstall version 1.03
*** Checking for Perl dependencies...
*** Since we&#39;re running under CPAN, I&#39;ll just let it take care
    of the dependency&#39;s installation later.
[Core Features]
- ExtUtils::MakeMaker ...loaded. (6.57_05 &amp;gt;= 6.31)
- ExtUtils::Install   ...loaded. (1.56 &amp;gt;= 1.43)
- Module::Build       ...loaded. (0.38 &amp;gt;= 0.36)
- CPAN                ...loaded. (1.9600 &amp;gt;= 1.82)
*** Module::AutoInstall configuration finished.
Checking if your kit is complete...
Looks good
Writing Makefile for local::lib
...
Running make test
All tests successful.
Files=7, Tests=29,  1 wallclock secs ( 0.06 usr +  0.08 sys =  0.14 CPU)
Result: PASS
  APEIRON/local-lib-1.008004.tar.gz
  C:\Perl14\site\bin\dmake.exe test -- OK
Running make install
...

cpan&amp;gt; install App::cpanminus
Running install for module &#39;App::cpanminus&#39;
Running make for M/MI/MIYAGAWA/App-cpanminus-1.4008.tar.gz
...
Running make test
All tests successful.
Files=1, Tests=1,  0 wallclock secs ( 0.03 usr +  0.03 sys =  0.06 CPU)
Result: PASS
  MIYAGAWA/App-cpanminus-1.4008.tar.gz
  C:\Perl14\site\bin\dmake.exe test -- OK
Running make install
...
cpan&amp;gt; exit
Lockfile removed.

D:\&amp;gt;cpanm
Usage: cpanm [options] Module [...]

Try `cpanm --help` or `man cpanm` for more options.

D:\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Painless Windows Module Installation with PPM</title>
      <link>http://localhost:1313/pub/2007/01/11/painless-ppm.html/</link>
      <pubDate>Thu, 11 Jan 2007 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2007/01/11/painless-ppm.html/</guid>
      <description>

&lt;p&gt;I have recently been working on an installation package for the Microsoft Windows series of operating systems (Windows 2000 and newer). One of the primary components of this installation package is the installation of ActiveState&amp;rsquo;s distribution of Perl, known as ActivePerl 5.6, and supporting Perl modules.&lt;/p&gt;

&lt;p&gt;I chose Perl for its versatility in the automation of system maintenance. This versatility is largely due to the continued development and support of the numerous modules available on the Comprehensive Perl Archive Network (CPAN). These modules help make Perl a very capable solution to many of the programming obstacles I faced. The choice of Perl had a nice complement in the nearly seamless installation of many of these modules by using a small program provided with ActivePerl called the Perl Package Manager (PPM). PPM is a command-line driven tool that allows programmers to search for and install Perl modules from a wide variety of locations. PPM is only available with the Windows distributions of ActivePerl; hence this article will focus on a Windows environment.&lt;/p&gt;

&lt;p&gt;The ActivePerl distribution comes bundled with many popular Perl modules such as &lt;a href=&#34;https://metacpan.org/pod/LWP&#34;&gt;LWP&lt;/a&gt;, which is a module that provides an API to the World Wide Web, and &lt;a href=&#34;https://metacpan.org/pod/DBI&#34;&gt;DBI&lt;/a&gt;, which is an API for database interaction. A visit to MetaCPAN will give you an idea of the tremendous amount of modules available. Try executing a search on CPAN and you will typically receive a modest sized list of modules for whatever you are searching. Installing modules with PPM and Internet access is typically straight-forward; therefore I will not cover those details in-depth. However, this is the point during development where I began to run into problems.&lt;/p&gt;

&lt;h3 id=&#34;about-repositories&#34;&gt;About Repositories&lt;/h3&gt;

&lt;p&gt;My installation package relies heavily on modules not included with the standard ActivePerl distribution. Because I had to assume that the user would not have access to the Internet, my installation package needed to be self-sufficient. PPM&amp;rsquo;s default configuration accesses repositories maintained by ActiveState. Therefore, I needed to develop a way to install Perl modules during an automated installation without access to the Internet.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;repository&lt;/em&gt; is essentially a collection of files that provides the necessary information for the PPM program to find, download, and install Perl modules. The use of the word repository tends to get a little confusing. Each PC that PPM runs on has to have a repository configured on it in order to search for modules. It&amp;rsquo;s possible to create a local repository that accessible only on the local machine. It can provide the modules locally or reference another repository located on a server. A web server can host a repository that allows wider access to its modules. This type of repository does not even need the PPM program available to function as long as its&amp;rsquo; sole purpose is to simply serve modules. Other repositories can link to it to search for modules.&lt;/p&gt;

&lt;p&gt;I eventually came up with a couple of viable solutions. The first solution I looked at involved downloading the source code of the modules. These modules typically come in a &lt;em&gt;.tar.gz&lt;/em&gt; format. After unzipping and untaring them, I needed to use Nmake to build and install each one. The further I attempted to develop this solution, the more problems I encountered. Having approximately seven modules that I needed to install, this solution required building all of them individually. Because my installation package was completely automated, I needed to accomplish this from a Windows batch file. As I quickly found out, the less I needed to do in a batch file the better! This also raised another issue: the availability of programs outside of my installation package. In this case I would have needed Nmake, which is the Windows equivalent of the Unix Make program, to build and install modules. If the system that the installation package is running on did not have Nmake installed and available in the system path, then I became responsible for locating it on each individual system. The challenges began to compound; I knew there had to be an easier way.&lt;/p&gt;

&lt;p&gt;I recalled reading in the ActiveState documentation that the PPM program supports the creation and use of local repositories. After doing some further research, I concluded that I could setup a local repository and bundle the modules in their &lt;em&gt;.tar.gz&lt;/em&gt; format with the installation package. I could then use the PPM program, through the use of a batch file, to automate the installation of those modules. This solution would eliminate the need for Internet access, keeping my installation package completely autonomous. It would also provide a dependable solution for building and installing the modules during the installation that did not require any user interaction or outside programs.&lt;/p&gt;

&lt;h3 id=&#34;using-ppm&#34;&gt;Using PPM&lt;/h3&gt;

&lt;p&gt;Before I begin discussing my solution, it&amp;rsquo;s worth covering some basics of the PPM program. To run the PPM program type at a command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\&amp;gt; ppm
PPM - Programmer&#39;s Package Manager version 3.2.
Copyright (c) 2001 ActiveState Corp. All Rights Reserved.
ppm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This, of course, assumes that you have the ActivePerl distribution installed on your system and the PPM program registered in your system path. If typing PPM at the command line yields no results, find it in the *bin\* directory of your ActivePerl installation. ActivePerl installs to *C:\Perl\bin\* by default. Change to that directory and then type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Perl\bin&amp;gt; ppm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You know you are in the PPM program when the command prompt turns into a &lt;code&gt;ppm&amp;gt;&lt;/code&gt; prompt. Once inside the program you can display all of the repositories available on that system by typing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ppm&amp;gt; rep
Repositories:
[1] ActiveState Package Repository
[2] ActiveState PPM2 Repository
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With a default installation you will see a couple of repositories that begin with ActiveState. These are the ones I mentioned earlier. They are the default repositories that ActiveState maintains. If you are connected to the Internet you can execute a search by typing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;search &amp;lt;Module Name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your search produces results, the result will be a list referencing each match by a number, the package name, and a brief description. Here is a search for everything in one of my local repositories:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ppm&amp;gt; search *
Searching in Active Repositories
  1. Crypt::Blowfish    [2.10] Crypt::Blowfish
  2. Date-Formatter [0.04] A simple Date and Time formatting object
  3. DBD-Mysql [2.04.1] MySQL drivers for the Perl5 Database Interface ~
  4. DBI [1.14] Database independent interface for Perl
  5. libwww-perl [5.48] Library for WWW access in Perl
  6. Win32-Daemon    [0.2003.~ The Win32::Daemon extension for Win32 X86. Allo~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Installing a module is just as easy. However, before you can install a module, the PPM program needs to create a reference to it. Accomplish this by searching for the module. Upon completion of the search you can refer to the module by the number that corresponds to it. To install the module at position one, in this case &lt;code&gt;Crypt::Blowfish&lt;/code&gt;, in the previous results list type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ppm&amp;gt; install 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The PPM program will let you know if the module installed successfully or failed. PPM offers other commands to make managing your modules easier. However, this is all I needed for my solution&amp;hellip; except for creating a local repository.&lt;/p&gt;

&lt;h3 id=&#34;creating-a-local-repository&#34;&gt;Creating a Local Repository&lt;/h3&gt;

&lt;p&gt;There are a few basic elements to a local repository: the directory structure, the PPD files, and the modules. Initially, the PPM program gave me some difficulties locating the modules I needed to install. By trial and error, I discovered that the problem was the directory structure in which I had set up my repository. A repository needs two directories, one to house the PPD files and the other to contain the actual modules in their &lt;em&gt;.tar.gz&lt;/em&gt; format. Because the most common architecture for these installations is the x86 architecture, I created a directory named &lt;em&gt;packages&lt;/em&gt; with a subdirectory named &lt;em&gt;x86&lt;/em&gt;. The important thing about the directory structure is that the actual modules go into a subdirectory. This is opposed to housing the PPD files in one location and then storing the actual modules in an entirely different location in the file system.&lt;/p&gt;

&lt;p&gt;As I have mentioned earlier, this installation package was designed for Windows 2000 and later. I encountered numerous problems with the PPD files not being able to reference module locations based on an absolute path. I also encountered random errors when I used a relative path to a location other than a direct subdirectory. So where does the PPM program find this information?&lt;/p&gt;

&lt;p&gt;A PPD file is nothing more than an XML document. This XML document contains all the information needed by the PPM program to install a module. Here is an example PPD file for the libwww module:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;SOFTPKG NAME=&amp;quot;libwww-perl&amp;quot; VERSION=&amp;quot;5,48,0,0&amp;quot;&amp;gt;
 &amp;lt;TITLE&amp;gt;libwww-perl&amp;lt;/TITLE&amp;gt;
 &amp;lt;ABSTRACT&amp;gt;Library for WWW access in Perl&amp;lt;/ABSTRACT&amp;gt;
 &amp;lt;AUTHOR&amp;gt;Gisle Aas&amp;lt;/AUTHOR&amp;gt;
 &amp;lt;IMPLEMENTATION&amp;gt;
  &amp;lt;DEPENDENCY NAME=&amp;quot;Digest-MD5&amp;quot; VERSION=&amp;quot;0,0,0,0&amp;quot; /&amp;gt;
  &amp;lt;DEPENDENCY NAME=&amp;quot;HTML-Parser&amp;quot; VERSION=&amp;quot;0,0,0,0&amp;quot; /&amp;gt;
  &amp;lt;DEPENDENCY NAME=&amp;quot;MIME-Base64&amp;quot; VERSION=&amp;quot;2,1,0,0&amp;quot; /&amp;gt;
  &amp;lt;DEPENDENCY NAME=&amp;quot;libnet&amp;quot; VERSION=&amp;quot;0,0,0,0&amp;quot; /&amp;gt;
  &amp;lt;DEPENDENCY NAME=&amp;quot;URI&amp;quot; VERSION=&amp;quot;1,03,0,0&amp;quot; /&amp;gt;
  &amp;lt;OS NAME=&amp;quot;MSWin32&amp;quot; /&amp;gt;
  &amp;lt;ARCHITECTURE NAME=&amp;quot;MSWin32-x86-object&amp;quot; /&amp;gt;
  &amp;lt;CODEBASE HREF=&amp;quot;x86/libwww-perl.tar.gz&amp;quot; /&amp;gt;
 &amp;lt;/IMPLEMENTATION&amp;gt;
&amp;lt;/SOFTPKG&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the &lt;code&gt;name&lt;/code&gt; attribute in the &lt;code&gt;&amp;lt;softpkg&amp;gt;&lt;/code&gt; element. The PPM program queries this attribute&amp;rsquo;s value when you perform a search. The &lt;code&gt;&amp;lt;implementation&amp;gt;&lt;/code&gt; element also includes some very important attributes. Inside this element you can declare dependencies inside &lt;code&gt;&amp;lt;dependency&amp;gt;&lt;/code&gt; elements. This example PPD file includes several dependencies that must be met in order for this package to install successfully. The PPM program will check the system for the installation of these modules and, much like installing a Linux RPM, will fail if it can not find them on the system.&lt;/p&gt;

&lt;p&gt;One of the most important elements in the PPD file is the &lt;code&gt;&amp;lt;codebase&amp;gt;&lt;/code&gt; element. The &lt;code&gt;HREF&lt;/code&gt; attribute directs the PPM program to the location of the module. Remember the packages directory? Fill the &lt;em&gt;x86&lt;/em&gt; directory with the &lt;em&gt;.tar.gz&lt;/em&gt; download of the modules you want in your repository. Then supply the relative path to them in the &lt;code&gt;HREF&lt;/code&gt; attribute so that the PPM program will be able to locate them. You may also use URL to refer to a location on the web or on a local network. It&amp;rsquo;s entirely possible to create a local repository that only references modules located on other servers, instead of supplying all the modules locally. By supplying a URL, your repository could point the PPM program to another location on a network or over the Web.&lt;/p&gt;

&lt;p&gt;I experimented with this tag quite extensively. The biggest problem that I encountered was trying to reference a module in the &lt;code&gt;HREF&lt;/code&gt; tag by its absolute path. On certain versions of Windows, the PPM program would always fail, citing a variety of errors. Once I created the appropriate directory structure and supplied the PPM program with a relative path, it found the modules successfully. Visit ActiveState&amp;rsquo;s website for a complete breakdown of the PPD file structure and all of the supported elements.&lt;/p&gt;

&lt;p&gt;You should now be able to create your own PPD files. Just keep in mind that if you can not build the module on your system by the standard:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;perl Makefile.PL
nmake
nmake test
nmake install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; approach, then PPM will probably not be able to install them successfully either. PPMs exist to ease the installation of modules successfully built and tested in a Windows environment.&lt;/p&gt;

&lt;p&gt;For each module that you want in your repository, create a PPD. The example provides a good starting template for a PPD file. From a blank text document, insert the corresponding data in XML format. Once you&amp;rsquo;ve inserted the relevant information, save the file with a logical name and the &lt;em&gt;.ppd&lt;/em&gt; extension. I typically use a name that closely mimics the one used in the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; element. The PPD files must go in your repository&amp;rsquo;s &lt;em&gt;packages&lt;/em&gt; directory. Once you have created all of the PPD files and downloaded the modules into the &lt;em&gt;x86&lt;/em&gt; directory, you&amp;rsquo;re ready to set up the repository in PPM.&lt;/p&gt;

&lt;h3 id=&#34;registering-a-repository&#34;&gt;Registering a Repository&lt;/h3&gt;

&lt;p&gt;Creating a local repository requires just a few commands. From within the PPM program type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rep add &amp;lt;name&amp;gt; &amp;lt;location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suppose that you have created the packages directory at &lt;em&gt;C:\Perl\bin\packages&lt;/em&gt;. You have also created the &lt;em&gt;x86&lt;/em&gt; directory inside the &lt;em&gt;packages&lt;/em&gt; directory: &lt;em&gt;C:\Perl\bin\packages\x86&lt;/em&gt;. When you perform a search with PPM, it queries the PPD files. More specifically, it queries the metadata inside the XML of the PPD file, matching the &lt;code&gt;title&lt;/code&gt; tag against your search. Executing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ppm&amp;gt; rep add MyRep C:\Perl\bin\packages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; creates a repository named MyRep that uses PPD files in the &lt;em&gt;packages&lt;/em&gt; directory. After this command completes, check to see that it&amp;rsquo;s now in the repository list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ppm&amp;gt; rep
Repositories:
[1] ActiveState Package Repository
[2] ActiveState PPM2 Repository
[3] MyRep
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will return a list of all the available repositories. You should now see the repository that you just created, which will be set to active by default. The numbers in the list serves two purposes: the first is to define the order in which the search executes. PPM searches first the repository at position one, followed by two, and so forth. Second, it eases the management of the repositories much in the same way it eases installing modules. Instead of referring to a repository by name, you can refer to it by its number.&lt;/p&gt;

&lt;h3 id=&#34;a-more-public-repository&#34;&gt;A More Public Repository&lt;/h3&gt;

&lt;p&gt;The new local repository is only accessible by the machine where it resides. If desired, you can modify the PPD files and the steps involved in creating a repository to use an HTTP-based repository over a local network. You could use this repository outside of an installation package to manage and provide module access over a large network. For a straight-forward HTTP-based repository, all you need is a web-server accessible to a local Intranet or over the Internet.&lt;/p&gt;

&lt;p&gt;Even though I did not implement an HTTP-based repository, is well worth covering a simple setup. This essentially involves creating two repositories: one on the server and the other on any PC. I chose the Windows version of the Apache 2 web server. After a default installation of Apache 2, I configured it as a repository. There are only a couple of steps involved to accomplish this.&lt;/p&gt;

&lt;p&gt;By default, Apache serves its pages from &lt;em&gt;C:\Program Files\Apache2\htdocs.&lt;/em&gt;. I created the repository directories as previously discussed: &lt;em&gt;C:\Program Files\Apache2\htdocs\packages\x86&lt;/em&gt;. As long as the &lt;em&gt;packages&lt;/em&gt; directory is web-accessible, it will allow the server to act as a simple web-based repository. If you don&amp;rsquo;t plan to run PPM on the server then the ActivePerl installation is not even necessary. Now when you create a repository, if you supply the url to the server instead of a directory path it will access the repository over the network or Internet. To create a web-based repository in PPM, type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ppm&amp;gt; rep add &amp;lt;name&amp;gt; &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the PPM program on that machine will be able to search the modules available on the repository located at the specified URL.&lt;/p&gt;

&lt;p&gt;In order to test the installation of the repository, I usually disable the other repositories. There are multiple ways to do this, but I find it easiest to turn off the repositories. This keeps the repository available on the system; however, PPM will not use them when you perform a search. To disable searching of the repository at position two, type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ppm&amp;gt; rep off 2
Repositories:
[1] ActiveState Package Repository
[2] MyRep
[ ] ActiveState PPM2 Repository
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also remove a repository from your system:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ppm&amp;gt; rep delete &amp;lt;name or num&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will completely remove that repository from the system. Removing a repository is safe if you are confident that you will not use that repository again.&lt;/p&gt;

&lt;p&gt;Maybe you are not sure if a repository is active. Listing the repositories on your system will provide the information you need to know if a repository is active:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ppm&amp;gt; rep
[1] ActiveState Package Repository
[2] MyRep
[ ] ActiveState PPM2 Repository
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If there is not a number assigned to a repository, then it is not active. In this example, the ActiveState PPM2 Repository is still configured on the system but it is not active, so PPM will not search through it. To begin searching it again, all you need to do is to reactivate it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ppm&amp;gt; rep on ActiveState PPM2 Repository
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;PPM is a small but useful program for managing Perl modules needed on your systems. It provides a simple command line interface and the capability to customize the way it searches for modules. PPM allowed me to install the modules I needed without relying on Internet access. This led to the creation of an installation package that was truly Internet independent. It also enabled me to create an installation package that was completely automated, requiring no user interaction.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automated GUI Testing</title>
      <link>http://localhost:1313/pub/2005/08/11/win32guitest.html/</link>
      <pubDate>Thu, 11 Aug 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/08/11/win32guitest.html/</guid>
      <description>

&lt;p&gt;You use Perl at work. Sometimes you are unhappy because there is one application you always have to click on and fill all those input boxes. It&amp;rsquo;s very boring. Why not let Perl do that while you go grab a coffee? Also, maybe you sometimes feel frustrated that you need to start that nice app and want someone else type in for you. Let Perl do that, too.&lt;/p&gt;

&lt;h3 id=&#34;why-perl&#34;&gt;Why Perl?&lt;/h3&gt;

&lt;p&gt;Simply put: because you like Perl.&lt;/p&gt;

&lt;p&gt;The long story is that there are all sorts of software packages that you may use to automate graphical applications. Are they really good fits for what you want to do?&lt;/p&gt;

&lt;p&gt;Windows has many libraries that help you automate such things, but do the applications you use support those automation libraries? Too many do not. Moreover, is this enough for you to say you have tested a certain GUI feature? If not, read on.&lt;/p&gt;

&lt;h3 id=&#34;what-you-need&#34;&gt;What You Need&lt;/h3&gt;

&lt;p&gt;You need a working installation of Perl, with Perl/Tk included. I recommend &lt;a href=&#34;http://www.activestate.com/&#34;&gt;ActiveState&lt;/a&gt;&amp;rsquo;s ActivePerl. You also need the &lt;a href=&#34;https://metacpan.org/pod/Win32::GuiTest&#34;&gt;Win32::GuiTest&lt;/a&gt; module. Install it from the CPAN or, ideally, through PPM.&lt;/p&gt;

&lt;h3 id=&#34;example-code&#34;&gt;Example Code&lt;/h3&gt;

&lt;p&gt;Download the &lt;a href=&#34;http://localhost:1313/media/_pub_2005_08_11_win32guitest/tester.pl&#34;&gt;&lt;em&gt;tester.pl&lt;/em&gt;&lt;/a&gt; and the &lt;a href=&#34;http://localhost:1313/media/_pub_2005_08_11_win32guitest/tested.pl&#34;&gt;&lt;em&gt;tested.pl&lt;/em&gt;&lt;/a&gt; programs. They need to both be in the same directory. First run the &lt;em&gt;tested.pl&lt;/em&gt; program in order to see the windows it has and how it looks. The program does nothing by itself; it just serves as a &amp;ldquo;run&amp;rdquo; application. &lt;em&gt;tester.pl&lt;/em&gt; is more interesting. It spawns &lt;em&gt;tested.pl&lt;/em&gt; and starts sending it input (mouse moves, mouse clicks, and keystrokes).&lt;/p&gt;

&lt;p&gt;I tested these two programs on Windows 2000 Professional and Windows XP Home Edition using ActiveState&amp;rsquo;s distribution of Perl.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;tested.pl&lt;/em&gt; program is just a dummy GUI used to demonstrate the examples. It uses Tk, so although it is a Win32 GUI, it isn&amp;rsquo;t a native one. This has the effect that not all of the functions you can use with Win32::GuiTest will work as you would expect them to work against a native Win32 GUI. Fortunately, there are workarounds.&lt;/p&gt;

&lt;h3 id=&#34;a-few-words-about-windows&#34;&gt;A Few Words About Windows&lt;/h3&gt;

&lt;p&gt;Graphical user interfaces manage windows. Windows are just reusable objects with which users can interact. Almost all GUIs have more than just one window. I use &amp;ldquo;window&amp;rdquo; just as a generic term for any graphical object that an application may produce. This means that &amp;ldquo;window&amp;rdquo; is an abstract term after all.&lt;/p&gt;

&lt;p&gt;Windows have common elements that you need to consider before writing a program that interacts with a GUI.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each window belongs to a window class (making it possible to search them by class).&lt;/li&gt;
&lt;li&gt;Windows have an organizational hierarchy; every GUI has at least one root window, and every window may have child windows. Windows form a tree. This makes them searchable (by class or not) in depth: start from a root window and search among its siblings.&lt;/li&gt;
&lt;li&gt;Some windows have text attached to them. This is useful to identify windows.&lt;/li&gt;
&lt;li&gt;Windows have an numeric ID that uniquely identifies them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This means that you can identify windows by any of their text, class, and parent window attributes. You can also pinpoint a window by its ID.&lt;/p&gt;

&lt;h3 id=&#34;finding-windows&#34;&gt;Finding Windows&lt;/h3&gt;

&lt;p&gt;When testing a GUI, first make sure the application you want to test has started. To do this, use the Win32::GuiTest exported function named &lt;code&gt;FindWindowLike()&lt;/code&gt;. Remember that hierarchy of Windows? If you search for an &lt;em&gt;Edit&lt;/em&gt; window, you may find it in the wrong place. That There can be multiple different GUIs started that &lt;em&gt;have&lt;/em&gt; editor windows. There should be a way to differentiate between these hypothetical editor windows&amp;ndash;and the hierarchical organization of windows helps.&lt;/p&gt;

&lt;p&gt;First look for the main window of the application, and then descend the hierarchy (that you have to know beforehand) until you reach the desired window.&lt;/p&gt;

&lt;p&gt;How can you know the windows hierarchy? There are two main ways. If you have written the GUI yourself or have access to its sources and have enough experience, you may find out what the hierarchy of windows is. Unfortunately, that&amp;rsquo;s quite tricky and prone to error.&lt;/p&gt;

&lt;p&gt;Another much simpler way to do this on Windows platforms is to use the free &lt;a href=&#34;http://www.catch22.net/software/winspy.asp&#34;&gt;WinSpy++&lt;/a&gt; program. Basically, it allows you to &lt;a href=&#34;http://www.piotrkaluski.com/files/winguitest/docs/ch02.html&#34;&gt;peek at an application&amp;rsquo;s window structure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When you use WinSpy++ to look at an application windowing structure, you will notice that every window has a numeric handle, expressed in hex. However, Perl expresses in decimal. This will come up again in a moment.&lt;/p&gt;

&lt;p&gt;The syntax for &lt;code&gt;FindWindowLike&lt;/code&gt; is: &lt;code&gt;FindWindowLike($window,$titleregex,$classregex,$childid,   $maxlevel)&lt;/code&gt;. It returns a list of found windows. The parameters are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$window&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is the (numeric) handle of the parent window to search under (remember the hierarchical organization of windows in a GUI). You may use &lt;em&gt;undef&lt;/em&gt; in order to search for all windows.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;$window&lt;/em&gt; should be a decimal value, so if you know the window&amp;rsquo;s hex handle (as displayed by WinSpy++) you need to convert it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;$titleregex&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is the most often used parameter. It is a regular expression for &lt;code&gt;FindWindowLike&lt;/code&gt; to match against window titles to find the appropriate window(s).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;$classregex&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This matches against a window class. Suppose that you want to find all buttons in an application. Use the function like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @windows = FindWindowLike(undef,&amp;quot;&amp;quot;,&amp;quot;Button&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Note:&lt;/code&gt; if you don&amp;rsquo;t care what the class of the window is, do not omit the &lt;code&gt;$classregex&lt;/code&gt; parameter. Instead, use an empty string.&lt;/p&gt;

&lt;p&gt;Currently the &lt;code&gt;FindWindowLike()&lt;/code&gt; function does not check if &lt;code&gt;$classregex&lt;/code&gt; is undefined, so you will end up with a lot of Perl warnings.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;$childid&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you pass this argument, then the function will match all windows with this ID.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;$maxlevel&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Maximum depth level to match windows.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you may have noticed, the &lt;code&gt;tested&lt;/code&gt; program has a title that matches the string &amp;ldquo;Tested&amp;rdquo;. Thus, the &lt;code&gt;tester&lt;/code&gt; starts by searching windows matching this title:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@windows = FindWindowLike( undef, &amp;quot;Tested&amp;quot;, &amp;quot;&amp;quot; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;@windows&lt;/em&gt; will contain a list of window IDs that have a title matching the string. The point here is that you probably don&amp;rsquo;t want the &lt;code&gt;tested&lt;/code&gt; program to start more than once simultaneously.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ( @windows &amp;gt; 1 ) {
     print &amp;quot;* The \&amp;quot;tested\&amp;quot; program is started more than once!\n&amp;quot;;
     ...
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If there is no &lt;code&gt;tested&lt;/code&gt; application already running, the program can start it and repeat the procedure, searching for windows that match our criteria (they contain the string &amp;ldquo;Tested&amp;rdquo; in their titles). If it&amp;rsquo;s running just once, its ID is &lt;code&gt;$windows[0]&lt;/code&gt;. In fact, this is the root window of the application.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s no point in going further with the program if the GUI hasn&amp;rsquo;t started, so the code checks this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unless ( @windows ) {
     print &amp;quot;* The program hasn&#39;t started!\n&amp;quot;;
     exit 1;
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;setting-a-specific-window-to-foreground&#34;&gt;Setting a Specific Window to Foreground&lt;/h3&gt;

&lt;p&gt;Finding a window is sometimes not enough. Often, you need to send some input to the window. Obviously, the window should be in the foreground. The appropriate functions are &lt;code&gt;SetActiveWindow()&lt;/code&gt; and &lt;code&gt;SetForegroundWindow()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Because of the way windows work under Win32, this may be trickier than it seems. Basically, if the caller is not in the foreground, it can not give another window &amp;ldquo;focus.&amp;rdquo; MSDN explains this in the documentation of the &lt;a href=&#34;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/windows/windowreference/windowfunctions/setforegroundwindow.asp&#34;&gt;&lt;code&gt;SetForegroundWindow&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/userinput/keyboardinput/keyboardinputreference/keyboardinputfunctions/setactivewindow.asp&#34;&gt;&lt;code&gt;SetActiveWindow&lt;/code&gt;&lt;/a&gt; functions.&lt;/p&gt;

&lt;p&gt;While this behavior is easy to explain if you consider that you usually don&amp;rsquo;t want applications that run in background to be able to annoy you (at least) by grabbing focus, there is at least one drawback. If you are running a GUI (perhaps remotely) to which you will send sensitive input for some reason, you may send those secrets to another, possibly malicious, application if the tested application does not have focus!&lt;/p&gt;

&lt;p&gt;Another problem is in running tester programs remotely, or at regular intervals. Suppose that your tester program spawns the tested program, then starts sending it events (mouse events and/or keystrokes). If the computer is in a &amp;ldquo;locked&amp;rdquo; state, according to Microsoft documentation, no application can be in the foreground. You may have unexpected results.&lt;/p&gt;

&lt;p&gt;If the GUI you are automating receives sensitive input (such as passwords), you have to find a means to &amp;ldquo;isolate&amp;rdquo; that machine&amp;rsquo;s input/output devices, such as keyboard/mouse/monitor, so that no one unauthorized can peek at what your Perl program is typing in. Good luck.&lt;/p&gt;

&lt;p&gt;In my opinion, every time you send input to a GUI, the Win32::GuiTest program should check if the application is in the foreground. If it isn&amp;rsquo;t, it should try to bring it to the front. If it can&amp;rsquo;t do that, it should fail and not continue.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a sample routine that &lt;em&gt;tester.pl&lt;/em&gt; uses:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; sub bring_window_to_front {
     my $window  = shift;
     my $success = 1;

     if ( SetActiveWindow($window) ) {
         print &amp;quot;* Successfully set the window id: $window active\n&amp;quot;;
     }
     else {
         print &amp;quot;* Could not set the window id: $window active\n&amp;quot;;
         $success = 0;
     }
     if ( SetForegroundWindow($window) ) {
         print &amp;quot;* Window id: $window brought to foreground\n&amp;quot;;
     }
     else {
         print &amp;quot;* Window id: $window could not be brought to foreground\n&amp;quot;;
         $success = 0;
     }

     return $success;
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case you don&amp;rsquo;t want to bring a window to front but expect it to be in front, use &lt;code&gt;GetForegroundWindow()&lt;/code&gt;. That way, you can just check the return value with a window ID and find out if it is in front.&lt;/p&gt;

&lt;h3 id=&#34;key-pressing&#34;&gt;Key Pressing&lt;/h3&gt;

&lt;p&gt;You have found your window and have made sure that it has focus. What next?&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s time to send data to the window. This is the purpose of the &lt;code&gt;SendKeys()&lt;/code&gt; function. You can send to an application not only basic keypresses, but combinations of keys too. Here&amp;rsquo;s an example from the &lt;em&gt;tester.pl&lt;/em&gt; program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @keys = ( &amp;quot;%{F}&amp;quot;, &amp;quot;{RIGHT}&amp;quot;, &amp;quot;E&amp;quot;, );
for my $key (@keys) {
    SendKeys( $key, $pause_between_keypress );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code starts with an array containing the keypresses. Note the format of the first three elements. The keypresses are: &lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;F&lt;/code&gt;, right arrow, and &lt;code&gt;E&lt;/code&gt;. With the application open, this navigates the menu in order to open the editor.&lt;/p&gt;

&lt;p&gt;For a full listing of &amp;ldquo;special&amp;rdquo; keystrokes or combinations of keys, consult the function&amp;rsquo;s documentation.&lt;/p&gt;

&lt;h3 id=&#34;finding-text-in-your-application&#34;&gt;Finding Text in Your Application&lt;/h3&gt;

&lt;p&gt;You may want to learn how you can &amp;ldquo;read&amp;rdquo; text written in GUI windows. Unfortunately, you can&amp;rsquo;t read everything. You &lt;em&gt;can&lt;/em&gt; read the text written in the title of windows (useful for identifying a window by its title). You can also read text in &lt;code&gt;Edit&lt;/code&gt; class windows; for example, the part of Internet Explorer where you type in a URL, or the list items in a &lt;code&gt;ListBox&lt;/code&gt;. There may be other window classes from where you can fetch text; just verify with WinSpy++ whether you can &amp;ldquo;read&amp;rdquo; from a window, before writing your program, in order to avoid frustration.&lt;/p&gt;

&lt;p&gt;Remember that you can&amp;rsquo;t (at least now) read everything written in a window. Maybe a future version of Win32::GuiTest will provide a means by which to fetch text from a window, no matter what class that window is. In my humble opinion, it would be an awesome feature.&lt;/p&gt;

&lt;p&gt;The two functions useful for grabbing text are &lt;code&gt;GetWindowText()&lt;/code&gt; and &lt;code&gt;WMGetText()&lt;/code&gt;. Both take as a parameter the window ID:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$text = GetWindowText($window);
$text = WMGetText($window);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pushing-buttons&#34;&gt;Pushing Buttons&lt;/h3&gt;

&lt;p&gt;Pushing buttons can be tricky. The syntax is &lt;code&gt;PushButton($button[,$delay])&lt;/code&gt;, and the variable &lt;code&gt;$button&lt;/code&gt; can be either the text of the button (its caption) or the button ID. As Piotr Kaluski points out in &amp;ldquo;&lt;a href=&#34;http://www.piotrkaluski.com/files/automation/gui/carfl_pushcb.html&#34;&gt;Be Careful with &lt;code&gt;PushChildButton&lt;/code&gt;&lt;/a&gt;,&amp;rdquo; you sometimes want to specify a button ID, but instead the function matches a button having text like the one you used in the regexp. He posted &lt;a href=&#34;http://groups.yahoo.com/group/perlguitest/message/876?threaded=1&#34;&gt;a patch to the &lt;em&gt;perlguitest&lt;/em&gt; mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also note that when using Tk, as I do in this example, you can&amp;rsquo;t identify buttons by their text&amp;ndash;you need to use their IDs (if you know them). With native Win32 applications, you can identify buttons by their text. To check the differences, use WinSpy++ to look at a Tk button&amp;rsquo;s caption and a native Win32 button&amp;rsquo;s caption.&lt;/p&gt;

&lt;p&gt;Although &lt;code&gt;PushButton()&lt;/code&gt; works fine on native Win32 buttons, I couldn&amp;rsquo;t make it work on my Tk application, so in &lt;em&gt;tester.pl&lt;/em&gt;, I use a trick in the &lt;code&gt;push_button()&lt;/code&gt; subroutine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub push_button {
    my $parent_window_title = shift;
    my @button;
    my @window;

    SendKeys(&amp;quot;%{F}&amp;quot;);
    SendKeys(&amp;quot;O&amp;quot;);
    sleep 1;

    @window = FindWindowLike( undef, $parent_window_title, &amp;quot;&amp;quot; );

    if ( !bring_window_to_front( $window[0] ) ) {
        print &amp;quot;* Could not bring to front $window[0]\n&amp;quot;;
    }

    @button = FindWindowLike( $window[0], &amp;quot;&amp;quot;, &amp;quot;Button&amp;quot; );
    sleep 1;

    print &amp;quot;* Trying to push button id: $button[0]\n&amp;quot;;
    PushChildButton( $window[0], $button[0], 0.25 );
    sleep 1;

    click_on_the_middle_of_window( $button[0] );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the function depends on the &lt;em&gt;tested.pl&lt;/em&gt; application, as it has hard-coded the way to spawn the &lt;code&gt;Button&lt;/code&gt; window (by navigating the menu using keystrokes). It is easy to adapt it to be more flexible and to be less coupled with the rest of the code.&lt;/p&gt;

&lt;p&gt;After sending the right combination of keys (&lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;F&lt;/code&gt;, &lt;code&gt;O&lt;/code&gt;), the code expects that the window containing the &lt;code&gt;Button&lt;/code&gt; will pop up. Then it uses &lt;code&gt;FindWindowLike()&lt;/code&gt; again, using as a search item the title of the window containing the button (in this case, &lt;code&gt;here&lt;/code&gt;). Remember what I said about the windows hierarchy?&lt;/p&gt;

&lt;p&gt;Next, it ensures that the &lt;code&gt;Button&lt;/code&gt; window has the focus, although this is not entirely necessary at this point. After bringing the window to the front, the code searches for a button in the window (I already know that there&amp;rsquo;s only one button there).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@button = FindWindowLike( $window[0], &amp;quot;&amp;quot;, &amp;quot;Button&amp;quot; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This narrows down the search: &amp;ldquo;Search for a window of the class &lt;code&gt;Button&lt;/code&gt; under the window that has the ID &lt;code&gt;$window[0]&lt;/code&gt;,&amp;rdquo; the window having the ID in &lt;code&gt;$window[0]&lt;/code&gt; having been previously found by its title.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PushChildButton( $window[0], $button[0], 0.25 );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is here just for the power of example, as it doesn&amp;rsquo;t work for the Tk button. It would work for a native Win32 button.&lt;/p&gt;

&lt;p&gt;The trick is that the code can still push it using the mouse! Having the button ID, as returned by &lt;code&gt;FindWindowLike()&lt;/code&gt;, the code calls the &lt;code&gt;click_on_the_middle_of_window&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub click_on_the_middle_of_window {
    my $window = shift;

    print &amp;quot;* Moving the mouse over the window id: $window\n&amp;quot;;

    my ( $left, $top, $right, $bottom ) = GetWindowRect($window);

    MouseMoveAbsPix( ( $right + $left ) / 2, ( $top + $bottom ) / 2 );

    sleep(1);

    print &amp;quot;* Left Clicking on the window id: $window\n&amp;quot;;
    SendMouse(&amp;quot;{LeftClick}&amp;quot;);
    sleep(1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function takes a window ID as its parameter, searches its rectangle using &lt;code&gt;GetWindowRect()&lt;/code&gt;, and then moves the mouse pointer right in the middle of it with &lt;code&gt;MouseMoveAbsPix()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With the pointer over the button, sending &lt;code&gt;LeftClick&lt;/code&gt; presses the button.&lt;/p&gt;

&lt;h3 id=&#34;moving-around-with-the-mouse&#34;&gt;Moving Around with the Mouse&lt;/h3&gt;

&lt;p&gt;As seen earlier, moving the mouse is straightforward: just use &lt;code&gt;MouseMoveAbsPix()&lt;/code&gt;. It takes as parameters the coordinates where you want the pointer to be (horizontal and vertical positions) in pixels.&lt;/p&gt;

&lt;p&gt;It is useful to use other two functions in conjunction: &lt;code&gt;SendMouse()&lt;/code&gt; and &lt;code&gt;GetWindowRect()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SendMouse&lt;/code&gt; sends a mouse action to the &lt;code&gt;Desktop&lt;/code&gt;. It takes only one parameter: a mouse action such as &lt;code&gt;{LeftDown}&lt;/code&gt;, &lt;code&gt;{LeftUp}&lt;/code&gt;, or &lt;code&gt;{LeftClick}&lt;/code&gt;. For more details, see the function&amp;rsquo;s documentation.&lt;/p&gt;

&lt;p&gt;You can also move the mouse wheel using &lt;code&gt;MouseMoveWheel()&lt;/code&gt;. It takes a positive or a negative argument, indicating the direction of the motion.&lt;/p&gt;

&lt;p&gt;To send an action, you need to know where we send it. Usually you will move the mouse pointer over a window. &lt;code&gt;GetWindowRect()&lt;/code&gt; is useful to find the coordinates of a window.&lt;/p&gt;

&lt;p&gt;It can be simpler to create a wrapper around these three functions in order to move the mouse pointer over a selected window, and then generate a mouse action, as I did with &lt;code&gt;click_on_the_middle_of_window()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h3&gt;

&lt;p&gt;Here are some links you may find useful.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Win32::GuiTest&#34;&gt;Win32::GuiTest documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Win32::GuiTest::Examples&#34;&gt;Win32::GuiTest::Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;http://groups.yahoo.com/group/perlguitest/&#34;&gt;PerlGuiTest group&lt;/a&gt; on Yahoo; this is quite an active group.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.piotrkaluski.com/files/winguitest/docs/index.html&#34;&gt;Win32::GuiTest extended tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Manipulating Word Documents with Perl</title>
      <link>http://localhost:1313/pub/2005/05/26/word_control.html/</link>
      <pubDate>Thu, 26 May 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/05/26/word_control.html/</guid>
      <description>

&lt;p&gt;In a recent lightning article, &lt;a href=&#34;http://localhost:1313/pub/2005/03/31/lightning2.html&#34;&gt;Customizing Emacs with Perl&lt;/a&gt;, &lt;a href=&#34;http://localhost:1313/authors/bob-ducharme&#34;&gt;Bob DuCharme&lt;/a&gt; explained how to use the Emacs &lt;code&gt;shell-command-on-region&lt;/code&gt; function to invoke a Perl script on a marked region of text. Bob writes that he was reluctant to invest the time needed to write the &lt;a href=&#34;http://www.gnu.org/software/emacs/elisp-manual/html_mono/elisp.html&#34;&gt;elisp&lt;/a&gt; code needed for a particular string manipulation, especially when he knew how much easier it would be for him to do that manipulation with Perl. However, by using the Emacs function &lt;code&gt;shell-command-on-region&lt;/code&gt;, Bob could have his cake an eat it too&amp;ndash;keep editing with Emacs, while using Perl on demand for string manipulation.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve often been in the same boat as Bob, though while using Microsoft Word. When facing a thorny string manipulation problem, I, too, have found myself thinking, &lt;em&gt;This would be so easy if I could just use Perl!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, Word VBA doesn&amp;rsquo;t include a feature analogous to the &lt;code&gt;shell-command-on-region&lt;/code&gt; function &amp;hellip;which certainly sounded like a challenge to me. In &lt;a href=&#34;http://www.oreilly.com/catalog/wordhks&#34;&gt;Word Hacks&lt;/a&gt;, &lt;a href=&#34;http://www.oreillynet.com/cs/catalog/view/au/906&#34;&gt;Sean M. Burke&lt;/a&gt; and I &lt;a href=&#34;http://www.windowsdevcenter.com/pub/windows/excerpt/wdhks_1/index.html?page=5&#34;&gt;demonstrated&lt;/a&gt;how to use the Windows clipboard as a primitive but simple means of exchanging data between Word and a Perl script. I decided to see if I could generalize that technique to emulate the Emacs &lt;code&gt;shell-command-on-region&lt;/code&gt; function from Word, using VBA and Perl. I&amp;rsquo;m happy to report that it works. Using the code shown in this article, you&amp;rsquo;ll be able to run any DOS command that accepts standard input (like most in the fabulous &lt;a href=&#34;http://unxutils.sourceforge.net/&#34;&gt;UnxUtils package&lt;/a&gt;) on text you&amp;rsquo;ve selected in Microsoft Word, then either have the output echoed back or use it to replace the selected text. As an example, you can use the code in this article to run Bob&amp;rsquo;s &lt;a href=&#34;http://localhost:1313/media/_pub_2005_05_26_word_control/ol2iso.pl&#34;&gt;&lt;code&gt;OLDate2ISO.pl&lt;/code&gt;&lt;/a&gt; script on a selected date. (The &lt;code&gt;OLDate2ISO.pl&lt;/code&gt; script converts a Microsoft Outlook style date, like &amp;ldquo;Sat 4/16/2005 7:35 PM&amp;rdquo; to ISO 8609 format, like &amp;ldquo;2005-04-16T19:35&amp;rdquo;.)&lt;/p&gt;

&lt;p&gt;VBA doesn&amp;rsquo;t offer any easy way to capture shell command output, so there are actually two scripts needed to emulate the Emacs &lt;code&gt;shell-command-on-region&lt;/code&gt; function: a Perl script to interact with the DOS shell, and a VBA function to manage that Perl script and deal with the output. In addition, I also wrote a simple wrapper macro that emulates the interactive (&lt;code&gt;Escape+|&lt;/code&gt;) form of the &lt;code&gt;shell-command-on-region&lt;/code&gt; function, using an input box, as shown in &lt;a href=&#34;#shell_command_dialog&#34;&gt;Figure 2&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;the-clip2shell-pl-media-pub-2005-05-26-word-control-clip2shell-pl-script&#34;&gt;The &lt;a href=&#34;http://localhost:1313/media/_pub_2005_05_26_word_control/clip2shell.pl&#34;&gt;clip2shell.pl&lt;/a&gt; script&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s true that VBA does include a &lt;code&gt;Shell()&lt;/code&gt; function, but when using that function, there&amp;rsquo;s no way to capture the output (if any) of the command invoked. To capture the output of a command run on the DOS shell, I&amp;rsquo;ve used a simple Perl script, named &lt;code&gt;clip2shell.pl&lt;/code&gt; that takes one argument: a single string containing the name of the command to run (including any arguments). The current contents of the Windows clipboard are the input to that command, and the command&amp;rsquo;s output is then put to the clipboard. (The &lt;code&gt;Win32::Clipboard&lt;/code&gt; module is included in the standard &lt;a href=&#34;http://www.activestate.com/Products/ActivePerl/&#34;&gt;ActivePerl&lt;/a&gt; distribution). Here&amp;rsquo;s the code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# clip2shell.pl 
# A script for running a DOS shell command
# on the contents of the clipboard, then
# putting the command&#39;s results back
# on the clipboard
use Win32::Clipboard;
my $TEMP          = $ENV{&#39;TEMP&#39;};
my $semaphore     = &amp;quot;$TEMP/$$.tmp&amp;quot;;
my $cliptext_file = &amp;quot;$TEMP/$$.cliptext.tmp&amp;quot;;

my $clipboard     = Win32::Clipboard();
my $cliptext      = $clipboard-&amp;gt;Get();
my $shell_command = shift @ARGV;

open F, &amp;quot;&amp;gt;$cliptext_file&amp;quot; or die;
print F $cliptext;
close F;

my $output = `$shell_command $cliptext_file`;
$clipboard-&amp;gt;Set($output);

unlink($cliptext_file);
rmdir($semaphore);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that before exiting, the script deletes a folder named with &lt;code&gt;$semaphore&lt;/code&gt;, which contains the script&amp;rsquo;s &lt;a href=&#34;http://en.wikipedia.org/wiki/Process_identifier&#34;&gt;PID&lt;/a&gt;, appended with a &lt;em&gt;.tmp&lt;/em&gt; extension, located in the current user&amp;rsquo;s TEMP folder. This is how &lt;code&gt;clip2shell.pl&lt;/code&gt; tells VBA that it&amp;rsquo;s safe to read the result back from the clipboard. As I mentioned earlier, the VBA &lt;code&gt;Shell()&lt;/code&gt; command doesn&amp;rsquo;t return the command&amp;rsquo;s output&amp;ndash;but it does return the command&amp;rsquo;s PID.&lt;/p&gt;

&lt;h3 id=&#34;the-shell-command-on-region-function-vba-style&#34;&gt;The &lt;code&gt;shell-command-on-region&lt;/code&gt; function, VBA style&lt;/h3&gt;

&lt;p&gt;The VBA function, &lt;code&gt;ShellCommandOnRegion&lt;/code&gt;, manages the interaction between Word and the &lt;code&gt;clip2shell.pl&lt;/code&gt; script. When this function invokes &lt;code&gt;clip2shell.pl&lt;/code&gt; using the VBA &lt;code&gt;Shell()&lt;/code&gt; function, it also creates the semaphore folder, named using &lt;code&gt;clip2shell.pl&lt;/code&gt;&amp;rsquo;s PID (the return value of the &lt;code&gt;Shell&lt;/code&gt; function), then waits for the deletion of that folder before getting the output from the clipboard. At that point, it either echoes back the output (using the Status Bar, or, for output more than 80 characters long, a separate message box), or pastes it back in to the document, replacing the current selection. The optional &lt;code&gt;bReplaceCurrentSelection&lt;/code&gt; argument controls the output method, which is &lt;code&gt;False&lt;/code&gt; by default.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Function ShellCommandOnRegion(sShellCommand As String, _
               Optional ByVal sngMaxWaitSeconds As Single = 5, _
               Optional ByVal bReplaceCurrentSelection As Boolean = False) As Boolean
Dim lPID As Long
Dim sSemaphore As String
Dim sngStartTime As Single
Dim oClipboard As New DataObject
Dim sel As Selection
Dim sResult As String

Set sel = Selection

If sel.Type = wdSelectionIP Then
    StatusBar = &amp;quot;Please select some text first.&amp;quot;
    Exit Function
End If

sel.Copy

sngStartTime = Timer

lPID = Shell(&amp;quot;perl c:\clip2shell.pl &amp;quot; + Chr(34) + sShellCommand + Chr(34))
sSemaphore = Environ(&amp;quot;TEMP&amp;quot;) + &amp;quot;\&amp;quot; + CStr(lPID) + &amp;quot;.tmp&amp;quot;
MkDir sSemaphore

Do: DoEvents
Loop Until Len(Dir(sSemaphore, vbDirectory)) = 0 _
            Or ((Timer - sngStartTime) &amp;gt; sngMaxWaitSeconds)

If Not Len(Dir(sSemaphore, vbDirectory)) = 0 Then
    RmDir sSemaphore
    Exit Function
End If

oClipboard.GetFromClipboard
sResult = oClipboard.GetText

If bReplaceCurrentSelection Then
    Selection.Paste
Else
    If Len(sResult) &amp;gt; 80 Then
        MsgBox sResult
    Else
        StatusBar = sResult
    End If
End If

ShellCommandOnRegion = True
End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If there&amp;rsquo;s a problem and clip2shell.pl doesn&amp;rsquo;t delete the semaphore folder within a certain amount of time (the default shown here is 5 seconds, as represented with the optional &lt;code&gt;sngMaxWaitSeconds&lt;/code&gt; argument), &lt;code&gt;ShellCommandOnRegion&lt;/code&gt; gives up, deletes the semaphore folder itself, and returns a value of &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;NOTE: Before using this code, make sure you have a reference set to the &lt;strong&gt;&lt;code&gt;Microsoft Forms 2.0 Object Library&lt;/code&gt;&lt;/strong&gt;, as shown in &lt;a href=&#34;#msforms_reference&#34;&gt;Figure 1&lt;/a&gt;. Without this reference set, the &lt;code&gt;DataObject&lt;/code&gt; object type won&amp;rsquo;t be available to your code, which will cause a compilation error. To reach this dialog from Word, choose Tools, Macro, Visual Basic Editor. From within the Visual Basic Editor, choose Tools, References.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_05_26_word_control/msforms_reference.gif&#34; alt=&#34;setting a reference&#34; width=&#34;449&#34; height=&#34;364&#34; /&gt;
&lt;em&gt;Figure 1. Setting a reference to the &lt;code&gt;Microsoft Forms 2.0 Object Library&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;putting-it-together&#34;&gt;Putting it Together&lt;/h3&gt;

&lt;p&gt;With the &lt;code&gt;clip2shell.pl&lt;/code&gt; script and the &lt;code&gt;ShellCommandOnRegion&lt;/code&gt; function set up, it&amp;rsquo;s time to demonstrate how to use Bob DuCharme&amp;rsquo;s &lt;code&gt;OLDate2ISO.pl&lt;/code&gt; script on text selected in a Word document. First, I want to show a macro that runs &lt;code&gt;OLDate2ISO.pl&lt;/code&gt; on selected text, then I&amp;rsquo;ll show a more generalized macro, which emulates the interactive (&lt;code&gt;Escape+|&lt;/code&gt;) version of the Emacs &lt;code&gt;shell-command-on-region&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the &lt;code&gt;OLDate2ISO.pl&lt;/code&gt; script, modified slightly to make its substitution globally on all the dates in its input:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Convert Outlook format date to ISO 8309 date 
#(e.g. Wed 2/16/2005 5:27 PM to 2005-02-16T17:27)
while (&amp;lt;&amp;gt;) {
  s{\w+ (\d+)/(\d+)/(\d{4}) (\d+):(\d+) ([AP])M} {
     my $hour  = $4;
     $hour    += 12 if $6 eq &#39;P&#39;;
     sprintf( &#39;%04d-%02d-%02dT%02s:%02s&#39;, $3, $1, $2, $hour, $5 );
  }gse;
  print;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s the &lt;code&gt;OLDate2ISO&lt;/code&gt; macro. After putting it in the template or document of your choice, run it by pressing &lt;code&gt;Alt-F8&lt;/code&gt; (which is the same as choosing Tools -&amp;gt; Macro -&amp;gt; Macros), or by assigning it to a menu or keyboard shortcut:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Sub OLDate2ISO()
If ShellCommandOnRegion(&amp;quot;perl c:\ol2iso.pl&amp;quot;, , True) = False Then
    MsgBox &amp;quot;Couldn&#39;t fix selected dates&amp;quot;
End If
End Sub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A dedicated macro is great for frequently used Perl scripts (or other shell commands), but it&amp;rsquo;s also helpful to be able to run an arbitrary shell command on the selected Word text, and have the text echoed back, using the Status Bar (or, if longer than will easily fit on the Status Bar, in a separate message box&amp;ndash;the Status Bar/message box route was the closest I could get to an Emacs mini-buffer).&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the code for the general-purpose macro, named &lt;code&gt;RunShellCommandOnSelection&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Sub RunShellCommandOnSelection()
Static sShellCommand As String
sShellCommand = InputBox(prompt:=&amp;quot;Enter full Shell Command to run on selection:&amp;quot;, _
                Title:=&amp;quot;ShellCommandOnRegion&amp;quot;, _
                Default:=sShellCommand)

If Len(sShellCommand) = 0 Then Exit Sub

If Selection.Type = wdSelectionIP Then
    MsgBox &amp;quot;Please select some text first.&amp;quot;
    Exit Sub
End If

If ShellCommandOnRegion(sShellCommand) = False Then
    MsgBox &amp;quot;Shell command failed&amp;quot;
End If
End Sub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this macro brings up the dialog shown in &lt;a href=&#34;#shell_command_dialog&#34;&gt;Figure 2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_05_26_word_control/shell_command_dialog.gif&#34; alt=&#34;the macro&amp;#39;s dialog&#34; width=&#34;363&#34; height=&#34;152&#34; /&gt;
&lt;em&gt;Figure 2. The dialog that appears when running the &lt;code&gt;RunShellCommandOnSelection&lt;/code&gt; macro.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;By using a &lt;code&gt;Static&lt;/code&gt; variable declaration, the command entered will be &amp;ldquo;sticky&amp;rdquo; within Word sessions (to some extent), making it easy to re-run the same command multiple times. If you wanted to replace the selected text instead of echoing the result, modify the &lt;code&gt;RunShellCommandOnSelection&lt;/code&gt; macro by adding the optional &lt;code&gt;bReplaceCurrentSelection&lt;/code&gt; argument to the &lt;code&gt;ShellCommandOnRegion&lt;/code&gt; call (leaving a blank value for the &lt;code&gt;sngMaxWaitSeconds&lt;/code&gt; argument):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;If ShellCommandOnRegion(sShellCommand, ,True) = False Then
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Word may not be quite as customizable as Emacs, but by emulating a single Emacs function using Perl and VBA, it&amp;rsquo;s possible to add a powerful new tool to Word, and in doing so, give any Perl refugees who find themselves in the Word world&amp;ndash;whether by choice or circumstance&amp;ndash;some of the comforts of home.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automating Windows Applications with Win32::OLE</title>
      <link>http://localhost:1313/pub/2005/04/21/win32ole.html/</link>
      <pubDate>Thu, 21 Apr 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/04/21/win32ole.html/</guid>
      <description>

&lt;h3 id=&#34;getting-my-feet-wet&#34;&gt;Getting My Feet Wet&lt;/h3&gt;

&lt;p&gt;My first glimpse of the Internet happened at Lotus Development somewhere around 1994. A Mosaic demonstration duly impressed me. A few months later, working at a small Cambridge, MA company called Dataware brought me closer to the online revolution.&lt;/p&gt;

&lt;p&gt;I landed a job at America Online in 1995 working for their browser team. They originally had their own browser, which they had purchased from CMGI. It was kind of cool at the time because it included a tabbed frames feature about eight years before the Gecko engine.&lt;/p&gt;

&lt;p&gt;It was there that Pete Deschanes wrote a tool using Microsoft Visual Test to automate the America Online embedded web browser. I was especially interested in certain functions he was using that captured browser events.&lt;/p&gt;

&lt;p&gt;Later, I moved on to a company in Chelmsford, MA that was using OLE Automation to drive the translation of Microsoft Word Documents into Fax documents. Rob Murtha explained a lot to me about OLE Automation and introduced me to Perl and Java.&lt;/p&gt;

&lt;h3 id=&#34;washed-up&#34;&gt;Washed Up&lt;/h3&gt;

&lt;p&gt;The internet bubble burst for me in 2002 and I wound up stranded on the shores of Fidelity Investments as a manual tester for one of their many investment Web page groups. After a few weeks of manual testing, I was ready to automate several of my tasks.&lt;/p&gt;

&lt;p&gt;There was a problem. There were plenty of available Winrunner licenses, but I was not allowed to use them because I was not part of their automation group. In fact, I was reprimanded and almost lost my job for being too persistent in asking to use one. Then I decided to write my own automation tool.&lt;/p&gt;

&lt;p&gt;I had experience with C, C++, Java, and Perl. I decided to start with a scripting language just to get a prototype going. I also thought it would be cool to have a real open source script language to write code with instead of something that a few engineers had developed exclusively for Web automation.&lt;/p&gt;

&lt;p&gt;My process consisted of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ask a question.&lt;/li&gt;
&lt;li&gt;Do some research.&lt;/li&gt;
&lt;li&gt;Write some code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;The first thing I needed to do was to see if I could start &lt;code&gt;IExplore.exe&lt;/code&gt; from Perl. I knew I did not want to simply start the process with &lt;code&gt;system(&amp;quot;C:\\Program Files\\Internet Explorer\\IExplore.exe&amp;quot;);&lt;/code&gt;. Yes, I could get IE up and running that way, but I would not be able to do anything useful with it except to kill it.&lt;/p&gt;

&lt;p&gt;I noticed that Active Perl contained an interesting module called &lt;a href=&#34;https://metacpan.org/pod/Win32::OLE&#34;&gt;Win32::OLE&lt;/a&gt;. I opened the &lt;em&gt;OLE.pm&lt;/em&gt; file and began to read the comments.&lt;/p&gt;

&lt;p&gt;Comments like this looked very promising:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This module provides an interface to OLE Automation from Perl. OLE Automation brings VisualBasic-like scripting capabilities and offers powerful extensibility and the ability to control many Win32 applications from Perl scripts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This one also looked pretty good:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;MessageLoop()&lt;/code&gt; class method will run a standard Windows message loop, dispatching messages until the &lt;code&gt;QuitMessageLoop()&lt;/code&gt; class method is called. It is used to wait for OLE events.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Keeping in mind that faith is the substance of things hoped for and the evidence of things not seen, I set about to write a Simple Automation Module for Internet Explorer using Active Perl&amp;rsquo;s &lt;code&gt;Win32::OLE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Going back to the &lt;code&gt;Win32::OLE&lt;/code&gt; documentation I found out how to start IE through the COM object. I translated some examples for Excel and Word and wound up with this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$IE = Win32::OLE-&amp;gt;new(&amp;quot;InternetExplorer.Application&amp;quot;)
    || die &amp;quot;Could not start Internet Explorer.Application\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That was nice, but nothing appeared on my computer screen. I could hear the hard drive making a sound like it was starting an application but I couldn&amp;rsquo;t see Internet Explorer. I decided to Google for some examples. The information out there was very sparse but I found something that set the visible attribute to 1:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$IE-&amp;gt;{visible} = 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time Internet Explorer appeared with a blank screen. It was a start. I figured that there were a bunch of IE processes that I could not see on my machine from my previous efforts, so I killed those using the task manager.&lt;/p&gt;

&lt;p&gt;Next, I started a free Microsoft tool called &lt;code&gt;OLEVIEW.exe&lt;/code&gt;. This gave me a tree view of all automation objects registered on my machine. There were hundreds of them. I found the one called Internet Explorer (Ver. 1.0) and expanded the tree looking for methods. &lt;code&gt;IWebBrowser2&lt;/code&gt; looked interesting so I clicked on that and selected the View Type Info button. Out popped up a new window with a list of methods. This was looking better all the time.&lt;/p&gt;

&lt;p&gt;I clicked on a method called &lt;code&gt;Navigate&lt;/code&gt; and saw:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[id(0x00000068), helpstring(&amp;quot;Navigates to a URL or file.&amp;quot;)].
void Navigate(
    [in] BSTR URL,
    [in, optional] VARIANT* Flags,
    [in, optional] VARIANT* TargetFrameName,
    [in, optional] VARIANT* PostData,
    [in, optional] VARIANT* Headers);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I decided to try it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$IE-&amp;gt;Navigate(&amp;quot;http://www.google.com&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I had navigated to my first website with my new automation tool.&lt;/p&gt;

&lt;h3 id=&#34;on-the-road&#34;&gt;On the Road&lt;/h3&gt;

&lt;p&gt;I knew I was getting close to hitting the wall. I had seen through Google and newsgroups that lots of folks had reached this point in the game and turned around. Remembering back to Pete Deschanes&amp;rsquo; Visual Test Tool, I was certain that I could make more progress if I could capture Internet Explorer&amp;rsquo;s events. I went back to the &lt;em&gt;OLE.pm&lt;/em&gt; documentation to do a little more reading about events.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=item Win32::OLE-&amp;gt;WithEvents(OBJECT[, HANDLER[, INTERFACE]])

This class method enables and disables the firing of events by
the specified OBJECT.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I could just grok what &lt;code&gt;OBJECT&lt;/code&gt;, &lt;code&gt;HANDLER&lt;/code&gt;, and &lt;code&gt;INTERFACE&lt;/code&gt; represented, I felt that I could get my events. I made some guesses.&lt;/p&gt;

&lt;p&gt;The Object: that would be what &lt;code&gt;Win32::OLE-&amp;gt;new()&lt;/code&gt; returned. Everyone knows you instantiate an object with the &lt;code&gt;new&lt;/code&gt; operator.&lt;/p&gt;

&lt;p&gt;The Handler: I read further through &lt;em&gt;OLE.pm&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The HANDLER argument to &lt;code&gt;Win32::OLE-&amp;gt;WithEvents()&lt;/code&gt; can either be a CODE reference or a package name. In the first case, all events will invoke this particular function. The first two arguments to this function will be the OBJECT itself and the name of the event. The remaining arguments will be event-specific.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Win32::OLE-&amp;gt;WithEvents($Obj, \&amp;amp;Event);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now I understood that &lt;code&gt;WithEvents&lt;/code&gt; was going to tell Internet Explorer to call my Perl Handler whenever IE fired an event. I had to give the &lt;code&gt;WithEvents&lt;/code&gt; call a reference to my subroutine like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\&amp;amp;Event
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What was the Interface name going to be? I went back to OLEVIEWER and looked through the interface folder. It looked like &lt;code&gt;DwebBrowserEvents2&lt;/code&gt; would deliver what I wanted.&lt;/p&gt;

&lt;p&gt;This is what I came up with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Win32::OLE-&amp;gt;WithEvents($IE,\&amp;amp;Event,&amp;quot;DWebBrowserEvents2&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now all I needed was to write an Event subroutine for IE to call. The &lt;em&gt;OLE.pm&lt;/em&gt; comments told me that &amp;ldquo;the first two arguments to this function will be the OBJECT itself and the name of the event&amp;rdquo;, so I just used the document example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub Event {
    my ($Obj,$Event,@Args) = @_;
    print &amp;quot;Event triggered: &#39;$Event&#39;\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I noticed that there was a third argument called &lt;code&gt;@Args&lt;/code&gt; and assumed that this was there to catch all other unknown parameters for each event.&lt;/p&gt;

&lt;p&gt;How was I going to block my code to wait for the events to transpire? I returned to the &lt;em&gt;Win32::OLE&lt;/em&gt; comments:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;MessageLoop()&lt;/code&gt; class method will run a standard Windows message loop, dispatching messages until the &lt;code&gt;QuitMessageLoop()&lt;/code&gt; class method is called. It is used to wait for OLE events.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I added this code, just to see if I could capture IE events:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Win32::OLE-&amp;gt;MessageLoop();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;i-ve-been-to-the-mountain-top&#34;&gt;I&amp;rsquo;ve Been to the Mountain Top&lt;/h3&gt;

&lt;p&gt;It was quite a moment when I saw these events pouring out of my nine lines of code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Event triggered: CommandStateChange
Event triggered: OnVisible
Event triggered: PropertyChange
Event triggered: BeforeNavigate2
Event triggered: DownloadBegin
Event triggered: StatusTextChange
Event triggered: ProgressChange
Event triggered: FileDownload
Event triggered: DownloadComplete
Event triggered: TitleChange
Event triggered: NavigateComplete2
Event triggered: OnQuit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Internet Explorer was firing off events and its COM object was calling my Perl Event subroutine.&lt;/p&gt;

&lt;p&gt;From here, I kept searching the newsgroups. I found one sentence where someone mentioned acquiring the DOM from the &lt;code&gt;DocumentComplete&lt;/code&gt; Event. I knew this was a key, but how could I take this reference using Perl?&lt;/p&gt;

&lt;p&gt;I read up about the DOM. I borrowed a book from someone at work. &lt;a href=&#34;http://msdn.microsoft.com/workshop/author/dhtml/reference/dhtml_reference_entry.asp&#34;&gt;Microsoft has their own version&lt;/a&gt; of the DOM called DHTML and I came across their Web page. After reading this documentation for a while, I saw that the DOM could give me everything I needed to have a full-blown automation tool. All I needed was the reference.&lt;/p&gt;

&lt;h3 id=&#34;finding-the-dom&#34;&gt;Finding the DOM&lt;/h3&gt;

&lt;p&gt;I broke up my Event subroutine into pieces. I wanted to do something different for each triggered event. Specifically I wanted to try to take a reference to the DOM when the &lt;code&gt;DocumentComplete&lt;/code&gt; event triggered. My idea was that if I shifted out the first element of the @Args array, I would find the reference I was looking for. I rewrote the Event subroutine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub Event {
    my ($Obj,$Event,@Args) = @_;
    print &amp;quot; Event triggered: $Event\n&amp;quot;;
    if ($Event eq &amp;quot;DocumentComplete&amp;quot;) {
        $IEObject = shift @Args;
        print &amp;quot;Here is my reference: $IEObject\n&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This printed out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Here is the Event: DocumentComplete
Here is my reference: Win32::OLE=HASH(0x1a524fc)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was looking better all the time.&lt;/p&gt;

&lt;p&gt;I had a reference, but was it to the DHTML on the page that had just loaded? There was only one way to find out: could I use it to make a DHTML call? I looked on the Microsoft DHTML reference page for a property that would tell me I had a reference. &lt;code&gt;URL&lt;/code&gt; looked like a good one, so I tried this code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print &amp;quot;URL: &amp;quot; . $IEObject-&amp;gt;URL . &amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That gave me nothing. I went back to the OLEVIEWER and found this interesting method&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[id(0x000000cb), propget, helpstring(&amp;quot;Returns the active 
   Document automation object, if any.&amp;quot;)]
IDispatch* Document();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Active document sounded good, so I tried:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print &amp;quot;URL: &amp;quot; . $IEObject-&amp;gt;Document-&amp;gt;URL . &amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gave me:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;URL: http://www.google.com/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Golden! My next step was to find a way to break out of the &lt;code&gt;MessageLoop()&lt;/code&gt; I was in.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Win32::OLE-&amp;gt;QuitMessageLoop();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;going-on-home&#34;&gt;Going On Home&lt;/h3&gt;

&lt;p&gt;My last step was to do something more useful with my reference to the DHTML. It was time to write a subroutine that would enter text into an edit box. That would seal my proof of concept.&lt;/p&gt;

&lt;p&gt;Other automation tools need you to make a GUI map (Mercury Winrunner) or an include file (Segue Silk) of every page you view before running the automation. I wanted something that would just look through the code that was already on the page and pick out a control on the fly using the power of regular expressions.&lt;/p&gt;

&lt;p&gt;I found all of the methods and properties in the following example in the &lt;a href=&#34;http://msdn.microsoft.com/workshop/author/dhtml/reference/dhtml_reference_entry.asp&#34;&gt;Microsoft DHTML API documentation&lt;/a&gt;. First I needed a name for my subroutine. &lt;code&gt;SetEditBox&lt;/code&gt; seemed easy to understand.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub SetEditBox {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next I need to pass in two parameters. The first would be the name of the control and the second would set the text.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub SetEditBox {
    my ($name,$value) = @_;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I had to start with the document object from my reference to the DOM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub SetEditBox {
    my ($name,$value) = @_;
    $IEDocument = $IEObject-&amp;gt;{Document};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To save time iterating, I made the assumption that edit boxes would only appear inside forms. I used the collection called &lt;code&gt;forms&lt;/code&gt; to return all forms on the page.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$forms = $IEDocument-&amp;gt;forms;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it was time to iterate.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for ($i = 0; $i &amp;lt; $forms-&amp;gt;length; $i++) {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First I needed each item in the form collection.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$form = $forms-&amp;gt;item($i);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside this iteration I wanted to find a specific element of the form with the name of the edit box.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (defined($form-&amp;gt;elements($name))) {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside this if statement I wanted to set the value of the edit box to the value passed into the subroutine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$form-&amp;gt;elements($name)-&amp;gt;{value} = $value;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then it was time to get out of Dodge so I wouldn&amp;rsquo;t waste time continuing the iteration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the final initial subroutine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub SetEditBox {
    my ($name, $value) = @_;
    my $IEDocument     = $IEObject-&amp;gt;{Document};
    my $forms          = $IEDocument-&amp;gt;forms;

    for (my $i = 0; $i &amp;lt; $forms-&amp;gt;length; $i++) {
        my $form       = $forms-&amp;gt;item($i);
        if (defined($form-&amp;gt;elements($name))) {
           $form-&amp;gt;elements($name)-&amp;gt;{value} = $value;
        }
        return;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is something very similar to the first original proof of concept version of &lt;a href=&#34;http://samie.sourceforge.net&#34;&gt;SAMIE&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Win32::OLE qw(EVENTS);
my $URL = &amp;quot;http://samie.sf.net/simpleform.html&amp;quot;;
my $IE  = Win32::OLE-&amp;gt;new(&amp;quot;InternetExplorer.Application&amp;quot;)
    || die &amp;quot;Could not start Internet Explorer.Application\n&amp;quot;;
Win32::OLE-&amp;gt;WithEvents($IE,\&amp;amp;Event,&amp;quot;DWebBrowserEvents2&amp;quot;);

$IE-&amp;gt;{visible} = 1;

$IE-&amp;gt;Navigate($URL);

Win32::OLE-&amp;gt;MessageLoop();
SetEditBox(&amp;quot;name&amp;quot;,&amp;quot;samie&amp;quot;);

sub Event {
    my ($Obj,$Event,@Args) = @_;
    print &amp;quot;Here is the Event: $Event\n&amp;quot;;
    if ($Event eq &amp;quot;DocumentComplete&amp;quot;) {
        $IEObject = shift @Args;
        print &amp;quot;Here is my reference: $IEObject\n&amp;quot;;
        print &amp;quot;URL: &amp;quot; .  $IEObject-&amp;gt;Document-&amp;gt;URL . &amp;quot;\n&amp;quot;;
            Win32::OLE-&amp;gt;QuitMessageLoop();
    }
}

sub SetEditBox {
    my ($name, $value) = @_;
    my $IEDocument     = $IEObject-&amp;gt;{Document};
    my $forms          = $IEDocument-&amp;gt;forms;

    for (my $i = 0; $i &amp;lt; $forms-&amp;gt;length; $i++) {
        my $form       = $forms-&amp;gt;item($i);
        if (defined($form-&amp;gt;elements($name))) {
           $form-&amp;gt;elements($name)-&amp;gt;{value} = $value;
        }
        return;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It made me laugh and tip my hat to Larry Wall, to think that I had the basic proof of concept of a $3,000 dollar per seat automation tool with about thirty lines of Perl. See more at the &lt;a href=&#34;http://samie.sourceforge.net/&#34;&gt;SAMIE home page&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automating Windows (DNS) with Perl</title>
      <link>http://localhost:1313/pub/2005/03/24/perl_dns.html/</link>
      <pubDate>Thu, 24 Mar 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/03/24/perl_dns.html/</guid>
      <description>

&lt;h3 id=&#34;driving-windows-dns-server&#34;&gt;Driving Windows DNS Server&lt;/h3&gt;

&lt;p&gt;If you happen to manage a DNS server running on Windows 2000 or Windows 2003 with more than just a couple of dozen resource records on it, you&amp;rsquo;ve probably already hit the limits of the MMC DNS plugin, the Windows administrative GUI for the DNS server implementation. Doing mass operations like creating 20 new records at once, moving a bunch of A records from one zone to another, or just searching for the next free IP in a reverse zone, can challenge your patience. To change the name part of an A record, you have to delete the entire record and re-create it from scratch using the new name. You&amp;rsquo;ve probably thought to yourself, &amp;ldquo;There MUST be another way to do this.&amp;rdquo; There is!&lt;/p&gt;

&lt;p&gt;Silently, almost shyly, behind the scenes and without the usual bells and whistles, Microsoft has arrived at the &lt;a href=&#34;http://www.pragmaticprogrammer.com/ppbook/extracts/rule_list.html&#34;&gt;power of the command shell&lt;/a&gt;. For the DNS services[1], the command line utility &lt;code&gt;dnscmd&lt;/code&gt; is available as part of the AdminPac for the server operating systems. &lt;code&gt;dnscmd&lt;/code&gt; is a very solid command line utility, with lots of options and subcommands, that allows you to do almost every possible operation on your DNS server. These include starting and stopping the server, adding and deleting zones and resource records, and controlling a lot of its behavior.&lt;/p&gt;

&lt;p&gt;This article explores how to run &lt;code&gt;dnscmd&lt;/code&gt; from Perl. In that respect, it is a classic &amp;ldquo;Perl-as-a-driver&amp;rdquo; script, invoking &lt;code&gt;dnscmd&lt;/code&gt; with various options and working on its outputs.&lt;/p&gt;

&lt;h3 id=&#34;dnscmd&#34;&gt;DNSCMD&lt;/h3&gt;

&lt;p&gt;Invoke &lt;code&gt;dnscmd /?&lt;/code&gt; to see a top-level list of available subcommands and type &lt;code&gt;dnscmd /subcommand&lt;/code&gt; /? for more specific help for this subcommand. &lt;code&gt;dnscmd /?&lt;/code&gt; shows that there is a subcommand &lt;code&gt;RecordDelete&lt;/code&gt;, and &lt;code&gt;dnscmd /recorddelete /?&lt;/code&gt; (case not significant) explains that you need a zone name (like &amp;ldquo;my.dom.ain&amp;rdquo;), a node name within this zone (like &amp;ldquo;host1&amp;rdquo;), a record type (like &amp;ldquo;A&amp;rdquo;), and the data part of the resource record to delete (like &amp;ldquo;10.20.40.5&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;The first argument to &lt;code&gt;dnscmd&lt;/code&gt;, if you actually want to do something with it, is the name of the DNS server to use. A full working command looks something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnscmd dnssrv.my.dom.ain /RecordDelete my.dom.ain host1 A 10.20.40.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This opens the very welcome opportunity to run &lt;code&gt;dnscmd&lt;/code&gt; remotelyâ€”from your workstation, for exampleâ€”which frees you from the need to log in to your DNS server.&lt;/p&gt;

&lt;h3 id=&#34;wdns-pl-media-pub-2005-03-24-perl-dns-wdns-pl-the-script&#34;&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_2005_03_24_perl_dns/wdns.pl&#34;&gt;WDNS.PL&lt;/a&gt; (The Script)&lt;/h3&gt;

&lt;p&gt;The script in the current version only handles A and PTR records. There is no handling of CNAME records, for example. Within this limitation, it is also very A record-oriented: you can add or delete A records, change the IP or name of an A record, or move the A record to a different zone. It keeps PTR records in sync with these changes, creating or deleting a corresponding PTR record with its A record. This is mostly what you want.&lt;/p&gt;

&lt;p&gt;The most important thing to understand with this script is the format and the meaning of the input data it takes (&amp;ldquo;Show me your data &amp;hellip;&amp;rdquo;)[2]. The format is simple, just:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;name1&amp;gt;      &amp;lt;target1&amp;gt;
    &amp;lt;name2&amp;gt;      ...
    ...          ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Separate &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;target&lt;/code&gt; by whitespace. A name is a relative or fully- qualified domain name. A target can be one of these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;another domain name, meaning to rename to that name;&lt;/li&gt;
&lt;li&gt;an IP, meaning to change to this IP;&lt;/li&gt;
&lt;li&gt;nothing or undef, meaning to delete this name.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This mirrors the basic functions of the script. To add some extra candy, the target parameter has two other possibilities which have proven very useful in my environment. A target can also be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a C net, given as a triple of IP buckets (like &amp;ldquo;10.20.40&amp;rdquo;);&lt;/li&gt;
&lt;li&gt;a net segment identifier (&amp;ldquo;v1&amp;rdquo;, &amp;ldquo;v2&amp;rdquo;, and so on, in my example).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In both cases, the script will give the name a free IP (if possible) from either the C net or the net segment specified by its identifier. I&amp;rsquo;ll return to this idea soon.&lt;/p&gt;

&lt;p&gt;To pull all of the various possibilities together, here is a list of sample input lines, each representing one of the mentioned possibilities for the target:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;          pcthe                10.20.90.53     -- new ip
          pcthe.my.dom.ain     10.20.90.53     -- new ip full qualified
          pcthe                10.20.90        -- search free ip in range
          pcthe                @v8             -- search free ip in net segment v8
          pcthe                pcthe2          -- rename host
          pcthe                pcthe.oth.dom   -- rename host full qualified
          pcthe                                -- delete host (with -r option)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pass this data to the script through either an input file or STDIN[3].&lt;/p&gt;

&lt;h4 id=&#34;init&#34;&gt;&lt;code&gt;init()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Now to the code. At startup, &lt;code&gt;wdns.pl&lt;/code&gt; pulls in the list of primary zones from the given DNS server, both forward (names as lookup keys) and reverse (IPs as lookup keys) zones. This is handy, because it will use this list again and again.&lt;/p&gt;

&lt;h4 id=&#34;mv-ip&#34;&gt;&lt;code&gt;mv_ip()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;The main worker routine is the sub &lt;code&gt;mv_ip&lt;/code&gt;. (Don&amp;rsquo;t think too much about the name; it&amp;rsquo;s from the time when the only function of the script was to change the IP of a given name). For any given name/target pair, it does the following: First it tries to find a FQDN for the name. If it finds a host for the given name, it uses the FQDN as a basis to construct the name part of the targeted record. If it cannot find a name, it assumes that it should create an entirely new record. If the options permit (&lt;code&gt;-c&lt;/code&gt;), it constructs one.&lt;/p&gt;

&lt;p&gt;Then it inspects the target. Depending on its type, the program prepares to assign a new IP to the name, rename an existing A record while retaining the IP, search for a free IP in a certain range, or just delete existing records. When everything settles, the actual changes take place, using &lt;code&gt;dnscmd&lt;/code&gt; to delete and add A and PTR records as appropriate. (There is no &lt;code&gt;UpdateRecord&lt;/code&gt; function in &lt;code&gt;dnscmd&lt;/code&gt;, so updating is in fact a combination of delete and create).&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it! The rest of the code is lower-level functions that help to achieve this.&lt;/p&gt;

&lt;h4 id=&#34;create-and-delete&#34;&gt;&lt;code&gt;create_*&lt;/code&gt; and &lt;code&gt;delete_*&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;The four subs &lt;code&gt;create_A&lt;/code&gt;, &lt;code&gt;create_PTR&lt;/code&gt;, &lt;code&gt;delete_A&lt;/code&gt;, and &lt;code&gt;delete_PTR&lt;/code&gt; are wrapper functions around the respective invocations of &lt;code&gt;dnscmd&lt;/code&gt;. An additional issue of interest is that Windows DNS will delete a PTR record once you delete the corresponding A record, so you don&amp;rsquo;t have to do so explicitly.&lt;/p&gt;

&lt;h4 id=&#34;get-rev-zone-and-get-fwd-zone&#34;&gt;&lt;code&gt;get_rev_zone()&lt;/code&gt; and &lt;code&gt;get_fwd_zone()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;One of the major issues when manipulating DNS resource records is picking the right zone to do the change in. If you have just one forward and one reverse zone, this is simple. However, if you are maintaining a lot of zones with domains and nested subdomains, while other subdomains of the same parent have their own zones, this might be tedious.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wdns.pl&lt;/code&gt; can offload this task for you. The subs &lt;code&gt;get_rev_zone&lt;/code&gt; and &lt;code&gt;get_fwd_zone&lt;/code&gt; use the initially retrieved list of primary zones from your server. They take an IP or a fully qualified domain name respectively, and split it into the node part and the zone part. So the IP 10.20.40.5 might split into 10.20.40 and 5 (if the proper zone of this IP is 40.20.10.in-addr.arpa) or 10 and 20.40.5 (if 10.in-addr.arpa happens to be the enclosing zone), depending on your zone settings. The same applies for domain names. Other routines use this information to add or delete resource records in their appropriate zones.&lt;/p&gt;

&lt;h4 id=&#34;ip-lookup-functions&#34;&gt;IP Lookup Functions&lt;/h4&gt;

&lt;p&gt;There is a set of subs I called &amp;ldquo;IP lookup functions&amp;rdquo;. They all help to find a free IP in an appropriate range. Depending on the target specification, they will search a certain C net or a whole net segment of unused address. This searching breaks down to finding the appropriate zone, the appropriate node (&amp;ldquo;subdomain&amp;rdquo;), and then listing the already existing leaf nodes in this range. Once it has the list of used nodes, it starts scanning for gaps or unused nodes off the end of the list.&lt;/p&gt;

&lt;p&gt;An additional feature of these routines is that they honor certain reservations in the ranges, either through fixed directives (&amp;ldquo;leave the first 50 addresses free at the beginning of each net segment&amp;rdquo;) or through inspecting dedicated TXT records on the DNS server that contain the &lt;code&gt;RESERVED&lt;/code&gt; keyword. (The actual format of these records is &lt;code&gt;RESERVED:&amp;lt;range-spec&amp;gt;:&amp;lt;free text&amp;gt;&lt;/code&gt;, where &lt;code&gt;range-spec&lt;/code&gt; is a colon-separated list of IPs or IP ranges. An example is &lt;code&gt;RESERVED:1,3,5,10-20,34:IPs reserved for the VPN switches&lt;/code&gt;). This helps avoid re-using reserved IPs accidentally through the automatic script, and also helps avoid messing things up when time is short.&lt;/p&gt;

&lt;p&gt;In the case of these TXT records, I used &lt;code&gt;dnscmd&lt;/code&gt; to retrieve them, not &lt;code&gt;nslookup&lt;/code&gt;, which would have been equally possible.&lt;/p&gt;

&lt;h3 id=&#34;a-word-about-the-net-segments&#34;&gt;A Word About the Net Segments&lt;/h3&gt;

&lt;p&gt;If your IPs reside in a segmented network, which is likely to be the case for most sites, make sure that your hosts have addresses for the segments to which they attach. For this script I have chosen a poor man&amp;rsquo;s approach to represent the segments just by the list of their respective C nets in the script itself (see the hash &lt;code&gt;%netsegs&lt;/code&gt; in the &amp;ldquo;Config section&amp;rdquo;). There might be a more clever way to do this. If you are going to run the script in your environment, edit this hash to reflect your network topology.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;dns_lookup&lt;/code&gt; sub looks up the current DNS entries. It runs the extern command &lt;code&gt;nslookup&lt;/code&gt; and parses its output. If you need more sophisticated DNS lookups (and &lt;code&gt;nslookup&lt;/code&gt;&amp;rsquo;s options just won&amp;rsquo;t do), you might want to resort to &lt;code&gt;dig&lt;/code&gt; (which has a Windows version) or &lt;a href=&#34;https://metacpan.org/pod/Net::DNS&#34;&gt;Net::DNS&lt;/a&gt; (which runs on Windows in any case). This simple way of doing it was just enough for my needs.&lt;/p&gt;

&lt;h4 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;In the Windows world, server processes are usually referred to as &amp;ldquo;services&amp;rdquo;; I tend to mix this term with &amp;ldquo;server&amp;rdquo; every now and then.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Show me your functions, and I will be confused. Show me your data, and your functions will be obvious&amp;rdquo;, to re-coin a famous quote from Frederick Brooks&amp;rsquo; &lt;em&gt;The Mythical Man-month&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Depending on your Windows command shell, you might have to tinker a bit to get the STDIN input to work as desired. Cygwin&amp;rsquo;s bash works like a breeze and takes Ctrl-Z&amp;lt;RET&amp;gt; as the EOF sequence.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Five Tips for .NET Programming in Perl</title>
      <link>http://localhost:1313/pub/2003/03/26/perlanddotnet.html/</link>
      <pubDate>Wed, 26 Mar 2003 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2003/03/26/perlanddotnet.html/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Randy Ray is coauthor of &lt;a href=&#34;http://www.oreilly.com/catalog/pwebserperl/&#34;&gt;Programming Web Services with Perl&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Abstract: One of the most common categories of questions on the &lt;code&gt;SOAP::Lite&lt;/code&gt; mailing list is how to get Perl SOAP applications to work with .NET services. It&amp;rsquo;s not that Perl and &lt;code&gt;SOAP::Lite&lt;/code&gt; are not suited to the job, but rather that there are easy traps to fall into. Add to that the fact that .NET has its own distinct philosophy toward applications, and the confusion is understandable. This article will cover some of the most common traps and considerations that trip up Perl developers.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-net-attraction&#34;&gt;The .NET Attraction&lt;/h3&gt;

&lt;p&gt;When Microsoft first announced its .NET initiative and the variety of technologies that would be created to support it, it was met with some skepticism. Reactions ranged from &amp;ldquo;they&amp;rsquo;re at it again&amp;rdquo; to &amp;ldquo;this could potentially be really powerful.&amp;rdquo; Right now, the reality is sitting somewhere in between, but it is gradually moving from the realm of &amp;ldquo;just another Microsoft gimmick&amp;rdquo; to widespread acceptance. Whatever else the .NET concept accomplishes, it is already bringing Web services to the general desktop arena.&lt;/p&gt;

&lt;p&gt;One of the limiting factors to the larger acceptance of .NET has been the limited set of fully supported languages. Microsoft promotes its C# language, while also providing .NET-enabled development tools and environments for the other languages that its Visual Studio product supports&amp;ndash;Java, C++, and Visual Basic. Because .NET is based on several published standards, other tools that are not generally .NET-centric are still useful, and provide alternatives to the Microsoft tools for some languages, primarily Java.&lt;/p&gt;

&lt;p&gt;The main XML concepts to keep in mind when dealing with a .NET service are XML Schema and WSDL, the Web Services Definition Language. A .NET service automatically generates a WSDL description of itself as a part of the tool environment that Microsoft provides. This is a powerful feature, and the key to interoperability with other languages. WSDL itself defers the definition of complex datatypes to the XML Schema application, which describes both document structure and the nature of the content itself.&lt;/p&gt;

&lt;p&gt;Unfortunately, Perl has been largely overlooked in the tools arena where .NET is concerned. Even though the purpose of basing .NET on open standards was to enable wider integration with other tools, systems, and languages, the only .NET product for Perl currently available is a Visual Studio plug-in for Perl that runs on only Microsoft-based platforms. As the number of .NET services grows, so will the desire to access these services from Perl clients, often on platforms that don&amp;rsquo;t support Visual Studio. The key to doing this lies in the fact that .NET services natively support SOAP as an interface, through the WSDL descriptions.&lt;/p&gt;

&lt;h3 id=&#34;the-tips-tricks&#34;&gt;The Tips &amp;amp; Tricks&lt;/h3&gt;

&lt;p&gt;The rest of this article offers five hints and help on writing these clients in Perl, using the &lt;code&gt;SOAP::Lite&lt;/code&gt; toolkit.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Identify and Qualify&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first, and most common, mistake that Perl clients make is to forget that .NET interfaces are strongly typed and use named arguments. Perl does neither of these things by default. In fact, when dealing with a SOAP service that is written in Perl, most of the time a client doesn&amp;rsquo;t have to worry about things such as parameter name or type. A .NET service is strict about the names and types (and namespace URIs) of the arguments.&lt;/p&gt;

&lt;p&gt;For example, imagine a service that provides the current time, possibly adjusted for time zone. The call, &lt;code&gt;getCurrentTime&lt;/code&gt;, may be called with no arguments for the time in UTC (Universal Coordinated Time), or it may be passed a single argument, &lt;code&gt;zone&lt;/code&gt;, the specified time zone for which the time should be adjusted. It expects this argument to be of type &lt;code&gt;string&lt;/code&gt; (using the definition of that basic type from the XML Schema specification). But simply passing the argument to a call won&amp;rsquo;t get the name right. Instead, &lt;code&gt;SOAP::Lite&lt;/code&gt; will create a generic name for the parameter when it creates the actual XML, and .NET will reject it.&lt;/p&gt;

&lt;p&gt;To get around this, use the &lt;code&gt;SOAP::Data&lt;/code&gt; class that is a part of &lt;code&gt;SOAP::Lite&lt;/code&gt; (it is in the same module, so you don&amp;rsquo;t have to load a second library):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $arg = SOAP::Data-&amp;gt;new(name =&amp;gt; &#39;zone&#39;, value =&amp;gt; &#39;PST&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;SOAP::Lite&lt;/code&gt; will properly identify values like &amp;ldquo;PST&amp;rdquo; (Pacific Standard Time) or &amp;ldquo;CDT&amp;rdquo; (Central Daylight Time) as being strings. But what if the interface also accepts numerical offsets like &amp;ldquo;-0800&amp;rdquo; or &amp;ldquo;+1100&amp;rdquo;? Without explicit casting as strings, those values would be encoded as &lt;code&gt;int&lt;/code&gt; values. And the service would reject them.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;SOAP::Data&lt;/code&gt; class covers this as well:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $arg = SOAP::Data-&amp;gt;new(name =&amp;gt; &#39;zone&#39;, value =&amp;gt; &#39;PST&#39;, type =&amp;gt; &#39;xsi:string&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(The &lt;em&gt;xsi:&lt;/em&gt; prefix on the type refers to the XML Schema Instance namespace, which &lt;code&gt;SOAP::Lite&lt;/code&gt; always defines and associates with that specific identifier.)&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;SOAP::Data&lt;/code&gt; class provides methods for all aspects of the data item: &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, and so on. It also provides &lt;code&gt;uri&lt;/code&gt; to specify the namespace URI (when needed), and &lt;code&gt;encodingStyle&lt;/code&gt; to specify the URI that identifies an alternative encoding from that being used in the rest of the request.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Be Careful About Namespaces&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The XML namespaces used on elements are just as important in a .NET service as the name and type are. SOAP relies on namespaces to distinguish parts from each other, but again the relaxed nature of Perl can mean that Perl-based services lure you into a false sense of ease that .NET doesn&amp;rsquo;t share.&lt;/p&gt;

&lt;p&gt;Unfortunately, &lt;code&gt;SOAP::Lite&lt;/code&gt; makes this harder for .NET applications by defaulting to no namespace for elements when none is explicitly given. Luckily, the &lt;code&gt;SOAP::Data&lt;/code&gt; class includes a method for defining the namespace as well:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $arg-&amp;gt;url(&#39;http://use.perl.org/Slash/Journal/SOAP&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Explicitly providing the namespace gets even more important when encoding complex types such as hashes and arrays.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use Classes and Objects to Control Encoding&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The default methods that &lt;code&gt;SOAP::Lite&lt;/code&gt; uses to encode arrays and hash tables will not produce the style of XML that a .NET service is expecting. &lt;code&gt;SOAP::Lite&lt;/code&gt; will base things on the plainest, most vanilla-type descriptions in the SOAP specification itself, while .NET uses complex types as defined in XML Schema for elements that are not basic data.&lt;/p&gt;

&lt;p&gt;Suppose a .NET interface defines a complex type it called &lt;strong&gt;CodeModuleDef&lt;/strong&gt;. This type has (for now) three simple elements: the &lt;em&gt;name&lt;/em&gt; of the module, the &lt;em&gt;language&lt;/em&gt; it is in, and the &lt;em&gt;lines&lt;/em&gt; of code. Now imagine the remote method &lt;strong&gt;registerModule&lt;/strong&gt; expects one such object as an argument. This &lt;em&gt;won&amp;rsquo;t&lt;/em&gt; work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $soap-&amp;gt;registerModule(SOAP::Data-&amp;gt;name(&#39;module&#39;)-&amp;gt;uri-&amp;gt;(&#39;http://...&#39;)-&amp;gt;
                       value({ name =&amp;gt; &#39;SOAP::Lite&#39;, language =&amp;gt; &#39;perl&#39;,
                               lines =&amp;gt; 4973 }));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The receiving server will get an element typed as &amp;ldquo;SOAPStruct&amp;rdquo; in the default namespace for unknown types (&lt;a href=&#34;http://xml.apache.org/xml-soap&#34;&gt;http://xml.apache.org/xml-soap&lt;/a&gt;). While setting the name and URI were OK, the type will still stop things dead in their tracks. Instead, do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $soap-&amp;gt;registerModule(SOAP::Data-&amp;gt;name(&#39;module&#39;)-&amp;gt;uri-&amp;gt;(&#39;http://...&#39;)-&amp;gt;
                       value(bless { name =&amp;gt; &#39;SOAP::Lite&#39;,
                                     language =&amp;gt; &#39;perl&#39;,
                                     lines =&amp;gt; 4973 }, &#39;CodeModuleDef&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The resulting structure will have the correct type attribute set. The same approach can be used for array references and scalars that are types other than the basic types.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Oops &amp;hellip; Watch Out for Element Order and Namespaces&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This actually won&amp;rsquo;t quite bridge the gap all the way. There are two problems with it. One is a general Perl feature, the other may be a bug with &lt;code&gt;SOAP::Lite&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first problem is that XML Schema generally requires the elements of a complex type to be in a well-defined order (there&amp;rsquo;s one type of compound structure that doesn&amp;rsquo;t require this, but it isn&amp;rsquo;t a commonly used). Perl, by nature, doesn&amp;rsquo;t preserve a specific order to hash keys. You can use the &lt;strong&gt;Tie::IxHash&lt;/strong&gt; module, if you know you will always insert the keys in the correct order. Or, you can provide your own serialization code for &lt;code&gt;SOAP::Lite&lt;/code&gt; to use. As it happens, this will allow you to fix the second problem, too. The second problem stems from the fact that &lt;code&gt;SOAP::Lite&lt;/code&gt; assigns the correct namespace to the outer element of the structure, but not to the inner elements. In a schema-based type, all the elements must be in the same namespace. This may be a bug in &lt;code&gt;SOAP::Lite&lt;/code&gt;, but that hasn&amp;rsquo;t been determined for certain (it seems like an unusual feature). The inner elements are in fact given no namespace at all.&lt;/p&gt;

&lt;p&gt;What is needed is a function that can be given to the serializer to use when it encounters an object of any of the special classes. This routine won&amp;rsquo;t have to actually produce XML, &lt;code&gt;SOAP::Lite&lt;/code&gt; will still take care of that. This routine will only have to produce a structure that the serializer will understand from the object it is given. A filter, in other words. To do that, two things are needed: an explicit declaration of the field-order, and an understanding of how the serializer expects to call this filter, and what it expects to be returned by it.&lt;/p&gt;

&lt;p&gt;The explicit ordering is simple; it can be an array declared in the class namespace, or a &amp;ldquo;private&amp;rdquo; key on the hash itself. Unlocking the second piece took some digging around into the internals of the &lt;code&gt;SOAP::Lite&lt;/code&gt; source code. Connecting the two took even more digging.&lt;/p&gt;

&lt;p&gt;For the example approach below, assume that any class that will use this generic serialization filter defines an array called &lt;code&gt;@FIELDS&lt;/code&gt; as a package-global value. Warning: This approach may be a little hard to wrap one&amp;rsquo;s brain around at first. We&amp;rsquo;ll explain it after the code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; sub serialize_complex_type {
   my ($soap, $obj, $name, $type, $attr) = @_;

   my @fields = do { no strict &#39;refs&#39;; @{ref($obj) . &#39;::FIELDS&#39;} };
   if ($name =~ /^(\w+):(\w+)$/) {
     $name = $2;
     $attr-&amp;gt;{xmlns} = $attr-&amp;gt;{&amp;quot;xmlns:$1&amp;quot;};
     delete $attr-&amp;gt;{&amp;quot;xmlns:$1&amp;quot;};
   } else {
     $attr-&amp;gt;{xmlns} = $attr-&amp;gt;{uri};
   }

   [ $name, $attr,
   [ map { defined($obj-&amp;gt;{$_}) ?
           $soap-&amp;gt;encode_object($obj-&amp;gt;{$_}, $_) : () }
     @fields ] ];
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, every package that plans to use it to serialize their objects will have to make it visible to the &lt;code&gt;SOAP::Serializer&lt;/code&gt; package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; *SOAP::Serializer::as_Some__Class = \&amp;amp;main::serialize_complex_type;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we assumed a class name of &lt;code&gt;Some::Class&lt;/code&gt;, and that the earlier code was declared in the main namespace. So what does it all do?&lt;/p&gt;

&lt;p&gt;The serializing routine is called by an object derived from &lt;code&gt;SOAP::Serializer&lt;/code&gt; (or a subclass of it), as a method with the object to serialize, its name, its type, and the hash table of attributes as arguments. It expects to get back an array reference with three or four values. The first is the tag name to use. The second is the hash reference of attributes to add to the opening tag, and the third is either an array reference of nested content, or a simple scalar value to be put inside the opening and closing tag pair. The fourth element, should you include it, is a value for an &amp;ldquo;ID&amp;rdquo; attribute. This is used to uniquely identify an element, for the sake of multiple references and such. We don&amp;rsquo;t worry about it here.&lt;/p&gt;

&lt;p&gt;So we take the arguments as they are given, and the first thing the routine does is check for a name that includes a namespace. Since the style of &lt;code&gt;SOAP::Lite&lt;/code&gt; will leave any child elements unqualified, the namespace label is stripped and the URI itself is assigned to the simple &lt;code&gt;xmlns&lt;/code&gt; attribute. This will make it apply to any child elements of this object. If the object contains other objects as children, then they too will be run through this serializer, so they will have the chance to declare a namespace in the same way. If there was no label, then we take the value of the &lt;code&gt;uri&lt;/code&gt; attribute, which would have been set by calling the &lt;code&gt;SOAP::Data&lt;/code&gt; method of the same name. Finally, we build the array reference using the (possibly modified) &lt;code&gt;$name&lt;/code&gt;, the modified attribute hash reference and an array reference of the object&amp;rsquo;s elements, in field order.&lt;/p&gt;

&lt;p&gt;We got the field order by using a symbolic reference to the &lt;code&gt;@FIELDS&lt;/code&gt; array for the object&amp;rsquo;s class. Much the same sort of trick is needed to get the &lt;code&gt;SOAP::Serializer&lt;/code&gt; class to use this code. When handed a blessed object, the serializer takes the class name, changes all &amp;ldquo;::&amp;rdquo; to &amp;ldquo;__&amp;rdquo;, and prepends &amp;ldquo;as_&amp;rdquo; to the result. It then looks for a method by that name. It searches using the serialization object itself, so the method has to be visible to that class. Right now, there isn&amp;rsquo;t a way in &lt;code&gt;SOAP::Lite&lt;/code&gt; to do this more directly. To hook this serialization into place, we directly alias &amp;ldquo;as_Some__Class&amp;rdquo; into the needed package, as shown above.&lt;/p&gt;

&lt;p&gt;Note that the recursive encoding of the object&amp;rsquo;s contents (which may be objects themselves) is handled by a &lt;code&gt;SOAP::Serializer&lt;/code&gt; method called &amp;ldquo;&lt;code&gt;encode_object&lt;/code&gt;.&amp;rdquo; This is an undocumented part of the serializer that was the source of much of the logic for the code snippet above. It was by examining this routine that the above code (in a slightly different form) was used in writing a complex client to use the MapPoint.NET service, one of Microsoft&amp;rsquo;s commercial .NET services.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Play with &lt;code&gt;stubmaker.pl&lt;/code&gt; and &lt;code&gt;SOAPsh.pl&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For the last tip, a more simple piece of advice. The &lt;code&gt;SOAP::Lite&lt;/code&gt; package comes with a number of utility scripts. Among these are a &amp;ldquo;shell&amp;rdquo; for testing SOAP services, called &lt;code&gt;SOAPsh.pl&lt;/code&gt;, and a code-generation tool for generating classes from WSDL description files, called &lt;code&gt;stubmaker.pl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As was mentioned earlier, WSDL plays a major role in the definition and the documentation of .NET services. The &lt;code&gt;stubmaker.pl&lt;/code&gt; tool tries to create Perl classes based on a WSDL document. It does a fairly good job, but it lacks in support for XML Schema. If a service uses any nonbasic types, then the template that &lt;code&gt;stubmaker.pl&lt;/code&gt; generates would not handle it as well.&lt;/p&gt;

&lt;p&gt;This should not prevent you from using the tool. It does a lot of the heavy lifting by extracting the proper namespace URLs, actual server URLs, and remote method names. Even if the code template itself cannot be used directly, then it could still save you work.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;There is much more to properly dealing with .NET services than can be addressed in a single article. The goal here is to head off some of the more frequently encoutered problems, and let you as the developer focus on more important issues.&lt;/p&gt;

&lt;p&gt;One of the biggest drawbacks to using Perl for .NET is that there is only limited support at present for WSDL and XML Schema. Some new CPAN modules are working to fill these gaps, but they are in early stages of functionality. For now, it is still necessary to do some of the core steps manually. This situation should improve over time.&lt;/p&gt;

&lt;p&gt;As a last &amp;ldquo;bonus&amp;rdquo; tip, remember this: Much of the advice here is just as important for writing .NET services, as it is for writing .NET clients. For the next Web service you write, consider the additional client base you would have access to if you wrote it to be compatible with .NET.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;O&amp;rsquo;Reilly &amp;amp; Associates recently released (December 2002) &lt;a href=&#34;http://www.oreilly.com/catalog/pwebserperl/&#34;&gt;Programming Web Services with Perl&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.oreilly.com/catalog/pwebserperl/chapter/index.html&#34;&gt;Sample Chapter 6, Programming SOAP&lt;/a&gt;, is available free online.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can also look at the &lt;a href=&#34;http://www.oreilly.com/catalog/pwebserperl/toc.html&#34;&gt;Table of Contents&lt;/a&gt;, the &lt;a href=&#34;http://www.oreilly.com/catalog/pwebserperl/inx.html&#34;&gt;Index&lt;/a&gt;, and the &lt;a href=&#34;http://www.oreilly.com/catalog/pwebserperl/desc.html&#34;&gt;Full Description&lt;/a&gt; of the book.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For more information, or to order the book, &lt;a href=&#34;http://www.oreilly.com/catalog/pwebserperl/&#34;&gt;click here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A Perl Hacker&#39;s Foray into .NET</title>
      <link>http://localhost:1313/pub/2002/03/19/dotnet.html/</link>
      <pubDate>Tue, 19 Mar 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/03/19/dotnet.html/</guid>
      <description>

&lt;p&gt;No, I haven&amp;rsquo;t sold out; I haven&amp;rsquo;t gone over to the dark side; I haven&amp;rsquo;t been bought. I&amp;rsquo;m one of the last people to be using closed-source software by choice. But one of the traits of any self-respecting hacker is curiosity, and so when he hears about some cool new technology, he&amp;rsquo;s almost obliged to check it out and see whether there&amp;rsquo;s anything he can learn from it. So this particular Perl hacker took a look at Microsoft&amp;rsquo;s .NET Framework, and, well, Mikey, I think he likes it.&lt;/p&gt;

&lt;h3 id=&#34;what-is-net&#34;&gt;What Is .NET?&lt;/h3&gt;

&lt;p&gt;When something&amp;rsquo;s as incredibly hyped as Microsoft&amp;rsquo;s .NET project, it&amp;rsquo;s hard to convince people that there&amp;rsquo;s a real working technology underneath it. Unfortunately, Microsoft doesn&amp;rsquo;t do itself any favors by slapping the .NET moniker on anything they can. So let&amp;rsquo;s clarify what we&amp;rsquo;re talking about.&lt;/p&gt;

&lt;p&gt;.NET is applied to anything with the broad notion of &amp;ldquo;Web services&amp;rdquo; &amp;ndash; from the Passport and Hailstorm automated privacy-deprivation services and the Web-service-enabled versions of operating systems and application products to the C# language and the Common Language Runtime. But there is an underlying theme and it goes like this: The .NET &lt;strong&gt;Framework&lt;/strong&gt; is an environment based on the Common Language Runtime and (to some extent) the C# language, for creating portable Web services.&lt;/p&gt;

&lt;p&gt;So for our exploration, the components of the .NET Framework that we care about are the Common Language Runtime and the C# language. And to nail it down beyond any doubt, these are things that you can download and use today. They&amp;rsquo;re real, they exist and they work.&lt;/p&gt;

&lt;h3 id=&#34;the-net-clr&#34;&gt;The .NET CLR&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s begin with the CLR. The CLR is, in essence, a virtual machine for C# much like the Java VM, but which is specifically designed to allow a wide variety of languages other than C# to run on it. Does this ring any bells with Perl programmers? Yes, it&amp;rsquo;s not entirely dissimilar to the idea of the Parrot VM, the host VM for Perl 6 but designed to run other languages as well.&lt;/p&gt;

&lt;p&gt;But that&amp;rsquo;s more or less where the similarity ends. For starters, while Parrot is chiefly intended to be ran as an interpreted VM but has a &amp;ldquo;bolted-on&amp;rdquo; JIT, CLR is expected to be JITted from the get-go. Microsoft seems to want to avoid the accusations of slowness leveled at Java by effectively requiring JIT compilation.&lt;/p&gt;

&lt;p&gt;Another &amp;ldquo;surface&amp;rdquo; distinction between Parrot and CLR is that the languages supported by the CLR are primarily statically typed languages such as C#, J#, (a variant of Java) and Visual Basic .NET. The languages Parrot aims to support are primarily dynamically typed, allowing run-time compilation, symbolic variable access, (try doing &lt;code&gt;${&amp;quot;Package::$var&amp;quot;}&lt;/code&gt; in C#&amp;hellip;) closures, and other relatively wacky operations.&lt;/p&gt;

&lt;p&gt;To address these sorts of features, the &lt;a href=&#34;http://research.microsoft.com/project7.net/project_7.htm&#34;&gt;Project 7&lt;/a&gt; research project was set up to provide .NET ports for a variety of &amp;ldquo;academic&amp;rdquo; languages. Unfortunately, it transpires that this has highlighted some limitations of the CLR, and so almost all of the implementations have had to modify their target languages slightly or drop difficult features. For instance, the work on &lt;a href=&#34;http://www.cs.mu.oz.au/research/mercury/&#34;&gt;Mercury&lt;/a&gt; turned up some deficiencies in CLR&amp;rsquo;s Common Type System that would also affect a Perl implementation. We&amp;rsquo;ll discuss these deficiencies later when we examine how Perl and the .NET Framework can interact.&lt;/p&gt;

&lt;p&gt;But on the other hand, let&amp;rsquo;s not let this detract from what the CLR is good at - it can run a variety of different languages relatively efficiently, and it can share data between languages. Let&amp;rsquo;s now take a look at C#, the native language of the CLR, and then see how we can run .NET executables on our favourite free operating systems.&lt;/p&gt;

&lt;h3 id=&#34;c&#34;&gt;C#&lt;/h3&gt;

&lt;p&gt;C# is Microsoft&amp;rsquo;s new language for the .NET Framework. It shares some features with Java, and in fact looks extremely like Java at first glance. Here&amp;rsquo;s a piece of C# code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;

class App {
   public static void Main(string[] args) {
      Console.WriteLine(&amp;quot;Hello World&amp;quot;);
      foreach (String s in args) {
         Console.WriteLine(&amp;quot;Command-line argument: &amp;quot; + s);
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Naturally, the Java-like features are quite obvious to anyone who&amp;rsquo;s seen much Java - everything&amp;rsquo;s in a class, and there&amp;rsquo;s an explicitly defined &lt;code&gt;Main&lt;/code&gt; function. But what&amp;rsquo;s this - a Perl-like &lt;code&gt;foreach&lt;/code&gt; loop. And that &lt;code&gt;using&lt;/code&gt; declaration seems strangely familiar.&lt;/p&gt;

&lt;p&gt;Now, don&amp;rsquo;t get me wrong. I&amp;rsquo;m not trying to claim that C# is some bastard offspring of Perl and Java, or even that C# really has that much in common with Perl; it doesn&amp;rsquo;t. But it is a well-designed language that does have a bunch of &amp;ldquo;programmer-friendly&amp;rdquo; language features that traditionally made &amp;ldquo;scripting&amp;rdquo; languages like Perl or Python faster for rapid code prototyping.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s some more code, which forms part of a game-of-life benchmarking tool we used to benchmark the CLR against Parrot.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    static String generate(String input) {
        int cell, neighbours;
        int len = input.Length;
        String output = &amp;quot;&amp;quot;;
        cell = 0; 
        do {
            neighbours = 0;
            foreach (int offset in new Int32[] {-16, -15, -14, -1, 1, 14, 15, 16}) {
                int pos = (offset + len + cell) % len;
                if (input.Substring(pos, 1) == &amp;quot;*&amp;quot;)
                    neighbours++; 
            }
            if (input.Substring(cell, 1) == &amp;quot;*&amp;quot;) {
                output += (neighbours &amp;lt; 2 || neighbours &amp;gt; 3) ? &amp;quot; &amp;quot; : &amp;quot;*&amp;quot;;
            } else {
                output += (neighbours == 3) ? &amp;quot;*&amp;quot; : &amp;quot; &amp;quot;;
            } 
        } while (++cell &amp;lt; len); 
        return output;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This runs one generation of the &lt;a href=&#34;http://www.math.com/students/wonders/life/life.html&#34;&gt;game of life&lt;/a&gt;, taking an input playing field and building an output string. What&amp;rsquo;s remarkable about this is that I wrote it after a day of looking at C# code, with no prior exposure to Java. C# is certainly easy to pick up.&lt;/p&gt;

&lt;p&gt;What can Perl learn from C#? That&amp;rsquo;s an interesting question, especially as the Perl 6 design project is ongoing. Let&amp;rsquo;s have a a quick look at some of the innovations in C# and how we might apply them to Perl.&lt;/p&gt;

&lt;h4 id=&#34;strong-names&#34;&gt;Strong Names&lt;/h4&gt;

&lt;p&gt;We&amp;rsquo;ll start with an easy one, since Larry has already said that something like this will already be in Perl 6: To avoid versioning clashes and interface incompatibilities, .NET has the concept of &amp;ldquo;strong names.&amp;rdquo; Assemblies &amp;ndash; the C# equivalent of Java&amp;rsquo;s &lt;code&gt;jar&lt;/code&gt; files &amp;ndash; have metadata containing their name, version number, md5sum and cryptographic signature, meaning you can be sure you&amp;rsquo;re always going to get the definitions and behavior you&amp;rsquo;d expect from any third-party code you run. More generally, assemblies support arbitrary metadata that you can use to annotate their contents.&lt;/p&gt;

&lt;p&gt;This approach to versioning and metadata in Perl 6 was highlighted in Larry&amp;rsquo;s &lt;a href=&#34;http://localhost:1313/pub/2001/07/25/onion.html&#34;&gt;State of the Onion&lt;/a&gt; talk this year, and is also the solution used by JavaScript 2.0, as described by Waldemar Horwat at his &lt;a href=&#34;http://localhost:1313/pub/2001/11/21/lightweight.html&#34;&gt;LL1 presentation&lt;/a&gt;, so it seems to be the way the language world is going.&lt;/p&gt;

&lt;h4 id=&#34;properties&#34;&gt;Properties&lt;/h4&gt;

&lt;p&gt;C# supports properties, which are class fields with explicit get/set methods. This is slightly akin to Perl&amp;rsquo;s tying, but much, much slicker. Here&amp;rsquo;s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    private int MyInt;
    public int SomeInt {
        get {
            Console.WriteLine(&amp;quot;I was got.\n&amp;quot;);
            return MyInt;
        }
        set {
            Console.WriteLine(&amp;quot;I was set.\n&amp;quot;);
            MyInt = value;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whenever we access &lt;code&gt;SomeInt&lt;/code&gt;, the &lt;code&gt;get&lt;/code&gt; accessor is executed, and returns the value of the underlying &lt;code&gt;MyInt&lt;/code&gt; variable; when we write to it, the corresponding &lt;code&gt;set&lt;/code&gt; accessor is called. Here&amp;rsquo;s one suggested way we could do something similar in Perl 6:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      my $myint;
      our $SomeInt :get(sub{ print &amp;quot;I was got!\n&amp;quot;; $myint })
                   :set(sub{ print &amp;quot;I was set!\n&amp;quot;; $myint = $^a });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C# actually takes this idea slightly further, providing &amp;ldquo;indexers&amp;rdquo;, which are essentially tied arrays:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    private String realString;
    public String substrString[int idx] {
        get {
            return realString.Substring(idx, 1);
        }
        set {
            realString = realString(0, idx) + value + realString(idx+1);
        }
    }

    substrString[12] = &amp;quot;*&amp;quot;; // substr($string, 12, 1) = &amp;quot;*&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;object-value-duality&#34;&gt;Object-Value Duality&lt;/h4&gt;

&lt;p&gt;Within the CLR type system, (CTS) there are two distinct types (as it were) of types: reference types and value types. Value types are the simple, honest-to-God values: integers, floating point numbers, strings, and so on. Reference types, on the other hand, are objects, references, pointers and the like.&lt;/p&gt;

&lt;p&gt;Now for the twist: Each value type has an associated reference type, and you can convert values between them. So, if you&amp;rsquo;ve got an &lt;code&gt;int counter;&lt;/code&gt;, then you can &amp;ldquo;box&amp;rdquo; it as an object like so: &lt;code&gt;Object CounterObj = counter&lt;/code&gt;. More specifically, &lt;code&gt;int&lt;/code&gt; corresponds to &lt;code&gt;Int32&lt;/code&gt;. This gives us the flexibility of objects when we need to, for instance, call methods on them, but the speed of fixed values when we&amp;rsquo;re doing tight loops on the stack.&lt;/p&gt;

&lt;p&gt;While Perl is and needs to remain an essentially untyped language, optional explicit typing definitions combined with object-value duality could massively up Perl&amp;rsquo;s flexibility as well as bringing some potential optimizations.&lt;/p&gt;

&lt;h4 id=&#34;chaining-delegates&#34;&gt;Chaining Delegates&lt;/h4&gt;

&lt;p&gt;Here&amp;rsquo;s an extremely rare thing - a non-obvious use of operator overloading that actually makes some sense. In event-driven programming, you&amp;rsquo;ll often want to assign callbacks to happen on a given event. Here&amp;rsquo;s how C# does it: (The following code adapted from &lt;a href=&#34;http://www.csharphelp.com/archives/archive253.html&#34;&gt;Events in C#&lt;/a&gt; by Sanju)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;delegate void ButtonEventHandler(object source, int clickCount);

class Button {
    public event ButtonEventHandler ButtonClick;

    public void clicked(int count) { // Fire the handler
        if (ButtonClick != null) ButtonClick (this,count);
    }
}

public class Dialog {
    public Dialog() {
        Button b = new Button();

        b.ButtonClick += new ButtonEventHandler(onButtonAction);
        b.clicked(1);
    }
}

public void onButtonAction(object source,int clickCount) {
    //Define the actions to be performed on button-click here.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can you see what&amp;rsquo;s going on? The &amp;ldquo;delegate&amp;rdquo; type &lt;code&gt;ButtonEventHandler&lt;/code&gt; is a function signature that we can use to handle button click events. Our &lt;code&gt;Button&lt;/code&gt; class has one of these handlers, &lt;code&gt;ButtonClick&lt;/code&gt;, which is defined as an &lt;code&gt;event&lt;/code&gt;. In the &lt;code&gt;Dialog&lt;/code&gt; class, we instatiate a new delegate, using the &lt;code&gt;onButtonAction&lt;/code&gt; function to fulfill the role of a &lt;code&gt;ButtonEventHandler&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But notice how we assign it to the &lt;code&gt;Button&lt;/code&gt;&amp;rsquo;s &lt;code&gt;ButtonClick&lt;/code&gt; field - we use addition. We can add more handlers in the same way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    b.ButtonClick += new ButtonEventHandler(myButtonHandler);
    b.ButtonClick += new ButtonEventHandler(otherButtonHandler);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now when the button&amp;rsquo;s &lt;code&gt;clicked&lt;/code&gt; method fires off the delegates, all three of these functions will be called in turn. We might decide that we need to get rid of one of them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    b.ButtonClick -= new ButtonEventHandler(myButtonHandler);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that, only the two functions &lt;code&gt;onButtonAction&lt;/code&gt; and &lt;code&gt;otherButtonHandler&lt;/code&gt; are active. Chaining delegates like this is something I haven&amp;rsquo;t seen in any other language, and makes sense for event-based programming; it&amp;rsquo;s something it might be good for Perl 6 to support.&lt;/p&gt;

&lt;h3 id=&#34;mono-and-rotor-running-net&#34;&gt;Mono and Rotor - Running .NET&lt;/h3&gt;

&lt;p&gt;OK, enough talk about C#. Let&amp;rsquo;s go run some.&lt;/p&gt;

&lt;p&gt;Of course, the easiest way to do this at present is to do your development on a Windows box. Just grab a copy of the &lt;a href=&#34;http://msdn.microsoft.com/downloads/default.asp?url=/downloads/sample.asp?url=/msdn-files/027/000/976/msdncompositedoc.xml&#34;&gt;.NET Framework SDK&lt;/a&gt;, (only 137M!) install it, and you have a C# compiler at your disposal which can produce .NET executables running on the Microsoft CLR. This is how I do my C# experimentation - I have a copy of Windows running on a virtual machine, sharing a filesystem with my OS X laptop. I do my editing in my favourite Unix editor, then pop over to the Windows session to run the &lt;code&gt;CSC&lt;/code&gt; compiler.&lt;/p&gt;

&lt;p&gt;I know that for some of us, however, that&amp;rsquo;s not a great solution. Thankfully, the creative monkeys at &lt;a href=&#34;http://www.ximian.com&#34;&gt;Ximian&lt;/a&gt; have been feverishly working on bringing us an open-sourced .NET Framework implementation. The &lt;a href=&#34;http://www.go-mono.com&#34;&gt;Mono&lt;/a&gt; project comprises of an implementation of the Common Language Runtime plus a C# compiler and other goodies; a very easy way to get started with .NET is to pick up a release of Mono, and compile and install it.&lt;/p&gt;

&lt;p&gt;After the usual &lt;code&gt;./configure;make;make install&lt;/code&gt;, you have three new commands at your disposal: &lt;code&gt;mcs&lt;/code&gt; is the Mono C# compiler; &lt;code&gt;mint&lt;/code&gt; is the CLR Interpreter; and &lt;code&gt;mono&lt;/code&gt; is its JITted cousin.&lt;/p&gt;

&lt;p&gt;And yes, Veronica, you can run .NET &lt;code&gt;EXE&lt;/code&gt; files on Linux. Let&amp;rsquo;s take the first C# example from the top of this article, and run it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % mcs -o hello.exe hello.cs
 % mono hello.exe A Test Program
Hello World
Command-line argument: A
Command-line argument: Test
Command-line argument: Program
RESULT: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And just to show you we&amp;rsquo;re not messing you around:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % file hello.exe
hello.exe: MS Windows PE 32-bit Intel 80386 console executable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mono isn&amp;rsquo;t a particularly quick runtime, nor is it particularly complete, but it has a large number of hackers improving its base classes every day. It runs a large percentage of the .NET executables I throw at it, and the &lt;code&gt;mcs&lt;/code&gt; compiler can now compile itself, so you can do all your development using open source tools.&lt;/p&gt;

&lt;p&gt;Another option, once it appears, is Microsoft&amp;rsquo;s &lt;a href=&#34;http://www.oreillynet.com/pub/dotnet/2002/03/04/rotor.html&#34;&gt;Rotor&lt;/a&gt; project, a shared source CLR and compiler suite. Rotor aims to be the ECMA standard implementation of the .NET Framework; Microsoft has submitted the Framework for standardization, but in typical style, its own implementations add extra functionality not part of the standard. Oh, and in case the words &amp;ldquo;shared source&amp;rdquo; haven&amp;rsquo;t jumped out at you yet, do not even &lt;em&gt;consider&lt;/em&gt; looking at Rotor if you may work on Mono at some point. However, for the casual user, its comprehensive implementation means it will be a better short-term choice for .NET experimentation - again, once it&amp;rsquo;s released.&lt;/p&gt;

&lt;h3 id=&#34;clr-architecture&#34;&gt;CLR Architecture&lt;/h3&gt;

&lt;p&gt;Before we finish considering how Perl and the .NET Framework relate to each other, let&amp;rsquo;s take a more in-depth look at the internals of the Common Language Runtime compared to our own Parrot.&lt;/p&gt;

&lt;p&gt;First, the CLR is a stack-based virtual machine, as opposed to Parrot&amp;rsquo;s register approach. I don&amp;rsquo;t know why this approach was taken, other than, I imagine, &amp;ldquo;because everyone else does it.&amp;rdquo; CLR runs a bytecode language, which Microsoft calls MS-IL when it is talking about their implementation of CLR, and what it calls CIL (Common Intermediate Language) to ECMA. It&amp;rsquo;s object-oriented assembler, a true horror to behold, but it works. Here&amp;rsquo;s a fragment of the IL for our Hello example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    .method public static 
           default void Main(string[] args)  cil managed 
    {
        // Method begins at RVA 0x2090
        .entrypoint
        // Code size 78 (0x4e)
        .maxstack 9
        .locals (
                string  V_0,
                string[]        V_1,
                int32   V_2)
        IL_0000: ldstr &amp;quot;Hello World&amp;quot;
        IL_0005: call void System.Console::WriteLine(string)
        IL_000a: ldarg.s 0
     ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to optimize CLR for JITting, it imposes a number of restrictions on the IL. For instance, the stack may only be used to store parameters and return values from operations and calls; you can&amp;rsquo;t access arbitrary points in the stack; more significantly, the types of values on the stack have to be statically determinable and invariant. That&amp;rsquo;s to say, at a given call in the code, you know for sure what types of things are on the stack at the time.&lt;/p&gt;

&lt;p&gt;The types themselves are part of the Common Type System, something every language compiling to .NET has to conform to. As we have mentioned, CTS types are either value types or reference types. There&amp;rsquo;s a smaller subset of CTS called the Common Language Specification, CLS. Languages &lt;strong&gt;must&lt;/strong&gt; implement CLS types, and may implement their own types as part of the CTS. The CLS ought to be used in all &amp;ldquo;outward-facing&amp;rdquo; APIs where two different languages might meet; the idea being the data passed between two languages is guaranteed to have a known meaning and semantics. However, this API restriction is not enforced by the VM.&lt;/p&gt;

&lt;p&gt;Types which can appear on the stack are restricted again; you&amp;rsquo;re allowed int32, int64, int, float, a reference, a &amp;ldquo;managed&amp;rdquo; pointer or an unmanaged pointer. &amp;ldquo;Management&amp;rdquo; is determined by where the pointer comes from (trusted code is managed) and influences what it&amp;rsquo;s allowed to see and how it gets GCed. Local arguments may live somewhere other than on the main stack - this is implementation-defined - in which case they have access to a richer set of types; but since you have a reference to an object, you should be OK.&lt;/p&gt;

&lt;p&gt;Other value types include structures and enumerations. Since value types are passed around on the stack, you can&amp;rsquo;t really have big structures, since you&amp;rsquo;d be passing loads of data. There&amp;rsquo;s also the typed reference, which is a reference plus something storing what sort of reference it is. Reference types are kept in the heap, managed by garbage collection, and are referenced on the stack. This is not unlike what Parrot does with PMC and non-PMC registers.&lt;/p&gt;

&lt;p&gt;Like Java, the CLR has a reasonably small number of operations. You can load/store constants, local variables, arguments, fields and array elements; you can create and dereference pointers; you can do arithmetic; you can do conversion, casting and truncating; there are branch ops (including a built-in lookup-table switch op) and method call ops; there&amp;rsquo;s a special tail-recursion method-call op; you can throw and handle exceptions; you can box and unbox, converting value types to reference types and vice verca; you can create an array and find its length; you can handle typed references. And that&amp;rsquo;s essentially it. Anything else is outside the realm of the CLR, and has to be implemented with external methods.&lt;/p&gt;

&lt;p&gt;An excellent paper comparing the CLR and the JVM has been produced by the team working on Component Pascal; they&amp;rsquo;ve ported CP to both virtual machines, and so are very well-placed to run a comparison. See the &lt;a href=&#34;http://www2.fit.qut.edu.au/CompSci/PLAS//ComponentPascal/&#34;&gt;GPCP project page&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;perl-and-net&#34;&gt;Perl and .NET&lt;/h3&gt;

&lt;p&gt;How can we connect Perl and .NET? Well, let&amp;rsquo;s look at the pieces of work that have already been done in this area. ActiveState have been leading research, with their experimental &lt;a href=&#34;http://www.activestate.com/Initiatives/NET/Research.html&#34;&gt;Perl for .NET Research&lt;/a&gt; and &lt;a href=&#34;http://www.activestate.com/PerlNET/&#34;&gt;PerlNET&lt;/a&gt; projects.&lt;/p&gt;

&lt;p&gt;Perl for .NET Research was a brave idea; Jan Dubois essentially wrote a Perl interpreter in C#, and used the standard Perl compilation technique of combining an embedded interpreter with a serialized representation of the Perl program. The resulting compiler is a C# analog of the &lt;code&gt;B::CC&lt;/code&gt; module, and then runs the &lt;code&gt;CSC&lt;/code&gt; compiler to compile the C# representation of the Perl program, linking in the Perl interpreter, into an executable. To be honest, I couldn&amp;rsquo;t get Perl for .NET Research to produce executables, but I could study it enough to see what it was doing.&lt;/p&gt;

&lt;p&gt;PerlNET, now included with AS&amp;rsquo;s Perl Dev Kit, takes a rather different approach. This time the Perl interpreter sits &amp;ldquo;outside&amp;rdquo; the .NET Framework, communicating with it through DLLs. This allows for .NET Framework code to call into Perl, and also for Perl to make calls into the .NET Framework library. For instance, one may write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use namespace &amp;quot;System&amp;quot;;
    Console-&amp;gt;WriteLine(&amp;quot;Hello World!&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to call the &lt;code&gt;System.Console.WriteLine&lt;/code&gt; method in the .NET Framework runtime library.&lt;/p&gt;

&lt;p&gt;However, neither of these initiatives compile Perl to MS-IL in the usual sense of the word. This is surprising, since it would be an interesting test of the flexibility of the Common Type System.&lt;/p&gt;

&lt;p&gt;This is one of the possible avenues I&amp;rsquo;d like to see explored in terms of bringing .NET and Perl closer together. Other possibilities include crossover between CLR and Parrot - I&amp;rsquo;d love to see .NET executables run on top of Parrot and Parrot bytecode files convertable to .NET; I&amp;rsquo;d like to see a Perl 6 interpreter emit MS-IL; I&amp;rsquo;d like to see Perl programs sharing data and objects with other languages on top of some virtual machine.&lt;/p&gt;

&lt;p&gt;Like it or not, there&amp;rsquo;s a good chance that the .NET Framework is going to be a big part of the technological scene in the future. I hope after this brief introduction, you&amp;rsquo;re a little more prepared for it when it happens, and we have some direction as to how Perl fits into it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;For more on .NET, check O&amp;rsquo;Reilly Network&amp;rsquo;s &lt;a href=&#34;http://oreillynet.com/dotnet&#34;&gt;.NET DevCenter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What every Perl programmer needs to know about .NET</title>
      <link>http://localhost:1313/pub/2000/12/net.html/</link>
      <pubDate>Tue, 19 Dec 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/12/net.html/</guid>
      <description>

&lt;p&gt;.NET is the latest hype blitz from Microsoft (and you thought it was just a domain). If your eyes are glazing over or you&amp;rsquo;re tempted to write it off as marketing speak, read on.&lt;/p&gt;

&lt;p&gt;Although Microsoft is loath to admit it, .NET is really their answer to Sun. The Java language, the Java virtual machine and CORBA have proved to be a threat. .NET is the umbrella name for Microsoft&amp;rsquo;s attempt to better Sun.&lt;/p&gt;

&lt;p&gt;Whereas Java is the programming language for Sun&amp;rsquo;s &amp;ldquo;computer is the network&amp;rdquo; effort, Microsoft has given us C# (&amp;ldquo;C sharp&amp;rdquo;). It&amp;rsquo;s derived from C, and attempts to avoid some of the pitfalls of Java and C++. And much as Java compiles down to Java Virtual Machine (JVM) instructions, C# compiles down to Intermediate Language (IL).&lt;/p&gt;

&lt;p&gt;Where Microsoft betters Sun is that while Java is the only real language that compiles to the JVM (&lt;a href=&#34;#note&#34;&gt;see update below&lt;/a&gt;,) Microsoft intends IL to be cross-language. That is, Perl, Visual Basic and C# can be compiled down to IL. The idea is to make it possible to integrate multiple languages into one system.&lt;/p&gt;

&lt;p&gt;Sun chose CORBA as its distributed application platform, but Microsoft has gone with SOAP (Simple Object Access Protocol). In my opinion, SOAP has one huge benefit over CORBA: mere mortals can implement it! Soap uses HTTP to send XML-encoded instance and method calls on remotely defined objects and receive return values. The umbrella term for SOAP and its cousin XML-RPC is &amp;ldquo;Web Services.&amp;rdquo; There are already SOAP and XML-RPC modules for Perl.&lt;/p&gt;

&lt;p&gt;While it&amp;rsquo;s still early days for .NET, and there&amp;rsquo;s still considerable potential for it all to turn out to be vaporware, Microsoft has begun to release .NET components. And it&amp;rsquo;s not just Microsoft - a number of people are using SOAP to give concrete APIs to their Web-based systems. Think of all the times you&amp;rsquo;ve tried to parse HTML to extract information - the SOAP way of the future is for that information to be directly accessible through SOAP calls. As I said, this is already happening.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve heard .NET described as &amp;ldquo;Microsoft&amp;rsquo;s tacit admission that most shops are not 100 percent Microsoft, so Microsoft products need to work better with other platforms.&amp;rdquo; There are many places for Perl in this new world:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In the back-end, serving data through SOAP. Be warned that even &lt;code&gt;SOAP::Lite&lt;/code&gt; has a bit of a learning curve, but there are already solid modules for this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cpan.org/modules/by-module/SOAP/&#34;&gt;http://www.cpan.org/modules/by-module/SOAP/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the front-end, compiling down to IL. Jan Dubois of Activestate has a research project related to this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.activestate.com/Products/NET/Perl.html&#34;&gt;http://www.activestate.com/Products/NET/Perl.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;more-information&#34;&gt;More Information&lt;/h3&gt;

&lt;p&gt;So where can you learn more? Microsoft has a lot of information about .NET, of course.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.microsoft.com/net/default.asp&#34;&gt;http://www.microsoft.com/net/default.asp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s an introduction from the Windows point of view (covering the plans for COM and ADO and all the other Windowsy things I didn&amp;rsquo;t mention):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.vbxml.com/xml/articles/dotnetintro/default.asp&#34;&gt;http://www.vbxml.com/xml/articles/dotnetintro/default.asp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your best bet for things you can use now, though, are the SOAP and XML-RPC modules. Be warned: The SOAP modules are hard to get into.&lt;/p&gt;

&lt;p&gt;XML-RPC via the Frontier::RPC module&lt;br /&gt;
&lt;a href=&#34;http://bitsko.slc.ut.us/~ken/xml-rpc/&#34;&gt;http://bitsko.slc.ut.us/~ken/xml-rpc/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SOAP Modules:&lt;br /&gt;
&lt;a href=&#34;http://www.cpan.org/modules/by-module/SOAP/&#34;&gt;http://www.cpan.org/modules/by-module/SOAP/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are some references for Web services:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.xml-rpc.com&#34;&gt;http://www.xml-rpc.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.soaprpc.com&#34;&gt;http://www.soaprpc.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.soaplite.com/&#34;&gt;http://www.soaplite.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.techmetrix.com/trendmarkers/tmk1200/tmk1200-3.php3&#34;&gt;http://www.techmetrix.com/trendmarkers/tmk1200/tmk1200-3.php3&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&#34;note&#34;&gt;&lt;/span&gt;
I meant that while Microsoft is funding and encouraging other languages to compile down to the IL, Sun never seemed to do that with the JVM. As far as I could tell (and I am the first to admit that I am on the fringe of the Java world), their main push was to have Java be The Language. I&amp;rsquo;m interested to hear whether they really did encourage other languages to compile to the JVM.&lt;/p&gt;

&lt;p&gt;Poor choice of words on my part, sorry for the confusion. See &lt;a href=&#34;http://grunge.cs.tu-berlin.de/~tolk/vmlanguages.html&#34;&gt;http://grunge.cs.tu-berlin.de/~tolk/vmlanguages.html for a list of languages that compile to the JVM&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Zero Cost Solution</title>
      <link>http://localhost:1313/pub/1998/11/article.html/</link>
      <pubDate>Tue, 17 Nov 1998 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/1998/11/article.html/</guid>
      <description>&lt;p&gt;Creating a Task Tracking System For $0 in Licensing Fees, Hardware, and Software Costs&lt;/p&gt;

&lt;p&gt;CONEXANT (formerly Rockwell Semiconductor Systems) Supply Chain Management Planning and Execution Systems needed a way to keep track of in-house tasks. When associate departments requested something be done for them, a centralized repository of their requests needed to be created for tracking and management purposes, and the ability to assign tasks to programmer/analysts needed to be integrated into this repository of data.&lt;/p&gt;

&lt;p&gt;We looked for a simple software solution to meet our needs with no luck. There were many solutions found that did LOTS more than we needed them to do, with steep learning curves for users due to the products&amp;rsquo; complexities, and more often than not, enormous pricetags accompanied most of these products. We needed a system that could accomodate as many as 200 users down the road, and licensing fees for this quantity of users were outrageous.&lt;/p&gt;

&lt;p&gt;So I decided to build one in-house. I had a couple of criteria: 1) The system had to be able to run on both an Alpha-powered Digital Unix server, and on a Microsoft NT 4.0 server. 2) The system needed to be developed fast. Our tasks were piling up and the system was needed to keep track of them in a way that all concerned could get at the data, search it, assign tasks from it, modify it, etc.&lt;/p&gt;

&lt;p&gt;Enter Perl. I&amp;rsquo;d been using it for basic CGI for a little over 6 months, mainly to dynamically generate web pages from text files FTP&amp;rsquo;d to me by Oracle database queries. Open a filehandle, read in the text file, process a few loops, and print some HTML. I looked around the web for a simple text database management system, found a couple, but didn&amp;rsquo;t understand how the programmers had come up with the code I saw. I&amp;rsquo;m still learning the basics of Perl, and figured I could try to code a solution that would do the job we needed done, and I could learn a lot in the process!&lt;/p&gt;

&lt;p&gt;Perl amazed me. I was able to logically think of what I wanted to do, and the language allowed me to stumble and fall gracefully as the solution quickly came together. It was actually very fun to do! I worked with &lt;em&gt;Learning Perl&lt;/em&gt;, &lt;em&gt;Programming Perl&lt;/em&gt;, and &lt;em&gt;Effective Perl Programming&lt;/em&gt; close at hand, and only needed one trip to the Perl newsgroup to ask a silly question, which was very promptly and courteously answered.&lt;/p&gt;

&lt;p&gt;I got the majority of the basic add, delete, modify, search and assign (email) process written in about a week, and from start to completely finished product, it took me only 4 weeks. I must thank Matt Wright for his &lt;a href=&#34;http://www.worldwidemart.com/scripts/&#34;&gt;FormMail&lt;/a&gt; Perl script that I use on the Alpha for form to email processing in the &amp;ldquo;assign task&amp;rdquo; code.&lt;/p&gt;

&lt;p&gt;The Home screen greets the user, and lets them know they can use any browser they wish to use the system, and a few other minor tidbits.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1998_11_article/home.gif&#34; alt=&#34;Home Screen&#34; width=&#34;330&#34; height=&#34;226&#34; /&gt;
&lt;strong&gt;Home screen&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Add screen is where a new task is added to the database. The database is an ASCII text delimited file, and I provide a link to it on the Home screen so that users can download it and play in Access or Excel or whatever. Drop down menus were built with as much information as possible to make data entry easier on the users throughout the system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1998_11_article/add.gif&#34; alt=&#34;Add Screen&#34; width=&#34;449&#34; height=&#34;279&#34; /&gt;
&lt;strong&gt;Add screen&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Delete screen is presented when the delete menu item is selected. A radio button allows the user to select which task record is to be deleted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1998_11_article/delete.gif&#34; alt=&#34;Delete Screen&#34; width=&#34;450&#34; height=&#34;338&#34; /&gt;
&lt;strong&gt;Delete screen&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first Modify screen is similiar to the Delete screen&amp;hellip;a radio button selects the task record for modification.&lt;/p&gt;

&lt;p&gt;The second Modification screen brings the record back to textboxes, where the user can modify fields and the information is written back to the database.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1998_11_article/modify.gif&#34; alt=&#34;The second modify screen&#34; width=&#34;418&#34; height=&#34;278&#34; /&gt;
&lt;strong&gt;Second modify screen&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first Assign screen is similiar to the Delete screen&amp;hellip;a radio button selects the task record for assignment.&lt;/p&gt;

&lt;p&gt;The second Assign screen brings the record back to the user, where after review the user selects the task recipient from a drop down menu, and identifys themself from another drop down menu. When the &amp;ldquo;Assign Task&amp;rdquo; button is pressed, the record data is passed to the sendmail daemon on the Alpha through Matt Wright&amp;rsquo;s FormMail script.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1998_11_article/assign.gif&#34; alt=&#34;Second assignment screen&#34; width=&#34;449&#34; height=&#34;246&#34; /&gt;
&lt;strong&gt;Second assign screen&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Search screen facilitates entry of data for search on a single field in the database. (As I learn more Perl, I&amp;rsquo;ll add the ability to search on more than one field at a time, but this works for now!)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1998_11_article/search.gif&#34; alt=&#34;Search screen&#34; width=&#34;316&#34; height=&#34;262&#34; /&gt;
&lt;strong&gt;Search screen&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And finally there is a Show All function, returning all records.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1998_11_article/showall.gif&#34; alt=&#34;Show all screen&#34; width=&#34;450&#34; height=&#34;338&#34; /&gt;
&lt;strong&gt;Show All screen&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The program is currently running on Gurusamy Sarathy&amp;rsquo;s 5.004_02 Win32 binary distribution on a NT 4.0 server, and works great! It was fun to write, and I suspect I&amp;rsquo;ll be fiddling with it, adding capabilties as the users request them, for some time to come. Big thanks to all the Perl community for helping to develop such a great tool for rapid application development, a tool easily learned, and very forgiving to us Perl newbies!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

